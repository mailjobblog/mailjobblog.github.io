<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>李斌的技术博客</title>
  
  <subtitle>李斌的技术博客</subtitle>
  <link href="https://blog.mailjob.net/atom.xml" rel="self"/>
  
  <link href="https://blog.mailjob.net/"/>
  <updated>2025-10-17T05:39:50.045Z</updated>
  <id>https://blog.mailjob.net/</id>
  
  <author>
    <name>汀风</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>解决项目部署CORS跨域问题</title>
    <link href="https://blog.mailjob.net/posts/2084750826.html"/>
    <id>https://blog.mailjob.net/posts/2084750826.html</id>
    <published>2024-10-09T09:17:57.000Z</published>
    <updated>2025-10-17T05:39:50.045Z</updated>
    
    <content type="html"><![CDATA[<h2 id="CORS问题">CORS问题</h2><h3 id="CORS-跨域问题的产生原因">CORS 跨域问题的产生原因</h3><p>CORS（Cross-Origin Resource Sharing）是一种机制，允许从一个域（源）请求来自不同域（源）的资源。现代浏览器出于安全考虑，限制网页的 AJAX 请求，禁止前端脚本访问不同域的资源。这种安全策略称为同源策略（Same-Origin Policy），它限制了不同源（包括协议、域名和端口）的交互。CORS 的出现是为了在特定情况下允许跨源请求，增强了 Web 应用的灵活性。</p><h3 id="如何解决-CORS-跨域问题">如何解决 CORS 跨域问题</h3><p><strong>1. CORS 头部配置</strong>：通过设置 HTTP 响应头来告知浏览器允许跨域请求。常见的头部包括：</p><ul><li><code>Access-Control-Allow-Origin</code>: 指定允许哪些域进行请求，可以是具体的域名或 <code>*</code>（允许所有域）。</li><li><code>Access-Control-Allow-Methods</code>: 指定允许的 HTTP 方法，如 <code>GET</code>、<code>POST</code> 等。</li><li><code>Access-Control-Allow-Headers</code>: 指定允许的请求头。</li><li><code>Access-Control-Max-Age</code>: 指定预检请求的缓存时间。</li></ul><p><strong>2. 代理服务器</strong>：通过设置一个同域的代理服务器，将跨域请求转发到目标域。这种方法常用于开发环境。</p><p><strong>3. JSONP</strong>：通过 <code>&lt;script&gt;</code> 标签的跨域特性，获取数据。此方法仅支持 <code>GET</code> 请求，已经逐渐被 CORS 取代。</p><h3 id="CORS配置详解">CORS配置详解</h3><p>CORS 头部是服务器响应中包含的一组 HTTP 头，用于控制哪些来源的请求被允许，如何处理跨域请求。以下是常见的 CORS 头部配置项及其含义：</p><ol><li>Access-Control-Allow-Origin</li></ol><ul><li><strong>说明</strong>：指定哪些源可以访问资源。</li><li><strong>可配置值</strong>：<ul><li>特定的域名，例如 <code>https://www.example.com</code>，表示仅允许该域的请求。</li><li><code>*</code>，表示允许所有域进行请求（不推荐用于敏感数据）。</li></ul></li><li><strong>示例</strong>：<pre class="line-numbers language-http" data-language="http"><code class="language-http"><span class="token header"><span class="token header-name keyword">Access-Control-Allow-Origin</span><span class="token punctuation">:</span> <span class="token header-value">https://www.example.com</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><ol start="2"><li>Access-Control-Allow-Methods</li></ol><ul><li><strong>说明</strong>：指定允许的 HTTP 方法，表示客户端可以使用哪些 HTTP 方法来访问资源。</li><li><strong>可配置值</strong>：可以是任意 HTTP 方法，如 <code>GET</code>、<code>POST</code>、<code>PUT</code>、<code>DELETE</code>、<code>OPTIONS</code> 等，多个方法用逗号分隔。</li><li><strong>示例</strong>：<pre class="line-numbers language-http" data-language="http"><code class="language-http"><span class="token header"><span class="token header-name keyword">Access-Control-Allow-Methods</span><span class="token punctuation">:</span> <span class="token header-value">GET, POST, OPTIONS</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><ol start="3"><li>Access-Control-Allow-Headers</li></ol><ul><li><strong>说明</strong>：指定哪些请求头可以被客户端发送。</li><li><strong>可配置值</strong>：可以是任意请求头，例如 <code>Content-Type</code>、<code>Authorization</code>、<code>X-Custom-Header</code> 等，多个头部用逗号分隔。</li><li><strong>示例</strong>：<pre class="line-numbers language-http" data-language="http"><code class="language-http"><span class="token header"><span class="token header-name keyword">Access-Control-Allow-Headers</span><span class="token punctuation">:</span> <span class="token header-value">Content-Type, Authorization</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><ol start="4"><li>Access-Control-Expose-Headers</li></ol><ul><li><strong>说明</strong>：指定哪些响应头可以被浏览器访问，浏览器默认只允许访问 <code>Cache-Control</code>、<code>Content-Language</code>、<code>Content-Type</code>、<code>Expires</code>、<code>Last-Modified</code> 和 <code>Pragma</code> 等标准响应头。</li><li><strong>可配置值</strong>：可以列出多个响应头。</li><li><strong>示例</strong>：<pre class="line-numbers language-http" data-language="http"><code class="language-http"><span class="token header"><span class="token header-name keyword">Access-Control-Expose-Headers</span><span class="token punctuation">:</span> <span class="token header-value">X-Custom-Header</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><ol start="5"><li>Access-Control-Max-Age</li></ol><ul><li><strong>说明</strong>：指定预检请求的缓存时间（以秒为单位），在此时间内，浏览器可以直接使用相同的请求，而无需再次发送预检请求。</li><li><strong>可配置值</strong>：任意正整数，表示缓存时间。</li><li><strong>示例</strong>：<pre class="line-numbers language-http" data-language="http"><code class="language-http"><span class="token header"><span class="token header-name keyword">Access-Control-Max-Age</span><span class="token punctuation">:</span> <span class="token header-value">86400  # 24小时</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><ol start="6"><li>Access-Control-Allow-Credentials</li></ol><ul><li><strong>说明</strong>：指示是否允许浏览器发送凭据（如 Cookies 和 HTTP 认证信息）到跨域请求的服务器。</li><li><strong>可配置值</strong>：<ul><li><code>true</code>，表示允许发送凭据。</li><li><code>false</code>，表示不允许。</li></ul></li><li><strong>示例</strong>：<pre class="line-numbers language-http" data-language="http"><code class="language-http"><span class="token header"><span class="token header-name keyword">Access-Control-Allow-Credentials</span><span class="token punctuation">:</span> <span class="token header-value">true</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><ol start="7"><li>Access-Control-Request-Method</li></ol><ul><li><strong>说明</strong>：在预检请求中使用，指示实际请求所使用的 HTTP 方法。</li><li><strong>示例</strong>：<pre class="line-numbers language-http" data-language="http"><code class="language-http"><span class="token header"><span class="token header-name keyword">Access-Control-Request-Method</span><span class="token punctuation">:</span> <span class="token header-value">POST</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><ol start="8"><li>Access-Control-Request-Headers</li></ol><ul><li><strong>说明</strong>：在预检请求中使用，指示实际请求所使用的请求头。</li><li><strong>示例</strong>：<pre class="line-numbers language-http" data-language="http"><code class="language-http"><span class="token header"><span class="token header-name keyword">Access-Control-Request-Headers</span><span class="token punctuation">:</span> <span class="token header-value">Content-Type, Authorization</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h2 id="不同部署方案CORS问题解决">不同部署方案CORS问题解决</h2><h3 id="同域名下项目部署">同域名下项目部署</h3><p>如果前端和后端共用一个域名（例如 <code>https://www.example.com</code>），则不需要 CORS 的额外配置。前端可以直接访问后端 API，只需确保 API 路由的正确设置。</p><h4 id="前端项目配置">前端项目配置</h4><h5 id="前端项目（Vue-3）">前端项目（Vue 3）</h5><p>在 Vue 3 项目中，你可以直接调用后端 API。例如，使用 <code>axios</code> 发起请求：</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">import axios from &#39;axios&#39;;axios.get(&#39;&#x2F;api&#x2F;data&#39;)    .then(response &#x3D;&gt; &#123;        console.log(response.data);    &#125;)    .catch(error &#x3D;&gt; &#123;        console.error(error);    &#125;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="前端项目Nginx配置">前端项目Nginx配置</h5><pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx"><span class="token directive"><span class="token keyword">server</span></span> <span class="token punctuation">&#123;</span>    <span class="token directive"><span class="token keyword">listen</span> <span class="token number">80</span></span><span class="token punctuation">;</span>    <span class="token directive"><span class="token keyword">server_name</span> www.example.com</span><span class="token punctuation">;</span>    <span class="token comment"># 前端项目的配置</span>    <span class="token directive"><span class="token keyword">location</span> /</span> <span class="token punctuation">&#123;</span>        <span class="token directive"><span class="token keyword">root</span> /path/to/vue/dist</span><span class="token punctuation">;</span>  <span class="token comment"># Vue 生成的静态文件路径</span>        <span class="token directive"><span class="token keyword">try_files</span> <span class="token variable">$uri</span> <span class="token variable">$uri</span>/ /index.html</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment"># 后端 API 的配置</span>    <span class="token directive"><span class="token keyword">location</span> /api/</span> <span class="token punctuation">&#123;</span>        <span class="token directive"><span class="token keyword">proxy_pass</span> http://127.0.0.1:8000</span><span class="token punctuation">;</span>  <span class="token comment"># 假设 后端项目 运行在 8000 端口</span>        <span class="token directive"><span class="token keyword">proxy_set_header</span> Host <span class="token variable">$host</span></span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">proxy_set_header</span> X-Real-IP <span class="token variable">$remote_addr</span></span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">proxy_set_header</span> X-Forwarded-For <span class="token variable">$proxy_add_x_forwarded_for</span></span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">proxy_set_header</span> X-Forwarded-Proto <span class="token variable">$scheme</span></span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment"># 以下省略 ...</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="总结">总结</h5><ol><li><p><strong>前端</strong>（Vue 3）和 <strong>后端</strong>（Laravel）在同一域名下运行，因此不需要 CORS 配置。</p></li><li><p><strong>Nginx</strong> 配置中，前端和后端通过不同的请求路径（如 <code>/</code> 和 <code>/api/</code>）进行区分。所有以 <code>/api/</code> 开头的请求将被代理到后端 Laravel 应用。</p></li></ol><h3 id="不同域名下项目部署">不同域名下项目部署</h3><p>当前端和后端位于不同域名（例如前端 <code>https://www.example.com</code>，后端 <code>https://api.example.com</code>）时，就需要进行 CORS 配置。</p><h4 id="后端项目配置">后端项目配置</h4><h5 id="后端项目（PHP）">后端项目（PHP）</h5><p>在 PHP 后端中，你可以通过设置响应头来解决 CORS：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token comment">// index.php</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'Access-Control-Allow-Origin: https://www.example.com'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'Access-Control-Allow-Methods: GET, POST, OPTIONS'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 如果运行所有，则配置为 *</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'Access-Control-Allow-Headers: Origin, Content-Type, Accept, Authorization'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// header('Content-Type: application/json');</span><span class="token variable">$data</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string single-quoted-string">'message'</span> <span class="token operator">=></span> <span class="token string single-quoted-string">'Hello from API!'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token function">json_encode</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="后端项目Nginx配置">后端项目Nginx配置</h5><pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx"><span class="token directive"><span class="token keyword">server</span></span> <span class="token punctuation">&#123;</span>    <span class="token directive"><span class="token keyword">listen</span> <span class="token number">80</span></span><span class="token punctuation">;</span>    <span class="token directive"><span class="token keyword">server_name</span> api.example.com</span><span class="token punctuation">;</span>    <span class="token directive"><span class="token keyword">location</span> /</span> <span class="token punctuation">&#123;</span>        <span class="token comment"># CORS配置...</span>        <span class="token directive"><span class="token keyword">add_header</span> <span class="token string">'Access-Control-Allow-Origin'</span> <span class="token string">'https://www.example.com'</span></span><span class="token punctuation">;</span> <span class="token comment"># 允许前端域名访问</span>        <span class="token directive"><span class="token keyword">add_header</span> <span class="token string">'Access-Control-Allow-Methods'</span> <span class="token string">'GET, POST, OPTIONS'</span></span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">add_header</span> <span class="token string">'Access-Control-Allow-Headers'</span> <span class="token string">'Origin, Content-Type, Accept, Authorization'</span></span><span class="token punctuation">;</span>                <span class="token comment"># 处理预检请求</span>        <span class="token directive"><span class="token keyword">if</span> (<span class="token variable">$request_method</span> = <span class="token string">'OPTIONS'</span>)</span> <span class="token punctuation">&#123;</span>            <span class="token directive"><span class="token keyword">add_header</span> <span class="token string">'Access-Control-Max-Age'</span> <span class="token number">86400</span></span><span class="token punctuation">;</span>            <span class="token directive"><span class="token keyword">add_header</span> <span class="token string">'Content-Length'</span> <span class="token number">0</span></span><span class="token punctuation">;</span>            <span class="token directive"><span class="token keyword">return</span> <span class="token number">204</span></span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment"># 其他配置...</span>    <span class="token punctuation">&#125;</span>    <span class="token comment"># 以下省略 ...</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="前端项目配置-2">前端项目配置</h4><h5 id="前端项目（Vue-3）-2">前端项目（Vue 3）</h5><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">import axios from &#39;axios&#39;;axios.get(&#39;https:&#x2F;&#x2F;api.example.com&#x2F;api.php&#39;)    .then(response &#x3D;&gt; &#123;        console.log(response.data);    &#125;)    .catch(error &#x3D;&gt; &#123;        console.error(error);    &#125;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="前端项目Nginx配置-2">前端项目Nginx配置</h5><pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx"><span class="token directive"><span class="token keyword">server</span></span> <span class="token punctuation">&#123;</span>    <span class="token directive"><span class="token keyword">listen</span> <span class="token number">80</span></span><span class="token punctuation">;</span>    <span class="token directive"><span class="token keyword">server_name</span> www.example.com</span><span class="token punctuation">;</span>    <span class="token directive"><span class="token keyword">location</span> /</span> <span class="token punctuation">&#123;</span>        <span class="token directive"><span class="token keyword">root</span> /path/to/vue/dist</span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">try_files</span> <span class="token variable">$uri</span> <span class="token variable">$uri</span>/ /index.html</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment"># 以下省略 ...</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="总结-2">总结</h2><p>CORS 是一种用于解决跨域请求的机制。根据不同的需求，开发者可以选择不同的方案来处理跨域问题：</p><ul><li>同域名的前端和后端之间无需 CORS 配置。</li><li>不同域名之间的请求需要通过设置 CORS 头部来允许访问。</li><li>配置 Nginx 时，要根据请求路径区分前端和后端的处理。</li></ul><p>通过以上配置和理解，开发者可以有效解决跨域问题，实现前后端的顺利交互。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;CORS问题&quot;&gt;CORS问题&lt;/h2&gt;
&lt;h3 id=&quot;CORS-跨域问题的产生原因&quot;&gt;CORS 跨域问题的产生原因&lt;/h3&gt;
&lt;p&gt;CORS（Cross-Origin Resource Sharing）是一种机制，允许从一个域（源）请求来自不同域（源）的资源。现</summary>
      
    
    
    
    <category term="linux" scheme="https://blog.mailjob.net/categories/linux/"/>
    
    
    <category term="php" scheme="https://blog.mailjob.net/tags/php/"/>
    
    <category term="linux" scheme="https://blog.mailjob.net/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>Laravel全局处理数据库异常回滚</title>
    <link href="https://blog.mailjob.net/posts/4100310017.html"/>
    <id>https://blog.mailjob.net/posts/4100310017.html</id>
    <published>2023-07-28T10:51:47.000Z</published>
    <updated>2025-10-17T05:39:50.049Z</updated>
    
    <content type="html"><![CDATA[<p>在 Laravel 应用程序中，我们经常会使用多个数据库连接来处理各种业务需求。然而，当在多个数据库连接中执行操作时，我们可能会遇到操作失败需要回滚的情况。本文将介绍如何使用 Laravel 的异常处理器来实现全局处理 MySQL 回滚问题，并提供了相应的代码示例。</p><h3 id="准备工作">准备工作</h3><p>在开始之前，确保你已经安装了 Laravel 环境并具备基本的 Laravel 开发知识。</p><h3 id="自定义异常处理器">自定义异常处理器</h3><p>首先，我们需要创建一个自定义的异常处理器类。这个自定义类需要实现 <code>Illuminate\Contracts\Debug\ExceptionHandler</code> 接口，以便能够捕获和处理异常。以下是一个简单的示例代码：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">namespace</span> <span class="token package">App<span class="token punctuation">\</span>Exceptions</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">Exception</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\</span>Contracts<span class="token punctuation">\</span>Debug<span class="token punctuation">\</span>ExceptionHandler</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\</span>Foundation<span class="token punctuation">\</span>Exceptions<span class="token punctuation">\</span>Handler</span> <span class="token keyword">as</span> ExceptionHandler<span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\</span>Support<span class="token punctuation">\</span>Facades<span class="token punctuation">\</span>DB</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">CustomExceptionHandler</span> <span class="token keyword">extends</span> <span class="token class-name">ExceptionHandler</span> <span class="token keyword">implements</span> <span class="token class-name">ExceptionHandler</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">render</span><span class="token punctuation">(</span><span class="token variable">$request</span><span class="token punctuation">,</span> <span class="token class-name type-declaration">Exception</span> <span class="token variable">$e</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$e</span> <span class="token keyword">instanceof</span> <span class="token class-name class-name-fully-qualified"><span class="token punctuation">\</span>PDOException</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 获取所有已经配置的数据库连接</span>            <span class="token variable">$connections</span> <span class="token operator">=</span> <span class="token function">config</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'database.connections'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$connections</span> <span class="token keyword">as</span> <span class="token variable">$connection</span> <span class="token operator">=></span> <span class="token variable">$config</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">// 判断数据库连接是否启用了事务</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$config</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'transaction'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token comment">// 回滚数据库操作</span>                    <span class="token class-name static-context">DB</span><span class="token operator">::</span><span class="token function">connection</span><span class="token punctuation">(</span><span class="token variable">$connection</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">rollBack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">// 这里可以根据业务需求进行其他的处理操作</span>            <span class="token keyword">return</span> <span class="token function">response</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">[</span>                <span class="token string single-quoted-string">'message'</span> <span class="token operator">=></span> <span class="token string single-quoted-string">'数据库操作失败'</span><span class="token punctuation">,</span>                <span class="token string single-quoted-string">'error'</span> <span class="token operator">=></span> <span class="token variable">$e</span><span class="token operator">-></span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token keyword static-context">parent</span><span class="token operator">::</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token variable">$request</span><span class="token punctuation">,</span> <span class="token variable">$e</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在上述代码中，我们首先判断是否抛出的异常是 <code>PDOException</code> 类型的异常。如果是，我们获取所有已经配置的数据库连接，并遍历每个连接判断是否启用了事务。如果启用了事务，我们使用相应的连接对象执行回滚操作。</p><p>然后，我们可以根据实际情况在处理器中添加其他需要的处理操作。在示例代码中，我们返回一个 JSON 响应，包含自定义的错误信息和异常消息。</p><h3 id="注册异常处理器">注册异常处理器</h3><p>接下来，我们需要将自定义的异常处理器注册到 Laravel 框架中。打开 <code>app/Exceptions/Handler.php</code> 文件并修改 <code>register</code> 方法如下：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">register</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">app</span><span class="token operator">-></span><span class="token function">environment</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'production'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token function">reportable</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token class-name type-declaration">Throwable</span> <span class="token variable">$e</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token function">renderable</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token class-name type-declaration">Throwable</span> <span class="token variable">$e</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 使用自定义的异常处理器</span>            <span class="token keyword">return</span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token class-name class-name-fully-qualified static-context"><span class="token punctuation">\</span>App<span class="token punctuation">\</span>Exceptions<span class="token punctuation">\</span>CustomExceptionHandler</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">render</span><span class="token punctuation">(</span><span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token variable">$e</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在上述代码中，我们调用了 <code>renderable</code> 方法并传递一个回调函数进去。这个回调函数会在异常发生时被调用，并使用 <code>resolve</code> 函数来获取我们自定义的异常处理器实例，然后调用其 <code>render</code> 方法来处理异常。</p><p>请确保根据实际路径修改命名空间和类名。</p><h3 id="总结">总结</h3><p>通过以上步骤，我们成功地实现了在 Laravel 框架中处理多个数据库连接的 MySQL 回滚问题。我们创建了一个自定义的异常处理器，通过遍历所有配置的数据库连接，如果启用了事务，就执行回滚操作。同时，我们还可以在处理器中添加其他的处理操作以满足实际业务需求。</p><p>以上就是本文介绍的方法，希望能对你解决多个数据库连接下的 MySQL 回滚问题有所帮助。</p><h3 id="可能的优化点">可能的优化点</h3><p>除了以上方法，还有一些可能的优化点可以考虑：</p><ol><li><strong>异常处理细化</strong>：根据不同的异常类型，可以采取不同的处理策略。例如，某些异常可能只需要回滚特定的数据库连接，而不是所有连接。</li><li><strong>错误日志记录</strong>：将异常信息记录到日志文件中，方便排查问题和追踪。</li><li><strong>通知机制</strong>：在发生异常时，可以发送通知给开发团队或相关人员，以便及时处理问题。</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在 Laravel 应用程序中，我们经常会使用多个数据库连接来处理各种业务需求。然而，当在多个数据库连接中执行操作时，我们可能会遇到操作失败需要回滚的情况。本文将介绍如何使用 Laravel 的异常处理器来实现全局处理 MySQL 回滚问题，并提供了相应的代码示例。&lt;/p&gt;</summary>
      
    
    
    
    <category term="php" scheme="https://blog.mailjob.net/categories/php/"/>
    
    
    <category term="php" scheme="https://blog.mailjob.net/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>使用go-redis/redismock做Redis单元测试</title>
    <link href="https://blog.mailjob.net/posts/3307624659.html"/>
    <id>https://blog.mailjob.net/posts/3307624659.html</id>
    <published>2023-07-26T01:17:50.000Z</published>
    <updated>2025-10-17T05:39:50.042Z</updated>
    
    <content type="html"><![CDATA[<p>在开发应用程序时，使用 Redis 是一种常见的方式来处理和存储数据。Redis 提供了五种常用的数据类型：String、List、Set、Hash 和 Sorted Set。除了这些数据类型之外，有时我们还需要在 Redis 中执行复杂的命令序列，这时可以使用 Lua 脚本来实现。在本篇博客中，我们将探讨如何在 Go 语言中使用 <code>go-redis/redismock</code> 来测试 Redis 常用的五种数据类型以及执行 Lua 脚本。</p><h3 id="1-简介">1. 简介</h3><p>首先，让我们了解一下 <code>go-redis/redismock</code> 是什么。它是一个用于 Mock Redis 数据库的库，可以模拟 Redis 客户端的行为，无需实际连接到真实的 Redis 数据库。这样，我们可以在单元测试中更快速和可控地测试与 Redis 交互的代码。</p><h3 id="2-安装和设置">2. 安装和设置</h3><p>在开始之前，请确保您已经安装了 Go 环境，并配置好了 Go 的工作空间。</p><p>首先，我们需要安装 <code>go-redis/redismock</code> 和 <code>go-redis/redis/v8</code>：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">go get github.com/go-redis/redismock/v8go get github.com/go-redis/redis/v8<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="3-示例：测试-Redis-String、List、Set、Hash-和-Sorted-Set">3. 示例：测试 Redis String、List、Set、Hash 和 Sorted Set</h3><h4 id="String-类型">String 类型</h4><p>首先，我们将测试 Redis 中的 String 类型。我们创建一个 <code>string_ops.go</code> 文件，并实现相应的 Go 代码：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// string_ops.go</span><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"context"</span><span class="token string">"fmt"</span><span class="token string">"github.com/go-redis/redis/v8"</span><span class="token punctuation">)</span><span class="token comment">// SetString 设置 Redis 中的 String 类型数据</span><span class="token keyword">func</span> <span class="token function">SetString</span><span class="token punctuation">(</span>client <span class="token operator">*</span>redis<span class="token punctuation">.</span>Client<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> client<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">Background</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Err</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">// GetString 获取 Redis 中的 String 类型数据</span><span class="token keyword">func</span> <span class="token function">GetString</span><span class="token punctuation">(</span>client <span class="token operator">*</span>redis<span class="token punctuation">.</span>Client<span class="token punctuation">,</span> key <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> client<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">Background</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Result</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在这个示例中，我们编写了 <code>SetString</code> 和 <code>GetString</code> 函数，用于设置和获取 Redis 中的 String 类型数据。</p><p>接下来，我们编写单元测试来测试这两个函数。创建一个 <code>string_ops_test.go</code> 文件：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// string_ops_test.go</span><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"testing"</span><span class="token string">"github.com/go-redis/redismock/v8"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">TestSetAndGet_String</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>client<span class="token punctuation">,</span> mock <span class="token operator">:=</span> redismock<span class="token punctuation">.</span><span class="token function">NewClientMock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>key <span class="token operator">:=</span> <span class="token string">"mykey"</span>value <span class="token operator">:=</span> <span class="token string">"myvalue"</span>mock<span class="token punctuation">.</span><span class="token function">ExpectSet</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">SetVal</span><span class="token punctuation">(</span><span class="token string">"OK"</span><span class="token punctuation">)</span>mock<span class="token punctuation">.</span><span class="token function">ExpectGet</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">SetVal</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>err <span class="token operator">:=</span> <span class="token function">SetString</span><span class="token punctuation">(</span>client<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>t<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"SetString failed: %s"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">&#125;</span>result<span class="token punctuation">,</span> err <span class="token operator">:=</span> <span class="token function">GetString</span><span class="token punctuation">(</span>client<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>t<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"GetString failed: %s"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> result <span class="token operator">!=</span> value <span class="token punctuation">&#123;</span>t<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"unexpected value, got: %s, want: %s"</span><span class="token punctuation">,</span> result<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> err <span class="token operator">:=</span> mock<span class="token punctuation">.</span><span class="token function">ExpectationsWereMet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>t<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"unfulfilled expectations: %s"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="List-类型">List 类型</h4><p>接下来，我们测试 Redis 中的 List 类型。我们创建一个 <code>list_ops.go</code> 文件，并实现相应的 Go 代码：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// list_ops.go</span><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"context"</span><span class="token string">"fmt"</span><span class="token string">"github.com/go-redis/redis/v8"</span><span class="token punctuation">)</span><span class="token comment">// ListPush 在 Redis 中的 List 类型数据上进行 push 操作</span><span class="token keyword">func</span> <span class="token function">ListPush</span><span class="token punctuation">(</span>client <span class="token operator">*</span>redis<span class="token punctuation">.</span>Client<span class="token punctuation">,</span> key <span class="token builtin">string</span><span class="token punctuation">,</span> values <span class="token operator">...</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">int64</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> client<span class="token punctuation">.</span><span class="token function">LPush</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">Background</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> key<span class="token punctuation">,</span> values<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Result</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">// ListPop 在 Redis 中的 List 类型数据上进行 pop 操作</span><span class="token keyword">func</span> <span class="token function">ListPop</span><span class="token punctuation">(</span>client <span class="token operator">*</span>redis<span class="token punctuation">.</span>Client<span class="token punctuation">,</span> key <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> client<span class="token punctuation">.</span><span class="token function">LPop</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">Background</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Result</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在这个示例中，我们编写了 <code>ListPush</code> 和 <code>ListPop</code> 函数，用于在 Redis 中添加和弹出 List 类型数据。</p><p>接下来，我们编写单元测试来测试这两个函数。创建一个 <code>list_ops_test.go</code> 文件：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// list_ops_test.go</span><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"testing"</span><span class="token string">"github.com/go-redis/redismock/v8"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">TestListPushAndPop</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>client<span class="token punctuation">,</span> mock <span class="token operator">:=</span> redismock<span class="token punctuation">.</span><span class="token function">NewClientMock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>key <span class="token operator">:=</span> <span class="token string">"mylist"</span><span class="token comment">// 测试 ListPush</span>values <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">&#123;</span><span class="token string">"item1"</span><span class="token punctuation">,</span> <span class="token string">"item2"</span><span class="token punctuation">,</span> <span class="token string">"item3"</span><span class="token punctuation">&#125;</span>mock<span class="token punctuation">.</span><span class="token function">ExpectLPush</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> values<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">SetVal</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token comment">// 测试 ListPop</span>mock<span class="token punctuation">.</span><span class="token function">ExpectLPop</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">SetVal</span><span class="token punctuation">(</span><span class="token string">"item3"</span><span class="token punctuation">)</span>count<span class="token punctuation">,</span> err <span class="token operator">:=</span> <span class="token function">ListPush</span><span class="token punctuation">(</span>client<span class="token punctuation">,</span> key<span class="token punctuation">,</span> values<span class="token operator">...</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>t<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"ListPush failed: %s"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> count <span class="token operator">!=</span> <span class="token number">3</span> <span class="token punctuation">&#123;</span>t<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"unexpected count, got: %d, want: %d"</span><span class="token punctuation">,</span> count<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span>item<span class="token punctuation">,</span> err <span class="token operator">:=</span> <span class="token function">ListPop</span><span class="token punctuation">(</span>client<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>t<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"ListPop failed: %s"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> item <span class="token operator">!=</span> <span class="token string">"item3"</span> <span class="token punctuation">&#123;</span>t<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"unexpected item, got: %s, want: %s"</span><span class="token punctuation">,</span> item<span class="token punctuation">,</span> <span class="token string">"item3"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> err <span class="token operator">:=</span> mock<span class="token punctuation">.</span><span class="token function">ExpectationsWereMet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>t<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"unfulfilled expectations: %s"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Set-类型">Set 类型</h4><p>接下来，我们测试 Redis 中的 Set 类型。我们创建一个 <code>set_ops.go</code> 文件，并实现相应的 Go 代码：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// set_ops.go</span><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"context"</span><span class="token string">"fmt"</span><span class="token string">"github.com/go-redis/redis/v8"</span><span class="token punctuation">)</span><span class="token comment">// SetAdd 在 Redis 中的 Set 类型数据上进行 add 操作</span><span class="token keyword">func</span> <span class="token function">SetAdd</span><span class="token punctuation">(</span>client <span class="token operator">*</span>redis<span class="token punctuation">.</span>Client<span class="token punctuation">,</span> key <span class="token builtin">string</span><span class="token punctuation">,</span> members <span class="token operator">...</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">int64</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> client<span class="token punctuation">.</span><span class="token function">SAdd</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">Background</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> key<span class="token punctuation">,</span> members<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Result</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">// SetMembers 获取 Redis 中的 Set 类型数据的所有成员</span><span class="token keyword">func</span> <span class="token function">SetMembers</span><span class="token punctuation">(</span>client <span class="token operator">*</span>redis<span class="token punctuation">.</span>Client<span class="token punctuation">,</span> key <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> client<span class="token punctuation">.</span><span class="token function">SMembers</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">Background</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Result</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在这个示例中，我们编写了 <code>SetAdd</code> 和 <code>SetMembers</code> 函数，用于在 Redis 中添加和获取 Set 类型数据。</p><p>接下来，我们编写单元测试来测试这两个函数。创建一个 <code>set_ops_test.go</code> 文件：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// set_ops_test.go</span><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"reflect"</span><span class="token string">"testing"</span><span class="token string">"github.com/go-redis/redismock/v8"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">TestSetAddAndMembers</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>client<span class="token punctuation">,</span> mock <span class="token operator">:=</span> redismock<span class="token punctuation">.</span><span class="token function">NewClientMock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>key <span class="token operator">:=</span> <span class="token string">"myset"</span><span class="token comment">// 测试 SetAdd</span>members <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">&#123;</span><span class="token string">"member1"</span><span class="token punctuation">,</span> <span class="token string">"member2"</span><span class="token punctuation">,</span> <span class="token string">"member3"</span><span class="token punctuation">&#125;</span>mock<span class="token punctuation">.</span><span class="token function">ExpectSAdd</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> members<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">SetVal</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token comment">// 测试 SetMembers</span>mock<span class="token punctuation">.</span><span class="token function">ExpectSMembers</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">SetVal</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">&#123;</span><span class="token string">"member1"</span><span class="token punctuation">,</span> <span class="token string">"member2"</span><span class="token punctuation">,</span> <span class="token string">"member3"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>count<span class="token punctuation">,</span> err <span class="token operator">:=</span> <span class="token function">SetAdd</span><span class="token punctuation">(</span>client<span class="token punctuation">,</span> key<span class="token punctuation">,</span> members<span class="token operator">...</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>t<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"SetAdd failed: %s"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> count <span class="token operator">!=</span> <span class="token number">3</span> <span class="token punctuation">&#123;</span>t<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"unexpected count, got: %d, want: %d"</span><span class="token punctuation">,</span> count<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span>result<span class="token punctuation">,</span> err <span class="token operator">:=</span> <span class="token function">SetMembers</span><span class="token punctuation">(</span>client<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>t<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"SetMembers failed: %s"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token operator">!</span>reflect<span class="token punctuation">.</span><span class="token function">DeepEqual</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> members<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>t<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"unexpected members, got: %v, want: %v"</span><span class="token punctuation">,</span> result<span class="token punctuation">,</span> members<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> err <span class="token operator">:=</span> mock<span class="token punctuation">.</span><span class="token function">ExpectationsWereMet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>t<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"unfulfilled expectations: %s"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Hash-类型">Hash 类型</h4><p>接下来，我们测试 Redis 中的 Hash 类型。我们创建一个 <code>hash_ops.go</code> 文件，并实现相应的 Go 代码：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// hash_ops.go</span><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"context"</span><span class="token string">"fmt"</span><span class="token string">"github.com/go-redis/redis/v8"</span><span class="token punctuation">)</span><span class="token comment">// HashSet 在 Redis 中的 Hash 类型数据上进行设置操作</span><span class="token keyword">func</span> <span class="token function">HashSet</span><span class="token punctuation">(</span>client <span class="token operator">*</span>redis<span class="token punctuation">.</span>Client<span class="token punctuation">,</span> key <span class="token builtin">string</span><span class="token punctuation">,</span> fieldValues <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> client<span class="token punctuation">.</span><span class="token function">HMSet</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">Background</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> key<span class="token punctuation">,</span> fieldValues<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Err</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">// HashGet 获取 Redis 中的 Hash 类型数据的指定字段值</span><span class="token keyword">func</span> <span class="token function">HashGet</span><span class="token punctuation">(</span>client <span class="token operator">*</span>redis<span class="token punctuation">.</span>Client<span class="token punctuation">,</span> key<span class="token punctuation">,</span> field <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> client<span class="token punctuation">.</span><span class="token function">HGet</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">Background</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> key<span class="token punctuation">,</span> field<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Result</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在这个示例中，我们编写了 <code>HashSet</code> 和 <code>HashGet</code> 函数，用于在 Redis 中设置和获取 Hash 类型数据。</p><p>接下来，我们编写单元测试来测试这两个函数。创建一个 <code>hash_ops_test.go</code> 文件：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// hash_ops_test.go</span><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"testing"</span><span class="token string">"github.com/go-redis/redismock/v8"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">TestHashSetAndGet</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>client<span class="token punctuation">,</span> mock <span class="token operator">:=</span> redismock<span class="token punctuation">.</span><span class="token function">NewClientMock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>key <span class="token operator">:=</span> <span class="token string">"myhash"</span><span class="token comment">// 测试 HashSet</span>fieldValues <span class="token operator">:=</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span><span class="token string">"field1"</span><span class="token punctuation">:</span> <span class="token string">"value1"</span><span class="token punctuation">,</span><span class="token string">"field2"</span><span class="token punctuation">:</span> <span class="token string">"value2"</span><span class="token punctuation">,</span><span class="token string">"field3"</span><span class="token punctuation">:</span> <span class="token string">"value3"</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span>mock<span class="token punctuation">.</span><span class="token function">ExpectHMSet</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> fieldValues<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">SetVal</span><span class="token punctuation">(</span><span class="token string">"OK"</span><span class="token punctuation">)</span><span class="token comment">// 测试 HashGet</span>field <span class="token operator">:=</span> <span class="token string">"field2"</span>mock<span class="token punctuation">.</span><span class="token function">ExpectHGet</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> field<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">SetVal</span><span class="token punctuation">(</span><span class="token string">"value2"</span><span class="token punctuation">)</span>err <span class="token operator">:=</span> <span class="token function">HashSet</span><span class="token punctuation">(</span>client<span class="token punctuation">,</span> key<span class="token punctuation">,</span> fieldValues<span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>t<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"HashSet failed: %s"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">&#125;</span>result<span class="token punctuation">,</span> err <span class="token operator">:=</span> <span class="token function">HashGet</span><span class="token punctuation">(</span>client<span class="token punctuation">,</span> key<span class="token punctuation">,</span> field<span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>t<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"HashGet failed: %s"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> result <span class="token operator">!=</span> <span class="token string">"value2"</span> <span class="token punctuation">&#123;</span>t<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"unexpected value, got: %s, want: %s"</span><span class="token punctuation">,</span> result<span class="token punctuation">,</span> <span class="token string">"value2"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> err <span class="token operator">:=</span> mock<span class="token punctuation">.</span><span class="token function">ExpectationsWereMet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>t<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"unfulfilled expectations: %s"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Sorted-Set-类型">Sorted Set 类型</h4><p>最后，我们测试 Redis 中的 Sorted Set 类型。我们创建一个 <code>sorted_set_ops.go</code> 文件，并实现相应的 Go 代码：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// sorted_set_ops.go</span><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"context"</span><span class="token string">"fmt"</span><span class="token string">"github.com/go-redis/redis/v8"</span><span class="token punctuation">)</span><span class="token comment">// SortedSetAdd 在 Redis 中的 Sorted Set 类型数据上进行 add 操作</span><span class="token keyword">func</span> <span class="token function">SortedSetAdd</span><span class="token punctuation">(</span>client <span class="token operator">*</span>redis<span class="token punctuation">.</span>Client<span class="token punctuation">,</span> key <span class="token builtin">string</span><span class="token punctuation">,</span> members <span class="token operator">...</span><span class="token operator">*</span>redis<span class="token punctuation">.</span>Z<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">int64</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> client<span class="token punctuation">.</span><span class="token function">ZAdd</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">Background</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> key<span class="token punctuation">,</span> members<span class="token operator">...</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Result</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">// SortedSetRange 获取 Redis 中的 Sorted Set 类型数据指定范围的成员</span><span class="token keyword">func</span> <span class="token function">SortedSetRange</span><span class="token punctuation">(</span>client <span class="token operator">*</span>redis<span class="token punctuation">.</span>Client<span class="token punctuation">,</span> key <span class="token builtin">string</span><span class="token punctuation">,</span> start<span class="token punctuation">,</span> stop <span class="token builtin">int64</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> client<span class="token punctuation">.</span><span class="token function">ZRange</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">Background</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> key<span class="token punctuation">,</span> start<span class="token punctuation">,</span> stop<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Result</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在这个示例中，我们编写了 <code>SortedSetAdd</code> 和 <code>SortedSetRange</code> 函数，用于在 Redis 中添加和获取 Sorted Set 类型数据。</p><p>接下来，我们编写单元测试来测试这两个函数。创建一个 <code>sorted_set_ops_test.go</code> 文件：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// sorted_set_ops_test.go</span><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"reflect"</span><span class="token string">"testing"</span><span class="token string">"github.com/go-redis/redismock/v8"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">TestSortedSetAddAndRange</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>client<span class="token punctuation">,</span> mock <span class="token operator">:=</span> redismock<span class="token punctuation">.</span><span class="token function">NewClientMock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>key <span class="token operator">:=</span> <span class="token string">"mysortedset"</span><span class="token comment">// 测试 SortedSetAdd</span>members <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>redis<span class="token punctuation">.</span>Z<span class="token punctuation">&#123;</span><span class="token operator">&amp;</span>redis<span class="token punctuation">.</span>Z<span class="token punctuation">&#123;</span>Score<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> Member<span class="token punctuation">:</span> <span class="token string">"member1"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>redis<span class="token punctuation">.</span>Z<span class="token punctuation">&#123;</span>Score<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> Member<span class="token punctuation">:</span> <span class="token string">"member2"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>redis<span class="token punctuation">.</span>Z<span class="token punctuation">&#123;</span>Score<span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span> Member<span class="token punctuation">:</span> <span class="token string">"member3"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span>mock<span class="token punctuation">.</span><span class="token function">ExpectZAdd</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> members<span class="token operator">...</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">SetVal</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token comment">// 测试 SortedSetRange</span>mock<span class="token punctuation">.</span><span class="token function">ExpectZRange</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">SetVal</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">&#123;</span><span class="token string">"member1"</span><span class="token punctuation">,</span> <span class="token string">"member2"</span><span class="token punctuation">,</span> <span class="token string">"member3"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>count<span class="token punctuation">,</span> err <span class="token operator">:=</span> <span class="token function">SortedSetAdd</span><span class="token punctuation">(</span>client<span class="token punctuation">,</span> key<span class="token punctuation">,</span> members<span class="token operator">...</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>t<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"SortedSetAdd failed: %s"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> count <span class="token operator">!=</span> <span class="token number">3</span> <span class="token punctuation">&#123;</span>t<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"unexpected count, got: %d, want: %d"</span><span class="token punctuation">,</span> count<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span>result<span class="token punctuation">,</span> err <span class="token operator">:=</span> <span class="token function">SortedSetRange</span><span class="token punctuation">(</span>client<span class="token punctuation">,</span> key<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>t<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"SortedSetRange failed: %s"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">&#125;</span>expected <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">&#123;</span><span class="token string">"member1"</span><span class="token punctuation">,</span> <span class="token string">"member2"</span><span class="token punctuation">,</span> <span class="token string">"member3"</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token operator">!</span>reflect<span class="token punctuation">.</span><span class="token function">DeepEqual</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> expected<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>t<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"unexpected members, got: %v, want: %v"</span><span class="token punctuation">,</span> result<span class="token punctuation">,</span> expected<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> err <span class="token operator">:=</span> mock<span class="token punctuation">.</span><span class="token function">ExpectationsWereMet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>t<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"unfulfilled expectations: %s"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-执行-Lua-脚本">4. 执行 Lua 脚本</h3><p>现在，让我们测试在 Redis 中执行 Lua 脚本。我们将使用 <code>counter.lua</code> 脚本，并在其中实现计数器应用。</p><p>首先，创建一个名为 <code>counter.lua</code> 的 Lua 脚本：</p><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua"><span class="token comment">-- counter.lua</span><span class="token keyword">local</span> key <span class="token operator">=</span> KEYS<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token keyword">local</span> increment <span class="token operator">=</span> <span class="token function">tonumber</span><span class="token punctuation">(</span>ARGV<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">if</span> increment <span class="token operator">></span> <span class="token number">0</span> <span class="token keyword">then</span>    <span class="token keyword">return</span> redis<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">'INCRBY'</span><span class="token punctuation">,</span> key<span class="token punctuation">,</span> increment<span class="token punctuation">)</span><span class="token keyword">else</span>    <span class="token keyword">return</span> redis<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">'GET'</span><span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在该脚本中，我们接收一个键和一个增量值作为参数。如果增量值大于 0，则在 Redis 中使用 <code>INCRBY</code> 命令增加计数；否则，返回该键的当前值。</p><p>接下来，我们创建一个名为 <code>counter.go</code> 的文件，并实现相应的 Go 代码：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// counter.go</span><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"context"</span><span class="token string">"github.com/go-redis/redis/v8"</span><span class="token punctuation">)</span><span class="token comment">//  Lua 脚本用于增加计数或获取当前值</span><span class="token keyword">const</span> counterLuaScript <span class="token operator">=</span> <span class="token string">`    local key = KEYS[1]    local increment = tonumber(ARGV[1])        if increment > 0 then        return redis.call('INCRBY', key, increment)    else        return redis.call('GET', key)    end`</span><span class="token comment">// IncreaseCounter 使用 Redis EVAL 命令执行 Lua 脚本，增加计数或获取当前值</span><span class="token keyword">func</span> <span class="token function">IncreaseCounter</span><span class="token punctuation">(</span>client <span class="token operator">*</span>redis<span class="token punctuation">.</span>Client<span class="token punctuation">,</span> key <span class="token builtin">string</span><span class="token punctuation">,</span> increment <span class="token builtin">int64</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">int64</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// 调用 Redis EVAL 命令执行 Lua 脚本</span>result<span class="token punctuation">,</span> err <span class="token operator">:=</span> client<span class="token punctuation">.</span><span class="token function">Eval</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">Background</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> counterLuaScript<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">&#123;</span>key<span class="token punctuation">&#125;</span><span class="token punctuation">,</span> increment<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Result</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">,</span> err<span class="token punctuation">&#125;</span><span class="token comment">// 转换结果为整数并返回</span><span class="token keyword">if</span> intValue<span class="token punctuation">,</span> ok <span class="token operator">:=</span> result<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token builtin">int64</span><span class="token punctuation">)</span><span class="token punctuation">;</span> ok <span class="token punctuation">&#123;</span><span class="token keyword">return</span> intValue<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">,</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"unexpected result type"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在这个示例中，我们编写了 <code>IncreaseCounter</code> 函数，它使用 Redis 客户端执行我们之前创建的 Lua 脚本，并返回结果。</p><p>接下来，我们编写单元测试来测试 <code>IncreaseCounter</code> 函数。创建一个 <code>counter_test.go</code> 文件：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// counter_test.go</span><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"testing"</span><span class="token string">"github.com/go-redis/redismock/v8"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">TestIncreaseCounter_PositiveIncrement</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>client<span class="token punctuation">,</span> mock <span class="token operator">:=</span> redismock<span class="token punctuation">.</span><span class="token function">NewClientMock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>key <span class="token operator">:=</span> <span class="token string">"mykey"</span>increment <span class="token operator">:=</span> <span class="token function">int64</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>mock<span class="token punctuation">.</span><span class="token function">ExpectEval</span><span class="token punctuation">(</span>counterLuaScript<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">&#123;</span>key<span class="token punctuation">&#125;</span><span class="token punctuation">,</span> increment<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">SetVal</span><span class="token punctuation">(</span>increment<span class="token punctuation">)</span>result<span class="token punctuation">,</span> err <span class="token operator">:=</span> <span class="token function">IncreaseCounter</span><span class="token punctuation">(</span>client<span class="token punctuation">,</span> key<span class="token punctuation">,</span> increment<span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>t<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"IncreaseCounter failed: %s"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> result <span class="token operator">!=</span> increment <span class="token punctuation">&#123;</span>t<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"unexpected result, got: %d, want: %d"</span><span class="token punctuation">,</span> result<span class="token punctuation">,</span> increment<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> err <span class="token operator">:=</span> mock<span class="token punctuation">.</span><span class="token function">ExpectationsWereMet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>t<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"unfulfilled expectations: %s"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">TestIncreaseCounter_NegativeIncrement</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>client<span class="token punctuation">,</span> mock <span class="token operator">:=</span> redismock<span class="token punctuation">.</span><span class="token function">NewClientMock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>key <span class="token operator">:=</span> <span class="token string">"mykey"</span>increment <span class="token operator">:=</span> <span class="token function">int64</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">)</span>currentValue <span class="token operator">:=</span> <span class="token function">int64</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>mock<span class="token punctuation">.</span><span class="token function">ExpectEval</span><span class="token punctuation">(</span>counterLuaScript<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">&#123;</span>key<span class="token punctuation">&#125;</span><span class="token punctuation">,</span> increment<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">SetVal</span><span class="token punctuation">(</span>currentValue<span class="token punctuation">)</span>result<span class="token punctuation">,</span> err <span class="token operator">:=</span> <span class="token function">IncreaseCounter</span><span class="token punctuation">(</span>client<span class="token punctuation">,</span> key<span class="token punctuation">,</span> increment<span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>t<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"IncreaseCounter failed: %s"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> result <span class="token operator">!=</span> currentValue <span class="token punctuation">&#123;</span>t<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"unexpected result, got: %d, want: %d"</span><span class="token punctuation">,</span> result<span class="token punctuation">,</span> currentValue<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> err <span class="token operator">:=</span> mock<span class="token punctuation">.</span><span class="token function">ExpectationsWereMet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>t<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"unfulfilled expectations: %s"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-结论">5. 结论</h3><p>在本文中，我们学习了如何使用 <code>go-redis/redismock</code> 在 Go 语言中测试 Redis 常用的五种数据类型以及执行 Lua 脚本。我们测试了 Redis 中的 String、List、Set、Hash 和 Sorted Set 类型，并实现了一个简单的计数器应用来测试执行 Lua 脚本的功能。通过单元测试，我们可以确保这些 Redis 操作的正确性和稳定性。使用 <code>go-redis/redismock</code>，我们可以在不连接到真实 Redis 数据库的情况下快速和可控地测试与 Redis 交互的代码。这为我们的应用程序开发和维护带来了便利和信心。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在开发应用程序时，使用 Redis 是一种常见的方式来处理和存储数据。Redis 提供了五种常用的数据类型：String、List、Set、Hash 和 Sorted Set。除了这些数据类型之外，有时我们还需要在 Redis 中执行复杂的命令序列，这时可以使用 Lua 脚</summary>
      
    
    
    
    <category term="go" scheme="https://blog.mailjob.net/categories/go/"/>
    
    
    <category term="go" scheme="https://blog.mailjob.net/tags/go/"/>
    
    <category term="redis" scheme="https://blog.mailjob.net/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>Laravel项目Exception优化最佳实践</title>
    <link href="https://blog.mailjob.net/posts/194135748.html"/>
    <id>https://blog.mailjob.net/posts/194135748.html</id>
    <published>2023-07-05T05:16:04.000Z</published>
    <updated>2025-10-17T05:39:50.049Z</updated>
    
    <content type="html"><![CDATA[<h2 id="引言">引言</h2><p>全局异常处理是一种关键的开发实践，可以帮助我们更好地处理应用程序中的异常情况。本文将介绍如何在 Laravel 中实现全局异常处理，并探讨一些最佳实践，包括日志记录、异常监控和报警以及单元测试。</p><p>在开发 Web 应用程序时，异常处理是至关重要的。当应用程序发生异常时，我们希望能够及时捕获和处理异常，并提供有用的错误信息给用户或开发团队。在 Laravel 框架中，我们可以通过全局异常处理来统一处理应用程序中的异常情况。本文将介绍如何在 Laravel 中实现全局异常处理，并分享一些最佳实践。</p><h2 id="实现步骤">实现步骤</h2><h3 id="1-创建自定义异常处理器类：">1. 创建自定义异常处理器类：</h3><p>创建一个自定义的异常处理器类，用于处理应用程序中的异常。可以在 <code>app/Exceptions</code> 目录下创建一个新的异常处理器类，例如 <code>CustomExceptionHandler.php</code>。</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">namespace</span> <span class="token package">App<span class="token punctuation">\</span>Exceptions</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">Exception</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\</span>Foundation<span class="token punctuation">\</span>Exceptions<span class="token punctuation">\</span>Handler</span> <span class="token keyword">as</span> ExceptionHandler<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">CustomExceptionHandler</span> <span class="token keyword">extends</span> <span class="token class-name">ExceptionHandler</span><span class="token punctuation">&#123;</span>  <span class="token comment">// 自定义数据</span>  <span class="token keyword">protected</span> <span class="token variable">$data</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token variable">$message</span><span class="token punctuation">,</span> <span class="token variable">$code</span><span class="token punctuation">,</span> <span class="token variable">$data</span> <span class="token operator">=</span> <span class="token constant">null</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword static-context">parent</span><span class="token operator">::</span><span class="token function">__construct</span><span class="token punctuation">(</span><span class="token variable">$message</span><span class="token punctuation">,</span> <span class="token variable">$code</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">data</span> <span class="token operator">=</span> <span class="token variable">$data</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>      <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">render</span><span class="token punctuation">(</span><span class="token variable">$request</span><span class="token punctuation">,</span> <span class="token class-name type-declaration">Exception</span> <span class="token variable">$exception</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token comment">// 自定义异常处理逻辑</span>        <span class="token comment">// ...</span>      <span class="token comment">// 在这里可以将自定义数据记录到日志或其他地方</span>        <span class="token comment">// 可以使用 $this->data 访问自定义数据</span>        <span class="token keyword">return</span> <span class="token keyword static-context">parent</span><span class="token operator">::</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token variable">$request</span><span class="token punctuation">,</span> <span class="token variable">$exception</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-注册自定义异常处理器：">2. 注册自定义异常处理器：</h3><p>打开 <code>app/Exceptions/Handler.php</code> 文件，并将 <code>report</code> 和 <code>render</code> 方法中的异常处理逻辑迁移到自定义异常处理器中。</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">namespace</span> <span class="token package">App<span class="token punctuation">\</span>Exceptions</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">Exception</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\</span>Foundation<span class="token punctuation">\</span>Exceptions<span class="token punctuation">\</span>Handler</span> <span class="token keyword">as</span> ExceptionHandler<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">Handler</span> <span class="token keyword">extends</span> <span class="token class-name">ExceptionHandler</span><span class="token punctuation">&#123;</span>    <span class="token keyword">protected</span> <span class="token variable">$dontReport</span> <span class="token operator">=</span> <span class="token punctuation">[</span>        <span class="token comment">// ...</span>    <span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">protected</span> <span class="token variable">$dontFlash</span> <span class="token operator">=</span> <span class="token punctuation">[</span>        <span class="token comment">// ...</span>    <span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">register</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token function">reportable</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token class-name type-declaration">Exception</span> <span class="token variable">$exception</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">render</span><span class="token punctuation">(</span><span class="token variable">$request</span><span class="token punctuation">,</span> <span class="token class-name type-declaration">Exception</span> <span class="token variable">$exception</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token function">shouldReport</span><span class="token punctuation">(</span><span class="token variable">$exception</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token function">app</span><span class="token punctuation">(</span><span class="token class-name static-context">CustomExceptionHandler</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">render</span><span class="token punctuation">(</span><span class="token variable">$request</span><span class="token punctuation">,</span> <span class="token variable">$exception</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token keyword static-context">parent</span><span class="token operator">::</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token variable">$request</span><span class="token punctuation">,</span> <span class="token variable">$exception</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-创建异常处理器中间件：">3. 创建异常处理器中间件：</h3><p>创建一个异常处理器中间件，用于在全局范围内处理异常。可以在 <code>app/Http/Middleware</code> 目录下创建一个新的中间件类，例如 <code>HandleExceptions.php</code>。</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">namespace</span> <span class="token package">App<span class="token punctuation">\</span>Http<span class="token punctuation">\</span>Middleware</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">Closure</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\</span>Contracts<span class="token punctuation">\</span>Debug<span class="token punctuation">\</span>ExceptionHandler</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">HandleExceptions</span><span class="token punctuation">&#123;</span>    <span class="token keyword">protected</span> <span class="token variable">$handler</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token class-name type-declaration">ExceptionHandler</span> <span class="token variable">$handler</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">handler</span> <span class="token operator">=</span> <span class="token variable">$handler</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">handle</span><span class="token punctuation">(</span><span class="token variable">$request</span><span class="token punctuation">,</span> <span class="token class-name type-declaration">Closure</span> <span class="token variable">$next</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">handler</span><span class="token operator">-></span><span class="token function">render</span><span class="token punctuation">(</span><span class="token variable">$request</span><span class="token punctuation">,</span> <span class="token variable">$next</span><span class="token punctuation">(</span><span class="token variable">$request</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-注册异常处理器中间件：">4. 注册异常处理器中间件：</h3><p>打开 <code>app/Http/Kernel.php</code> 文件，并将异常处理器中间件添加到 <code>$middleware</code> 数组中。</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">namespace</span> <span class="token package">App<span class="token punctuation">\</span>Http</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\</span>Foundation<span class="token punctuation">\</span>Http<span class="token punctuation">\</span>Kernel</span> <span class="token keyword">as</span> HttpKernel<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">Kernel</span> <span class="token keyword">extends</span> <span class="token class-name">HttpKernel</span><span class="token punctuation">&#123;</span>    <span class="token keyword">protected</span> <span class="token variable">$middleware</span> <span class="token operator">=</span> <span class="token punctuation">[</span>        <span class="token comment">// ...</span>        <span class="token class-name class-name-fully-qualified static-context"><span class="token punctuation">\</span>App<span class="token punctuation">\</span>Http<span class="token punctuation">\</span>Middleware<span class="token punctuation">\</span>HandleExceptions</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">// ...</span><span class="token punctuation">&#125;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-日志记录：">5. 日志记录：</h3><p>Laravel 默认已经配置了日志记录。确保在 <code>config/logging.php</code> 文件中的 <code>channels</code> 配置中有一个适当的日志通道，以记录异常信息。</p><p>在 <code>config/logging.php</code> 文件中，可以添加一个新的日志通道，例如 <code>exceptions</code>：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token string single-quoted-string">'channels'</span> <span class="token operator">=></span> <span class="token punctuation">[</span>    <span class="token comment">// ...</span>    <span class="token string single-quoted-string">'exceptions'</span> <span class="token operator">=></span> <span class="token punctuation">[</span>        <span class="token string single-quoted-string">'driver'</span> <span class="token operator">=></span> <span class="token string single-quoted-string">'daily'</span><span class="token punctuation">,</span>        <span class="token string single-quoted-string">'path'</span> <span class="token operator">=></span> <span class="token function">storage_path</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'logs/exceptions.log'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token string single-quoted-string">'level'</span> <span class="token operator">=></span> <span class="token string single-quoted-string">'error'</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在自定义异常处理器类的 <code>render</code> 方法中，可以使用日志记录器来记录异常信息：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\</span>Support<span class="token punctuation">\</span>Facades<span class="token punctuation">\</span>Log</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">render</span><span class="token punctuation">(</span><span class="token variable">$request</span><span class="token punctuation">,</span> <span class="token class-name type-declaration">Exception</span> <span class="token variable">$exception</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name static-context">Log</span><span class="token operator">::</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'exceptions'</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">error</span><span class="token punctuation">(</span><span class="token variable">$exception</span><span class="token operator">-></span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword static-context">parent</span><span class="token operator">::</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token variable">$request</span><span class="token punctuation">,</span> <span class="token variable">$exception</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样，当发生异常时，异常信息将被记录到 <code>storage/logs/exceptions.log</code> 文件中。</p><h3 id="6-自定义异常响应：">6. 自定义异常响应：</h3><p>可以根据需要，为不同类型的异常定义自定义的响应格式。在自定义异常处理器类的 <code>render</code> 方法中，根据异常的类型返回不同的错误响应。</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">render</span><span class="token punctuation">(</span><span class="token variable">$request</span><span class="token punctuation">,</span> <span class="token class-name type-declaration">Exception</span> <span class="token variable">$exception</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$exception</span> <span class="token keyword">instanceof</span> <span class="token class-name">CustomException</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 获取到自定义类的 data 数据</span>      <span class="token comment">// $data = $exception->data;</span>              <span class="token keyword">return</span> <span class="token function">response</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">[</span>            <span class="token string single-quoted-string">'error'</span> <span class="token operator">=></span> <span class="token string single-quoted-string">'Custom Error'</span><span class="token punctuation">,</span>            <span class="token string single-quoted-string">'message'</span> <span class="token operator">=></span> <span class="token variable">$exception</span><span class="token operator">-></span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">400</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token keyword static-context">parent</span><span class="token operator">::</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token variable">$request</span><span class="token punctuation">,</span> <span class="token variable">$exception</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-异常分类和处理：">7. 异常分类和处理：</h3><p>根据异常的类型或来源，将异常进行分类，并为每个分类定义相应的处理逻辑。在自定义异常处理器类的 <code>render</code> 方法中，根据异常的类型执行特定的处理操作。</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">render</span><span class="token punctuation">(</span><span class="token variable">$request</span><span class="token punctuation">,</span> <span class="token class-name type-declaration">Exception</span> <span class="token variable">$exception</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$exception</span> <span class="token keyword">instanceof</span> <span class="token class-name">DatabaseException</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 处理数据库异常</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">elseif</span> <span class="token punctuation">(</span><span class="token variable">$exception</span> <span class="token keyword">instanceof</span> <span class="token class-name">ApiException</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 处理 API 异常</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 默认处理逻辑</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token keyword static-context">parent</span><span class="token operator">::</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token variable">$request</span><span class="token punctuation">,</span> <span class="token variable">$exception</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="8-友好的错误页面：">8. 友好的错误页面：</h3><p>可以创建一个自定义的错误页面，用于显示异常信息。在自定义异常处理器类的 <code>render</code> 方法中，根据异常的类型或状态码返回相应的错误视图。</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">render</span><span class="token punctuation">(</span><span class="token variable">$request</span><span class="token punctuation">,</span> <span class="token class-name type-declaration">Exception</span> <span class="token variable">$exception</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token function">isHttpException</span><span class="token punctuation">(</span><span class="token variable">$exception</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token function">response</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">view</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'errors.custom'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token variable">$exception</span><span class="token operator">-></span><span class="token function">getStatusCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token keyword static-context">parent</span><span class="token operator">::</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token variable">$request</span><span class="token punctuation">,</span> <span class="token variable">$exception</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="9-异常监控和报警：">9. 异常监控和报警：</h3><p>可以使用 Laravel 提供的监控和报警工具，如 Laravel Telescope、Sentry 等，来监控和报警异常情况。</p><p>以下是一个使用 Sentry 的示例：</p><p>首先，安装 Sentry SDK：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">composer</span> require sentry/sentry-laravel<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在 <code>.env</code> 文件中，配置 Sentry 的 DSN：</p><pre class="line-numbers language-none"><code class="language-none">SENTRY_DSN&#x3D;your-sentry-dsn<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在 <code>config/app.php</code> 文件中，将 <code>Sentry\Laravel\ServiceProvider::class</code> 添加到 <code>providers</code> 数组中。</p><p>然后，可以在自定义异常处理器类的 <code>render</code> 方法中使用 Sentry 来报告异常：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\</span>Support<span class="token punctuation">\</span>Facades<span class="token punctuation">\</span>Log</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">Sentry<span class="token punctuation">\</span>State<span class="token punctuation">\</span>HubInterface</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">render</span><span class="token punctuation">(</span><span class="token variable">$request</span><span class="token punctuation">,</span> <span class="token class-name type-declaration">Exception</span> <span class="token variable">$exception</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">app</span><span class="token punctuation">(</span><span class="token class-name static-context">HubInterface</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">captureException</span><span class="token punctuation">(</span><span class="token variable">$exception</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword static-context">parent</span><span class="token operator">::</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token variable">$request</span><span class="token punctuation">,</span> <span class="token variable">$exception</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样，当发生异常时，Sentry 将捕获并报告异常信息。</p><h3 id="10-单元测试：">10. 单元测试：</h3><p>编写针对异常处理逻辑的单元测试，确保异常处理器的正确性和稳定性。可以使用 Laravel 提供的测试工具，如 PHPUnit，编写测试用例来覆盖不同类型的异常情况。</p><p>可以使用 Laravel 提供的 PHPUnit 测试框架编写单元测试用例来验证异常处理器的正确性和稳定性。以下是一个简单的示例：</p><p>创建一个测试类，例如 <code>ExceptionHandlingTest.php</code>，继承自 <code>TestCase</code>：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">use</span> <span class="token package">Tests<span class="token punctuation">\</span>TestCase</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">ExceptionHandlingTest</span> <span class="token keyword">extends</span> <span class="token class-name">TestCase</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">testCustomException</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token variable">$response</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/custom-exception'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$response</span><span class="token operator">-></span><span class="token function">assertStatus</span><span class="token punctuation">(</span><span class="token number">400</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$response</span><span class="token operator">-></span><span class="token function">assertJson</span><span class="token punctuation">(</span><span class="token punctuation">[</span>            <span class="token string single-quoted-string">'error'</span> <span class="token operator">=></span> <span class="token string single-quoted-string">'Custom Error'</span><span class="token punctuation">,</span>        <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在测试类中，编写测试方法来模拟触发自定义异常，并验证异常处理器的响应。</p><p>在 <code>routes/web.php</code> 文件中，定义一个路由来触发自定义异常：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token class-name static-context">Route</span><span class="token operator">::</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/custom-exception'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">CustomException</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'Custom Error'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>运行单元测试：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">php artisan <span class="token builtin class-name">test</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>以上是关于日志记录、异常监控和报警以及单元测试的简单示例。根据实际需求和使用的工具，可以进一步扩展和定制这些功能。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;引言&quot;&gt;引言&lt;/h2&gt;
&lt;p&gt;全局异常处理是一种关键的开发实践，可以帮助我们更好地处理应用程序中的异常情况。本文将介绍如何在 Laravel 中实现全局异常处理，并探讨一些最佳实践，包括日志记录、异常监控和报警以及单元测试。&lt;/p&gt;
&lt;p&gt;在开发 Web 应用程序</summary>
      
    
    
    
    <category term="php" scheme="https://blog.mailjob.net/categories/php/"/>
    
    
    <category term="php" scheme="https://blog.mailjob.net/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>Laravel数据查询优化最佳实践</title>
    <link href="https://blog.mailjob.net/posts/1844886816.html"/>
    <id>https://blog.mailjob.net/posts/1844886816.html</id>
    <published>2023-07-05T03:47:01.000Z</published>
    <updated>2025-10-17T05:39:50.049Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介">简介</h2><p>在 Laravel 中，数据库查询是一个常见的任务。为了提高查询的性能和可维护性，我们可以通过自定义查询构造器类来优化数据库查询。本文将详细解析使用 自定义ORM查询构造器类 <code>CacheBuilder</code> 和 改造 Laravel 中的 <code>DB</code> 类，以使用自定义的查询构造器类 <code>CacheBuilder</code>  缓存技巧来优化数据库查询。并详细解释每个方法的意义和改造的原因。</p><h2 id="优化方案">优化方案</h2><h3 id="ORM-优化">ORM 优化</h3><p>查询构造器类是执行数据库查询的重要组件之一。通过自定义查询构造器类，我们可以扩展和优化查询功能，以满足特定的需求。在本文中，我们将详细解析自定义查询构造器类 <code>CacheBuilder</code> 中的每个方法，以及为什么要进行这样的改造。</p><p>当使用 Laravel 框架的 ORM 建造者模式时，你可以自定义一个新的查询方法 <code>firstCache()</code> 来实现从缓存中读取数据的功能。下面是一个详细的代码改造过程示例：</p><ol><li>创建一个新的查询构造器类 <code>CacheBuilder</code>，继承自 Laravel 的原生查询构造器类 <code>Illuminate\Database\Query\Builder</code>。在这个类中，你可以添加自定义的方法 <code>firstCache()</code>。</li></ol><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">namespace</span> <span class="token package">App<span class="token punctuation">\</span>Database<span class="token punctuation">\</span>Query</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\</span>Database<span class="token punctuation">\</span>Query<span class="token punctuation">\</span>Builder</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\</span>Support<span class="token punctuation">\</span>Facades<span class="token punctuation">\</span>Cache</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">CacheBuilder</span> <span class="token keyword">extends</span> <span class="token class-name">Builder</span><span class="token punctuation">&#123;</span>    <span class="token comment">/**     * Execute the query and get the first result from the cache or the database.     *     * @param  array|string  $columns     * @return mixed     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">firstCache</span><span class="token punctuation">(</span><span class="token variable">$columns</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string single-quoted-string">'*'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token comment">// 1. 尝试从缓存中获取数据</span>        <span class="token variable">$cacheKey</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token function">getCacheKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$cachedData</span> <span class="token operator">=</span> <span class="token class-name static-context">Cache</span><span class="token operator">::</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token variable">$cacheKey</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$cachedData</span> <span class="token operator">!==</span> <span class="token constant">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 如果缓存中存在数据，则直接返回</span>            <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token function">hydrateResults</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">model</span><span class="token operator">-></span><span class="token function">newCollection</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token variable">$cachedData</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token variable">$columns</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">first</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 2. 从数据库中获取数据</span>        <span class="token variable">$result</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token function">first</span><span class="token punctuation">(</span><span class="token variable">$columns</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$result</span> <span class="token operator">!==</span> <span class="token constant">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 如果数据库中存在数据，则将其缓存起来</span>            <span class="token class-name static-context">Cache</span><span class="token operator">::</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token variable">$cacheKey</span><span class="token punctuation">,</span> <span class="token variable">$result</span><span class="token operator">-></span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token function">getCacheExpiration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token variable">$result</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * Get the cache key for the query.     *     * @return string     */</span>    <span class="token keyword">protected</span> <span class="token keyword">function</span> <span class="token function-definition function">getCacheKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token comment">// 这里可以根据你的需求生成一个唯一的缓存键</span>        <span class="token keyword">return</span> <span class="token string single-quoted-string">'cache_key_'</span> <span class="token operator">.</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token function">toSql</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">.</span> <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token function">getBindings</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * Get the cache expiration time in seconds.     *     * @return int     */</span>    <span class="token keyword">protected</span> <span class="token keyword">function</span> <span class="token function-definition function">getCacheExpiration</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token comment">// 这里可以根据你的需求设置缓存的过期时间</span>        <span class="token keyword">return</span> <span class="token number">3600</span><span class="token punctuation">;</span> <span class="token comment">// 1 hour</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上述代码展示了 <code>CacheBuilder</code> 类的基本结构和示例的缓存优化方法。现在，让我们逐个解析每个方法的意义和改造原因：</p><ol><li><code>firstCache()</code> 方法<br><code>firstCache()</code> 方法是我们自定义的方法，用于缓存查询结果并返回第一个结果。在该方法中，我们首先尝试从缓存中获取数据，如果缓存中存在数据，则直接返回缓存结果，避免了对数据库的额外查询操作。如果缓存中不存在数据，则从数据库中获取数据，并将结果缓存起来，以便下次查询时可以直接从缓存中读取。通过这样的改造，我们可以减少对数据库的访问次数，提高查询性能。</li><li><code>getCacheKey()</code> 方法<br><code>getCacheKey()</code> 方法用于生成缓存键名。在该方法中，我们根据查询的 SQL 语句和绑定的参数生成一个唯一的缓存键。通过自定义键名的生成规则，我们可以更灵活地控制缓存的存储和管理。</li><li><code>getCacheExpiration()</code> 方法<br><code>getCacheExpiration()</code> 方法用于设置缓存的过期时间。在该方法中，我们可以根据需求设置缓存的有效期，以确保缓存的数据在一定时间后会被更新。通过设置适当的缓存过期时间，我们可以在一定程度上保持数据的实时性。</li></ol><p>通过以上的方法改造，我们实现了一个自定义的查询构造器类 <code>CacheBuilder</code>，它具备了缓存查询结果的能力。这样的改造使得我们可以更高效地执行数据库查询，减少对数据库的访问次数，从而提高查询性能和应用程序的响应速度。</p><p>接下来，让我们看一下如何在模型中使用自定义的查询构造器类 <code>CacheBuilder</code>。</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">namespace</span> <span class="token package">App<span class="token punctuation">\</span>Models</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">App<span class="token punctuation">\</span>Database<span class="token punctuation">\</span>Query<span class="token punctuation">\</span>CacheBuilder</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\</span>Database<span class="token punctuation">\</span>Eloquent<span class="token punctuation">\</span>Model</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">YourModel</span> <span class="token keyword">extends</span> <span class="token class-name">Model</span><span class="token punctuation">&#123;</span>    <span class="token comment">/**     * Get a new query builder instance for the connection.     *     * @param  \Illuminate\Database\Query\Builder|null  $query     * @return \Illuminate\Database\Query\Builder     */</span>    <span class="token keyword">protected</span> <span class="token keyword">function</span> <span class="token function-definition function">newBaseQueryBuilder</span><span class="token punctuation">(</span><span class="token variable">$query</span> <span class="token operator">=</span> <span class="token constant">null</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token variable">$connection</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 使用自定义的查询构造器类 CacheBuilder</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">CacheBuilder</span><span class="token punctuation">(</span><span class="token variable">$connection</span><span class="token punctuation">,</span> <span class="token variable">$connection</span><span class="token operator">-></span><span class="token function">getQueryGrammar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token variable">$connection</span><span class="token operator">-></span><span class="token function">getPostProcessor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token variable">$query</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>现在你可以在使用模型查询时，使用新的方法 <code>firstCache()</code> 来从缓存中读取数据。例如：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token variable">$result</span> <span class="token operator">=</span> <span class="token class-name static-context">YourModel</span><span class="token operator">::</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'column'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'value'</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">firstCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这将先尝试从缓存中获取数据，如果缓存中不存在，则从数据库中读取数据，并将结果缓存起来。</p><p>请注意，以上代码示例仅为演示目的，你可能需要根据你的实际需求进行适当的修改和调整。另外，确保你已经正确配置了缓存驱动程序和相关的缓存设置。</p><h3 id="Query-Builder-优化">Query Builder 优化</h3><p>在 Laravel 中，我们通常使用 <code>DB</code> 类来执行数据库查询操作。然而，有时候我们需要对查询进行优化，以提高性能和可维护性。这时，自定义查询构造器类就派上了用场。</p><h3 id="继承ORM-Builder实现">继承ORM Builder实现</h3><p>在本文中，我们将介绍如何改造 Laravel 的 <code>DB</code> 类，以使用自定义的查询构造器类 <code>CacheBuilder</code>。这个改造将为我们提供一个名为 <code>firstCache()</code> 的方法，用于缓存查询结果，从而进一步提高查询性能。</p><p>首先，我们需要创建一个新的类 <code>CacheDB</code>，它继承自 Laravel 的原生 <code>DB</code> 类，并重写了 <code>connection</code> 方法。这个方法用于获取数据库连接实例。</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">namespace</span> <span class="token package">App<span class="token punctuation">\</span>Database</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\</span>Support<span class="token punctuation">\</span>Facades<span class="token punctuation">\</span>DB</span> <span class="token keyword">as</span> BaseDB<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">CacheDB</span> <span class="token keyword">extends</span> <span class="token class-name">BaseDB</span><span class="token punctuation">&#123;</span>    <span class="token comment">/**     * Get a database connection instance.     *     * @param  string|null  $name     * @return \Illuminate\Database\ConnectionInterface     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">function</span> <span class="token function-definition function">connection</span><span class="token punctuation">(</span><span class="token variable">$name</span> <span class="token operator">=</span> <span class="token constant">null</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token variable">$connection</span> <span class="token operator">=</span> <span class="token keyword static-context">parent</span><span class="token operator">::</span><span class="token function">connection</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 使用自定义的查询构造器类 CacheBuilder</span>        <span class="token variable">$connection</span><span class="token operator">-></span><span class="token function">setQueryGrammar</span><span class="token punctuation">(</span><span class="token variable">$connection</span><span class="token operator">-></span><span class="token function">getQueryGrammar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$connection</span><span class="token operator">-></span><span class="token function">setPostProcessor</span><span class="token punctuation">(</span><span class="token variable">$connection</span><span class="token operator">-></span><span class="token function">getPostProcessor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$connection</span><span class="token operator">-></span><span class="token function">setQueryBuilder</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">CacheBuilder</span><span class="token punctuation">(</span><span class="token variable">$connection</span><span class="token punctuation">,</span> <span class="token variable">$connection</span><span class="token operator">-></span><span class="token function">getQueryGrammar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token variable">$connection</span><span class="token operator">-></span><span class="token function">getPostProcessor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token variable">$connection</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上述代码中的 <code>CacheDB</code> 类继承了原生的 <code>DB</code> 类，并重写了 <code>connection</code> 方法。这个方法在获取数据库连接实例时被调用。</p><p>在重写的 <code>connection</code> 方法中，我们首先调用了父类的 <code>connection</code> 方法，以获取原始的数据库连接实例。然后，我们使用自定义的查询构造器类 <code>CacheBuilder</code> 替换了原始连接实例的查询语法和后处理器，并设置了新的查询构造器。</p><p>现在，我们需要在 <code>config/app.php</code> 文件中进行一些配置更改，以使用我们的自定义 <code>CacheDB</code> 类。</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token string single-quoted-string">'aliases'</span> <span class="token operator">=></span> <span class="token punctuation">[</span>    <span class="token comment">// ...</span>    <span class="token string single-quoted-string">'DB'</span> <span class="token operator">=></span> <span class="token class-name class-name-fully-qualified static-context">App<span class="token punctuation">\</span>Database<span class="token punctuation">\</span>CacheDB</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">,</span>    <span class="token comment">// ...</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在上述代码中，我们将原生的 <code>DB</code> 类别名替换为我们自定义的 <code>CacheDB</code> 类。这样，当我们使用 <code>DB</code> 类进行数据库查询时，实际上是使用了我们自定义的查询构造器类 <code>CacheBuilder</code>。</p><p>现在，我们可以使用 <code>firstCache()</code> 方法来缓存查询结果，以提高查询性能。例如：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token variable">$result</span> <span class="token operator">=</span> <span class="token class-name static-context">DB</span><span class="token operator">::</span><span class="token function">table</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'your_table'</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">where</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'column'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'value'</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">firstCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>通过以上改造，我们实现了一个自定义的查询构造器类 <code>CacheBuilder</code>，并将其应用于 Laravel 的 <code>DB</code> 类。这样做的目的是为了提高数据库查询的性能和可维护性。</p><h3 id="独立写Cache">独立写Cache</h3><p>当使用 Laravel 框架时，你可以通过自定义一个扩展类来实现对 DB 建造者模式的改造，以满足你的需求。下面是一个示例代码：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">namespace</span> <span class="token package">App<span class="token punctuation">\</span>Extensions</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\</span>Database<span class="token punctuation">\</span>Query<span class="token punctuation">\</span>Builder</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\</span>Support<span class="token punctuation">\</span>Facades<span class="token punctuation">\</span>Cache</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">CustomQueryBuilder</span> <span class="token keyword">extends</span> <span class="token class-name">Builder</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">firstCache</span><span class="token punctuation">(</span><span class="token variable">$minutes</span><span class="token punctuation">,</span> <span class="token variable">$key</span> <span class="token operator">=</span> <span class="token constant">null</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token variable">$key</span> <span class="token operator">=</span> <span class="token variable">$key</span> <span class="token operator">?</span><span class="token punctuation">:</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token function">getCacheKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token class-name static-context">Cache</span><span class="token operator">::</span><span class="token function">remember</span><span class="token punctuation">(</span><span class="token variable">$key</span><span class="token punctuation">,</span> <span class="token variable">$minutes</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token function">first</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">getCache</span><span class="token punctuation">(</span><span class="token variable">$minutes</span><span class="token punctuation">,</span> <span class="token variable">$key</span> <span class="token operator">=</span> <span class="token constant">null</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token variable">$key</span> <span class="token operator">=</span> <span class="token variable">$key</span> <span class="token operator">?</span><span class="token punctuation">:</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token function">getCacheKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token class-name static-context">Cache</span><span class="token operator">::</span><span class="token function">remember</span><span class="token punctuation">(</span><span class="token variable">$key</span><span class="token punctuation">,</span> <span class="token variable">$minutes</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">protected</span> <span class="token keyword">function</span> <span class="token function-definition function">getCacheKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string single-quoted-string">'query_cache_'</span> <span class="token operator">.</span> <span class="token function">sha1</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token function">toSql</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">.</span> <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token function">getBindings</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在上述代码中，我们自定义了一个名为 <code>CustomQueryBuilder</code> 的类，它继承自 Laravel 框架的 <code>Builder</code> 类，也就是 DB 建造者类。这个自定义类添加了 <code>firstCache()</code> 和 <code>getCache()</code> 两个方法。</p><ul><li><code>firstCache()</code> 方法用于获取第一条记录并使用缓存。它接受两个参数：缓存的分钟数和可选的缓存键。如果缓存存在，将直接从缓存中获取数据；否则，将从数据库获取数据并生成缓存。最后，返回获取到的第一条记录。</li><li><code>getCache()</code> 方法用于获取多条记录并使用缓存。它接受两个参数：缓存的分钟数和可选的缓存键。与 <code>firstCache()</code> 方法类似，它也会先检查缓存是否存在，然后决定是直接从缓存中获取数据还是从数据库中获取数据并生成缓存。最后，返回获取到的多条记录。</li></ul><p>这两个方法内部使用了 Laravel 框架的 <code>Cache</code> 类来进行缓存操作。缓存键的生成使用了查询的 SQL 语句和绑定参数，以保证每个查询的唯一性。</p><p>为了使用这个自定义的 <code>CustomQueryBuilder</code> 类，你需要在 Laravel 项目中注册这个自定义类作为 DB 建造者的默认类。可以在 <code>AppServiceProvider</code> 或其他合适的服务提供者中添加以下代码：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\</span>Database<span class="token punctuation">\</span>ConnectionInterface</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">App<span class="token punctuation">\</span>Extensions<span class="token punctuation">\</span>CustomQueryBuilder</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">register</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">app</span><span class="token operator">-></span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token class-name static-context">ConnectionInterface</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token variable">$app</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">CustomQueryBuilder</span><span class="token punctuation">(</span>            <span class="token variable">$app</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'db'</span><span class="token punctuation">]</span><span class="token operator">-></span><span class="token function">connection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token variable">$app</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'db'</span><span class="token punctuation">]</span><span class="token operator">-></span><span class="token function">getQueryGrammar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token variable">$app</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'db'</span><span class="token punctuation">]</span><span class="token operator">-></span><span class="token function">getPostProcessor</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这段代码将绑定 <code>ConnectionInterface</code> 接口到 <code>CustomQueryBuilder</code> 类，以便在使用 <code>DB</code> 门面时默认使用你的自定义类。</p><p>这样，当你使用 <code>DB</code> 门面的 <code>table()</code> 方法时，将使用你自定义的 <code>CustomQueryBuilder</code> 类，从而具备了 <code>firstCache()</code> 和 <code>getCache()</code> 方法的功能。</p><p><strong>使用封装的方法</strong></p><p>现在你可以在项目中使用 <code>firstCache()</code> 和 <code>getCache()</code> 方法来获取缓存数据。以下是示例用法：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token variable">$users</span> <span class="token operator">=</span> <span class="token class-name static-context">DB</span><span class="token operator">::</span><span class="token function">table</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'users'</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">firstCache</span><span class="token punctuation">(</span><span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 获取第一条用户数据并使用缓存（缓存有效期为60分钟）</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在上述示例中，我们使用 <code>DB::table('users')</code> 获取了一个查询构建器，然后通过调用 <code>firstCache(60)</code> 方法来获取第一条用户数据。如果缓存存在，将直接从缓存中获取数据，否则将从数据库中查询并生成缓存。</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token variable">$users</span> <span class="token operator">=</span> <span class="token class-name static-context">DB</span><span class="token operator">::</span><span class="token function">table</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'users'</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">getCache</span><span class="token punctuation">(</span><span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 获取所有用户数据并使用缓存（缓存有效期为60分钟）</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这个示例展示了如何使用 <code>getCache(60)</code> 方法来获取所有的用户数据，并使用缓存。同样地，如果缓存存在，数据将直接从缓存中获取，否则将从数据库中查询并生成缓存。</p><h2 id="总结：">总结：</h2><p>通过自定义查询构造器类的改造，我们可以优化 Laravel 的数据库查询。在本文中，我们介绍了如何改造 <code>DB</code> 类，使用自定义的查询构造器类 <code>CacheBuilder</code>。这个改造允许我们使用新的方法 <code>firstCache()</code> 来缓存查询结果，从而提高查询性能。通过重写 <code>connection</code> 方法，我们成功地将自定义的查询构造器类应用于 <code>DB</code> 类，并在配置文件中进行了相应的修改。这样的改造提供了更高效和可扩展的数据库查询功能，使得我们能够更好地优化和管理我们的应用程序。无论是对于初学者还是有经验的开发者来说，这种改造都是非常有益的。</p><h2 id="Laravel其他优化方法">Laravel其他优化方法</h2><p>除了对 Laravel 的建造者模式进行缓存优化外，还有许多其他的优化方式可以提升 Laravel 框架的性能和效率。以下是一些常见的优化方式：</p><ol><li>缓存配置和路由：<ul><li>使用缓存来存储配置文件，以减少每次请求时重新加载配置的开销。</li><li>缓存路由信息，避免在每次请求时重新解析路由。</li></ul></li><li>使用缓存：<ul><li>使用缓存来存储经常访问的数据，如数据库查询结果、API 响应等。</li><li>使用适当的缓存驱动（如 Memcached、Redis）来提高缓存性能。</li></ul></li><li>数据库优化：<ul><li>使用适当的索引来加速数据库查询。</li><li>避免在循环中执行数据库查询，尽量使用批量操作。</li><li>使用延迟加载（Lazy Loading）来减少关联模型的查询次数。</li></ul></li><li>代码优化：<ul><li>避免在视图中执行复杂的逻辑操作，尽量将逻辑放在控制器或服务层中处理。</li><li>使用 Eager Loading 来预加载关联模型，减少查询次数。</li><li>使用合适的数据结构和算法来提高代码的效率。</li></ul></li><li>使用队列：<ul><li>将耗时的任务放入队列中异步处理，提高应用程序的响应速度。</li><li>使用适当的队列驱动（如 Redis、Beanstalkd）来提高队列的处理性能。</li></ul></li><li>优化自动加载：<ul><li>使用 Composer 的 <code>classmap</code> 自动加载优化，将类映射到文件路径，减少自动加载的开销。</li><li>避免加载不必要的类和文件。</li></ul></li><li>使用缓存视图：<ul><li>将编译后的视图缓存起来，减少视图编译的开销。</li></ul></li><li>使用 HTTP 缓存：<ul><li>设置适当的缓存头，利用浏览器缓存和 CDN 缓存来减少重复请求。</li></ul></li><li>使用性能分析工具：<ul><li>使用工具如 Laravel Debugbar、Blackfire 等来分析应用程序的性能瓶颈，并进行相应的优化。</li></ul></li></ol><p>这些优化方式可以根据具体的应用场景和需求进行选择和实施。通过综合应用这些优化策略，可以显著提升 Laravel 应用程序的性能和效率。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;简介&quot;&gt;简介&lt;/h2&gt;
&lt;p&gt;在 Laravel 中，数据库查询是一个常见的任务。为了提高查询的性能和可维护性，我们可以通过自定义查询构造器类来优化数据库查询。本文将详细解析使用 自定义ORM查询构造器类 &lt;code&gt;CacheBuilder&lt;/code&gt; 和 改</summary>
      
    
    
    
    <category term="php" scheme="https://blog.mailjob.net/categories/php/"/>
    
    
    <category term="php" scheme="https://blog.mailjob.net/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>shell检查php项目是否存在语法错误</title>
    <link href="https://blog.mailjob.net/posts/3069224484.html"/>
    <id>https://blog.mailjob.net/posts/3069224484.html</id>
    <published>2023-06-29T06:27:25.000Z</published>
    <updated>2025-10-17T05:39:50.050Z</updated>
    
    <content type="html"><![CDATA[<p>当检查一个PHP项目中是否存在语法错误时，我们可以使用Shell脚本来自动化这个过程。在本文中，我们将介绍两种方法来实现这个目标。</p><h2 id="方法一：使用串行方式">方法一：使用串行方式</h2><p>首先，我们可以使用一个简单的Shell脚本来遍历项目目录中的所有PHP文件，并使用<code>php -l</code>命令来检查每个文件是否存在语法错误。以下是实现这个方法的脚本：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token comment"># 设置项目路径</span><span class="token assign-left variable">project_path</span><span class="token operator">=</span><span class="token string">"/path/to/your/php/project"</span><span class="token comment"># 遍历项目目录中的所有php文件</span><span class="token keyword">for</span> <span class="token for-or-select variable">file</span> <span class="token keyword">in</span> <span class="token variable"><span class="token variable">$(</span><span class="token function">find</span> $project_path <span class="token parameter variable">-type</span> f <span class="token parameter variable">-name</span> <span class="token string">"*.php"</span><span class="token variable">)</span></span><span class="token punctuation">;</span> <span class="token keyword">do</span>    <span class="token comment"># 检查文件是否存在语法错误</span>    php <span class="token parameter variable">-l</span> <span class="token variable">$file</span><span class="token keyword">done</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个脚本将会遍历项目目录中的所有PHP文件，并使用<code>php -l</code>命令来检查每个文件是否存在语法错误。如果存在语法错误，将会输出错误信息。</p><h2 id="方法二：使用并行方式">方法二：使用并行方式</h2><p>如果你想要加快检查的速度，你可以使用以下方式同时开启多个线程并行检查PHP文件的语法错误。以下是实现这个方法的脚本：</p><h3 id="xargs命令">xargs命令</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token comment"># 设置项目路径</span><span class="token assign-left variable">project_path</span><span class="token operator">=</span><span class="token string">"/path/to/your/php/project"</span><span class="token comment"># 定义函数，用于检查语法错误</span><span class="token function-name function">check_syntax</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    php <span class="token parameter variable">-l</span> <span class="token string">"<span class="token variable">$1</span>"</span><span class="token punctuation">&#125;</span><span class="token comment"># 导出函数，以便在xargs中使用</span><span class="token builtin class-name">export</span> <span class="token parameter variable">-f</span> check_syntax<span class="token comment"># 遍历项目目录中的所有php文件，并使用xargs并行执行检查语法错误的函数</span><span class="token function">find</span> <span class="token string">"<span class="token variable">$project_path</span>"</span> <span class="token parameter variable">-type</span> f <span class="token parameter variable">-name</span> <span class="token string">"*.php"</span> <span class="token operator">|</span> <span class="token function">xargs</span> <span class="token parameter variable">-I</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token parameter variable">-P</span> <span class="token number">20</span> <span class="token function">bash</span> <span class="token parameter variable">-c</span> <span class="token string">'check_syntax "$@"'</span> _ <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>推荐下面这种写法，如果遇到语法错误，直接中断脚本执行。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token comment"># 提示用户输入项目路径</span><span class="token assign-left variable">project_path</span><span class="token operator">=</span><span class="token string">"<span class="token variable">$1</span>"</span><span class="token builtin class-name">echo</span> <span class="token string">"项目路径: <span class="token variable">$project_path</span>"</span><span class="token comment"># 错误处理</span><span class="token function-name function">handle_error</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token builtin class-name">echo</span> <span class="token string">"发生了错误，请检查脚本或项目路径。"</span>    <span class="token builtin class-name">exit</span> <span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token builtin class-name">trap</span> <span class="token string">'handle_error'</span> ERR<span class="token comment"># 遍历项目目录中的所有php文件，并使用xargs并行执行检查语法错误的命令</span><span class="token function">find</span> <span class="token string">"<span class="token variable">$project_path</span>"</span> <span class="token parameter variable">-type</span> f <span class="token parameter variable">-name</span> <span class="token string">"*.php"</span> <span class="token parameter variable">-print0</span> <span class="token operator">|</span> <span class="token function">xargs</span> <span class="token parameter variable">-0</span> <span class="token parameter variable">-I</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token parameter variable">-P</span> <span class="token number">20</span> <span class="token function">bash</span> <span class="token parameter variable">-c</span> <span class="token string">'php -l "&#123;&#125;"'</span> <span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">echo</span> <span class="token string">"OK"</span><span class="token comment"># 排除 vendor 目录</span><span class="token comment"># find "$project_path" -type f -name "*.php" -not -path '*/vendor/*' -print0 | xargs -0 -I &#123;&#125; -P 20 bash -c 'php -l "&#123;&#125;"' &amp;&amp; echo "OK"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>工作原理</strong></p><ol><li>设置项目路径变量：将<code>/path/to/your/php/project</code>替换为你的PHP项目的实际路径。</li><li>定义检查语法错误的函数：<code>check_syntax</code>函数使用<code>php -l</code>命令来检查给定的PHP文件是否存在语法错误。</li><li>导出函数：使用<code>export -f</code>命令导出<code>check_syntax</code>函数，以便在<code>xargs</code>中使用。</li><li>遍历项目目录中的所有PHP文件：使用<code>find</code>命令查找项目目录中的所有PHP文件，并将它们传递给<code>xargs</code>命令。</li><li>并行执行检查语法错误的函数：<code>xargs -I &#123;&#125; -P 20</code>命令将每个PHP文件作为参数传递给<code>bash -c 'check_syntax &quot;$@&quot;' _ &#123;&#125;</code>命令。<code>-P 20</code>表示最多开启20个线程并行执行检查语法错误的函数。</li><li>检查语法错误：每个线程将使用<code>check_syntax</code>函数检查一个PHP文件是否存在语法错误。如果存在语法错误，将会输出错误信息。</li></ol><h3 id="parallel命令">parallel命令</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token comment"># 设置项目路径</span><span class="token assign-left variable">project_path</span><span class="token operator">=</span><span class="token string">"/path/to/your/php/project"</span><span class="token comment"># 使用GNU Parallel工具并行检查语法错误</span><span class="token function">find</span> <span class="token variable">$project_path</span> <span class="token parameter variable">-type</span> f <span class="token parameter variable">-name</span> <span class="token string">"*.php"</span> <span class="token operator">|</span> parallel <span class="token parameter variable">-j</span> <span class="token number">20</span> php <span class="token parameter variable">-l</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>设置项目路径变量：将<code>/path/to/your/php/project</code>替换为你的PHP项目的实际路径。</li><li>使用GNU Parallel工具并行检查语法错误：<code>find $project_path -type f -name &quot;*.php&quot;</code>命令用于查找项目目录中的所有PHP文件，并将它们作为输入传递给<code>parallel</code>命令。</li><li><code>-j 20</code>参数表示最多开启20个线程并行执行后续的命令。</li><li><code>php -l &#123;&#125;</code>命令用于检查每个PHP文件是否存在语法错误。<code>&#123;&#125;</code>是一个占位符，会被当前正在处理的文件名替换。</li></ol><h2 id="总结">总结</h2><p>使用Shell脚本来检查PHP项目中是否存在语法错误是一种简单而有效的方法。你可以选择使用串行方式或并行方式来实现这个目标，具体取决于你的需求和项目的规模。无论你选择哪种方法，都能够帮助你及时发现并修复PHP项目中的语法错误，提高代码的质量和可靠性。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;当检查一个PHP项目中是否存在语法错误时，我们可以使用Shell脚本来自动化这个过程。在本文中，我们将介绍两种方法来实现这个目标。&lt;/p&gt;
&lt;h2 id=&quot;方法一：使用串行方式&quot;&gt;方法一：使用串行方式&lt;/h2&gt;
&lt;p&gt;首先，我们可以使用一个简单的Shell脚本来遍历项目目录</summary>
      
    
    
    
    <category term="php" scheme="https://blog.mailjob.net/categories/php/"/>
    
    
    <category term="php" scheme="https://blog.mailjob.net/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>千万级记录数据表结构如何实现平滑变更</title>
    <link href="https://blog.mailjob.net/posts/2674700618.html"/>
    <id>https://blog.mailjob.net/posts/2674700618.html</id>
    <published>2023-06-28T05:53:25.000Z</published>
    <updated>2025-10-17T05:39:50.046Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题描述">问题描述</h2><p>数据量大、并发量高场景，<strong>如何在流量低峰期，平滑实施表结构变更？</strong></p><p>一般来说，是指增加表的属性，因为：</p><ul><li>如果是减column，升级程序不使用即可；</li><li>如果是修改column，程序兼容性容易出问题；</li></ul><h2 id="常见方案">常见方案</h2><p>方案一：在线修改表结构。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">alter</span> <span class="token keyword">table</span> <span class="token keyword">add</span> <span class="token keyword">column</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>数据量大的情况下，锁表时间会较长，造成拒绝服务，一般不可行。</p><p><strong>方案二：通过增加表的方式扩展属性，通过外键join来查询。</strong></p><p>举个例子，对：<br><em>t_user(uid, c1, c2, c3)</em><br>想要扩展属性，可以通过增加一个表实现：<br><em>t_user_ex(uid, c4, c5, c6)</em></p><p>数据量大的情况下，join性能较差，一般不可行。</p><p><strong>方案三，通过增加表的方式扩展，通过视图来屏蔽底层复杂性。</strong></p><p>同上，视图效率较低，一般不使用视图。</p><p><strong>方案四，提前预留一些reserved字段，加列可复用这些字段。</strong></p><p>这个方案可行，但如果预留过多，会造成空间浪费。</p><p><strong>方案六，pt-online-schema-change</strong></p><p>对于MySQL而言，这是目前比较成熟的方案，被广大公司所使用。</p><h2 id="pt-online-schema-change方案说明">pt-online-schema-change方案说明</h2><p>假设：</p><p><em>user(uid, name, passwd)</em></p><p>要扩展到：</p><p><em>user(uid, name, passwd, age, sex)</em></p><p><strong>第一步</strong>，先创建一个扩充字段后的新表：</p><p><em>user_new(uid, name, passwd, age, sex)</em></p><p><strong>第二步</strong>，在原表user上创建三个触发器，对原表user进行的所有insert/delete/update操作，都会对新表user_new进行相同的操作；</p><p><strong>第三步</strong>，分批将原表user中的数据insert到新表user_new，直至数据迁移完成；</p><p><strong>第四步</strong>，删掉触发器，把原表移走（默认是drop掉）；</p><p><strong>第五步</strong>，把新表user_new重命名（rename）成原表user；<br>扩充字段完成，整个过程不需要锁表，可以持续对外提供服务。</p><p><strong>操作过程中需要注意：</strong></p><ol><li>变更过程中，最重要的是冲突的处理，一条原则，以触发器的新数据为准，这就要求被迁移的表<strong>必须有主键</strong>（这个要求基本都满足）；</li><li>变更过程中，写操作需要建立触发器，所以如果原表已经有很多触发器，方案就不行（互联网大数据高并发的在线业务，一般都禁止使用触发器）；</li><li>触发器的建立，会影响原表的性能，所以这个操作必须在流量低峰期进行；</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;问题描述&quot;&gt;问题描述&lt;/h2&gt;
&lt;p&gt;数据量大、并发量高场景，&lt;strong&gt;如何在流量低峰期，平滑实施表结构变更？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;一般来说，是指增加表的属性，因为：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果是减column，升级程序不使用即可；&lt;/li&gt;</summary>
      
    
    
    
    <category term="mysql" scheme="https://blog.mailjob.net/categories/mysql/"/>
    
    
    <category term="mysql" scheme="https://blog.mailjob.net/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>如何用go实现一个ORM</title>
    <link href="https://blog.mailjob.net/posts/1696354643.html"/>
    <id>https://blog.mailjob.net/posts/1696354643.html</id>
    <published>2023-02-22T06:32:00.000Z</published>
    <updated>2025-10-17T05:39:50.042Z</updated>
    
    <content type="html"><![CDATA[<p>为了提高开发效率和质量，我们常常需要ORM来帮助我们快速实现持久层增删改查API，目前go语言实现的ORM有很多种，他们都有自己的优劣点，有的实现简单，有的功能复杂，有的API十分优雅。在使用了多个类似的工具之后，总是会发现某些点无法满足解决我们生产环境中碰到的实际问题，比如无法集成公司内部的监控，Trace组件，没有database层的超时设置，没有熔断等，所以有必要公司自己内部实现一款满足我们可自定义开发的ORM，好用的生产工具常常能够对生产力产生飞跃式的提升。</p><h2 id="为什么需要ORM">为什么需要ORM</h2><h3 id="直接使用database-sql的痛点">直接使用database/sql的痛点</h3><p>首先看看用database/sql如何查询数据库<br>我们用user表来做例子，一般的工作流程是先做技术方案，其中排在比较前面的是数据库表的设计，大部分公司应该有严格的数据库权限控制，不会给线上程序使用比较危险的操作权限，比如创建删除数据库，表，删除数据等。<br>表结构如下：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">`</span>user<span class="token punctuation">`</span></span> <span class="token punctuation">(</span>  <span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token keyword">unsigned</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span> <span class="token keyword">COMMENT</span> <span class="token string">'id'</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>name<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'名称'</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>age<span class="token punctuation">`</span></span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token string">'0'</span> <span class="token keyword">COMMENT</span> <span class="token string">'年龄'</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>ctime<span class="token punctuation">`</span></span> <span class="token keyword">datetime</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CURRENT_TIMESTAMP</span> <span class="token keyword">COMMENT</span> <span class="token string">'创建时间'</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>mtime<span class="token punctuation">`</span></span> <span class="token keyword">datetime</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CURRENT_TIMESTAMP</span> <span class="token keyword">COMMENT</span> <span class="token string">'更新时间'</span><span class="token punctuation">,</span>  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span>  <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8mb4<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>首先我们要写出和表结构对应的结构体User，如果你足够勤奋和努力，相应的json tag 和注释都可以写上，这个过程无聊且重复，因为在设计表结构的时候你已经写过一遍了。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> User <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>    Id    <span class="token builtin">int64</span>     <span class="token string">`json:"id"`</span>       Name  <span class="token builtin">string</span>    <span class="token string">`json:"name"`</span>    Age   <span class="token builtin">int64</span>        Ctime time<span class="token punctuation">.</span>Time    Mtime time<span class="token punctuation">.</span>Time  <span class="token comment">// 更新时间</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>定义好结构体，我们写一个查询年龄在20以下且按照id字段顺序排序的前20名用户的 go代码</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">FindUsers</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>User<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    rows<span class="token punctuation">,</span> err <span class="token operator">:=</span> db<span class="token punctuation">.</span><span class="token function">QueryContext</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token string">"SELECT `id`,`name`,`age`,`ctime`,`mtime` FROM user WHERE `age`&lt;? ORDER BY `id` LIMIT 20 "</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err    <span class="token punctuation">&#125;</span>    <span class="token keyword">defer</span> rows<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    result <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>User<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token keyword">for</span> rows<span class="token punctuation">.</span><span class="token function">Next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        a <span class="token operator">:=</span> <span class="token operator">&amp;</span>User<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> err <span class="token operator">:=</span> rows<span class="token punctuation">.</span><span class="token function">Scan</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>a<span class="token punctuation">.</span>Id<span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">.</span>Name<span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">.</span>Age<span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">.</span>Ctime<span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">.</span>Mtime<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err        <span class="token punctuation">&#125;</span>        result <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> a<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> rows<span class="token punctuation">.</span><span class="token function">Err</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> rows<span class="token punctuation">.</span><span class="token function">Err</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> result<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当我们写少量这样的代码的时候我们可能还觉得轻松，但是当你业务工期排的很紧，并且要写大量的定制化查询的时候，这样的重复代码会越来越多。<br>上面的的代码我们发现有这么几个问题：</p><ol><li>SQL 语句是硬编码在程序里面的，当我需要增加查询条件的时候我需要另外再写一个方法，整个方法需要拷贝一份，很不灵活。</li><li>在查询表所有字段的情况下，第2行下面的代码都是一样重复的，不管sql语句后面的条件是怎么样的。</li><li>我们发现第1行SQL语句编写和rows.Scan()那行，写的枯燥层度是和表字段的数量成正比的，如果一个表有50个字段或者100个字段，手写是非常乏味的。</li><li>在开发过程中rows.Close() 和 rows.Err()忘记写是常见的错误。</li></ol><p>我们总结出来用database/sql标准库开发的痛点：</p><h4 id="开发效率很低">开发效率很低</h4><p>很显然写上面的那种代码是很耗费时间的，因为手误容易写错，无可避免要增加自测的时间。如果上面的结构体User、 查询方法FindUsers() 代码能够自动生成，那么那将会极大的提高开发效率并且减少human error的发生从而提高开发质量。</p><h4 id="心智负担很重">心智负担很重</h4><p>如果一个开发人员把大量的时间花在这些代码上，那么他其实是在浪费自己的时间，不管在工作中还是在个人项目中，应该把重点花在架构设计，业务逻辑设计，困难点攻坚上面，去探索和开拓自己没有经验的领域，这块Dao层的代码最好在10分钟内完成。</p><h2 id="ORM的核心组成">ORM的核心组成</h2><p>明白了上面的痛点，为了开发工作更舒服，更高效，我们尝试着自己去开发一个ORM，核心的地方在于两个方面：</p><p><img src="http://img.github.mailjob.net/202302221448782.png" alt="图片"></p><ol><li><p>SQLBuilder：SQL语句要非硬编码，通过某种链式调用构造器帮助我构建SQL语句。</p></li><li><p>Scanner：从数据库返回的数据可以自动映射赋值到结构体中。</p></li></ol><h3 id="SQL-SelectBuilder">SQL SelectBuilder</h3><p>我们尝试做个简略版的查询语句构造器,最终我们要达到如下图所示的效果。</p><p><img src="http://img.github.mailjob.net/202302221448335.png" alt="图片"></p><p>我们可以通过和SQL关键字同名的方法来表达SQL语句的固有关键字，通过go方法参数来设置其中动态变化的元素，这样链式调用和写SQL语句的思维顺序是一致的，只不过我们之前通过硬编码的方式变成了方法调用。</p><p>具体代码如下：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> SelectBuilder <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>    builder   <span class="token operator">*</span>strings<span class="token punctuation">.</span>Builder    column    <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span>    tableName <span class="token builtin">string</span>    where     <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">func</span><span class="token punctuation">(</span>s <span class="token operator">*</span>SelectBuilder<span class="token punctuation">)</span>    args      <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    orderby   <span class="token builtin">string</span>    offset    <span class="token operator">*</span><span class="token builtin">int64</span>    limit     <span class="token operator">*</span><span class="token builtin">int64</span><span class="token punctuation">&#125;</span> <span class="token keyword">func</span> <span class="token punctuation">(</span>s <span class="token operator">*</span>SelectBuilder<span class="token punctuation">)</span> <span class="token function">Select</span><span class="token punctuation">(</span>field <span class="token operator">...</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">*</span>SelectBuilder <span class="token punctuation">&#123;</span>    s<span class="token punctuation">.</span>column <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>column<span class="token punctuation">,</span> field<span class="token operator">...</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> s<span class="token punctuation">&#125;</span> <span class="token keyword">func</span> <span class="token punctuation">(</span>s <span class="token operator">*</span>SelectBuilder<span class="token punctuation">)</span> <span class="token function">From</span><span class="token punctuation">(</span>name <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">*</span>SelectBuilder <span class="token punctuation">&#123;</span>    s<span class="token punctuation">.</span>tabelName <span class="token operator">=</span> name    <span class="token keyword">return</span> s<span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token punctuation">(</span>s <span class="token operator">*</span>SelectBuilder<span class="token punctuation">)</span> <span class="token function">Where</span><span class="token punctuation">(</span>f <span class="token operator">...</span><span class="token keyword">func</span><span class="token punctuation">(</span>s <span class="token operator">*</span>SelectBuilder<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span>SelectBuilder <span class="token punctuation">&#123;</span>    s<span class="token punctuation">.</span>where <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>where<span class="token punctuation">,</span> f<span class="token operator">...</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> s<span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token punctuation">(</span>s <span class="token operator">*</span>SelectBuilder<span class="token punctuation">)</span> <span class="token function">OrderBy</span><span class="token punctuation">(</span>field <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">*</span>SelectBuilder <span class="token punctuation">&#123;</span>    s<span class="token punctuation">.</span>orderby <span class="token operator">=</span> field    <span class="token keyword">return</span> s<span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token punctuation">(</span>s <span class="token operator">*</span>SelectBuilder<span class="token punctuation">)</span> <span class="token function">Limit</span><span class="token punctuation">(</span>offset<span class="token punctuation">,</span> limit <span class="token builtin">int64</span><span class="token punctuation">)</span> <span class="token operator">*</span>SelectBuilder <span class="token punctuation">&#123;</span>    s<span class="token punctuation">.</span>offset <span class="token operator">=</span> <span class="token operator">&amp;</span>offset    s<span class="token punctuation">.</span>limit <span class="token operator">=</span> <span class="token operator">&amp;</span>limit    <span class="token keyword">return</span> s<span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">GT</span><span class="token punctuation">(</span>field <span class="token builtin">string</span><span class="token punctuation">,</span> arg <span class="token keyword">interface</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token keyword">func</span><span class="token punctuation">(</span>s <span class="token operator">*</span>SelectBuilder<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">func</span><span class="token punctuation">(</span>s <span class="token operator">*</span>SelectBuilder<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        s<span class="token punctuation">.</span>builder<span class="token punctuation">.</span><span class="token function">WriteString</span><span class="token punctuation">(</span><span class="token string">"`"</span> <span class="token operator">+</span> field <span class="token operator">+</span> <span class="token string">"`"</span> <span class="token operator">+</span> <span class="token string">" > ?"</span><span class="token punctuation">)</span>        s<span class="token punctuation">.</span>args <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>args<span class="token punctuation">,</span> arg<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token punctuation">(</span>s <span class="token operator">*</span>SelectBuilder<span class="token punctuation">)</span> <span class="token function">Query</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    s<span class="token punctuation">.</span>builder<span class="token punctuation">.</span><span class="token function">WriteString</span><span class="token punctuation">(</span><span class="token string">"SELECT "</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> k<span class="token punctuation">,</span> v <span class="token operator">:=</span> <span class="token keyword">range</span> s<span class="token punctuation">.</span>column <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> k <span class="token operator">></span> <span class="token number">0</span> <span class="token punctuation">&#123;</span>            s<span class="token punctuation">.</span>builder<span class="token punctuation">.</span><span class="token function">WriteString</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        s<span class="token punctuation">.</span>builder<span class="token punctuation">.</span><span class="token function">WriteString</span><span class="token punctuation">(</span><span class="token string">"`"</span> <span class="token operator">+</span> v <span class="token operator">+</span> <span class="token string">"`"</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    s<span class="token punctuation">.</span>builder<span class="token punctuation">.</span><span class="token function">WriteString</span><span class="token punctuation">(</span><span class="token string">" FROM "</span><span class="token punctuation">)</span>    s<span class="token punctuation">.</span>builder<span class="token punctuation">.</span><span class="token function">WriteString</span><span class="token punctuation">(</span><span class="token string">"`"</span> <span class="token operator">+</span> s<span class="token punctuation">.</span>tableName <span class="token operator">+</span> <span class="token string">"` "</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>where<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span> <span class="token punctuation">&#123;</span>        s<span class="token punctuation">.</span>builder<span class="token punctuation">.</span><span class="token function">WriteString</span><span class="token punctuation">(</span><span class="token string">"WHERE "</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> k<span class="token punctuation">,</span> f <span class="token operator">:=</span> <span class="token keyword">range</span> s<span class="token punctuation">.</span>where <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> k <span class="token operator">></span> <span class="token number">0</span> <span class="token punctuation">&#123;</span>                s<span class="token punctuation">.</span>builder<span class="token punctuation">.</span><span class="token function">WriteString</span><span class="token punctuation">(</span><span class="token string">" AND "</span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>            <span class="token function">f</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> s<span class="token punctuation">.</span>orderby <span class="token operator">!=</span> <span class="token string">""</span> <span class="token punctuation">&#123;</span>        s<span class="token punctuation">.</span>builder<span class="token punctuation">.</span><span class="token function">WriteString</span><span class="token punctuation">(</span><span class="token string">" ORDER BY "</span> <span class="token operator">+</span> s<span class="token punctuation">.</span>orderby<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> s<span class="token punctuation">.</span>limit <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>        s<span class="token punctuation">.</span>builder<span class="token punctuation">.</span><span class="token function">WriteString</span><span class="token punctuation">(</span><span class="token string">" LIMIT "</span><span class="token punctuation">)</span>        s<span class="token punctuation">.</span>builder<span class="token punctuation">.</span><span class="token function">WriteString</span><span class="token punctuation">(</span>strconv<span class="token punctuation">.</span><span class="token function">FormatInt</span><span class="token punctuation">(</span><span class="token operator">*</span>s<span class="token punctuation">.</span>limit<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> s<span class="token punctuation">.</span>offset <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>        s<span class="token punctuation">.</span>builder<span class="token punctuation">.</span><span class="token function">WriteString</span><span class="token punctuation">(</span><span class="token string">" OFFSET "</span><span class="token punctuation">)</span>        s<span class="token punctuation">.</span>builder<span class="token punctuation">.</span><span class="token function">WriteString</span><span class="token punctuation">(</span>strconv<span class="token punctuation">.</span><span class="token function">FormatInt</span><span class="token punctuation">(</span><span class="token operator">*</span>s<span class="token punctuation">.</span>offset<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> s<span class="token punctuation">.</span>builder<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> s<span class="token punctuation">.</span>args<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>通过结构体上的方法调用返回自身，使其具有链式调用能力，并通过方法调用设置结构体中的值，用以构成SQL语句需要的元素。</li><li>SelectBuilder 包含性能较高的strings.Builder 来拼接字符串。</li><li>Query()方法构建出真正的SQL语句，返回包含占位符的SQL语句和args参数。</li><li>[]func(s *SelectBuilder)通过函数数组来创建查询条件，可以通过函数调用的顺序和层级来生成 AND OR这种有嵌套关系的查询条件子句。</li><li>Where() 传入的是查询条件函数，为可变参数列表，查询条件之间默认是AND关系。</li></ol><p>外部使用起来效果：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go">b <span class="token operator">:=</span> SelectBuilder<span class="token punctuation">&#123;</span>builder<span class="token punctuation">:</span> <span class="token operator">&amp;</span>strings<span class="token punctuation">.</span>Builder<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>sql<span class="token punctuation">,</span> args <span class="token operator">:=</span> b<span class="token punctuation">.</span>    <span class="token function">Select</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">,</span> <span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token string">"age"</span><span class="token punctuation">,</span> <span class="token string">"ctime"</span><span class="token punctuation">,</span> <span class="token string">"mtime"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>    <span class="token function">From</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>    <span class="token function">Where</span><span class="token punctuation">(</span><span class="token function">GT</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">GT</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>    <span class="token function">OrderBy</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>    <span class="token function">Limit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">.</span>    <span class="token function">Query</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Scanner的实现">Scanner的实现</h3><p>顾名思义Scanner的作用就是把查询结果设置到对应的go对象上去，完成关系和对象的映射，关键核心就是通过反射获知传入对象的类型和字段类型，通过反射创建对象和值，并通过golang结构体的字段后面的tag来和查询结果的表头一一对应，达到动态给结构字段赋值的能力。</p><p><img src="http://img.github.mailjob.net/202302221448220.png" alt="图片"></p><p>具体实现如下：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">ScanSlice</span><span class="token punctuation">(</span>rows <span class="token operator">*</span>sql<span class="token punctuation">.</span>Rows<span class="token punctuation">,</span> dst <span class="token keyword">interface</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">defer</span> rows<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment">// dst的地址</span>    val <span class="token operator">:=</span> reflect<span class="token punctuation">.</span><span class="token function">ValueOf</span><span class="token punctuation">(</span>dst<span class="token punctuation">)</span> <span class="token comment">//  &amp;[]*main.User</span>    <span class="token comment">// 判断是否是指针类型，go是值传递，只有传指针才能让更改生效</span>    <span class="token keyword">if</span> val<span class="token punctuation">.</span><span class="token function">Kind</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> reflect<span class="token punctuation">.</span>Ptr <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">"dst not a pointer"</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 指针指向的Value</span>    val <span class="token operator">=</span> reflect<span class="token punctuation">.</span><span class="token function">Indirect</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token comment">// []*main.User</span>    <span class="token keyword">if</span> val<span class="token punctuation">.</span><span class="token function">Kind</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> reflect<span class="token punctuation">.</span>Slice <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">"dst not a pointer to slice"</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 获取slice中的类型</span>    struPointer <span class="token operator">:=</span> val<span class="token punctuation">.</span><span class="token function">Type</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Elem</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// *main.User</span>    <span class="token comment">// 指针指向的类型 具体结构体</span>    stru <span class="token operator">:=</span> struPointer<span class="token punctuation">.</span><span class="token function">Elem</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token comment">//  main.User</span>     cols<span class="token punctuation">,</span> err <span class="token operator">:=</span> rows<span class="token punctuation">.</span><span class="token function">Columns</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">// [id,name,age,ctime,mtime]</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> err    <span class="token punctuation">&#125;</span>    <span class="token comment">// 判断查询的字段数是否大于 结构体的字段数</span>    <span class="token keyword">if</span> stru<span class="token punctuation">.</span><span class="token function">NumField</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>cols<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 5,5</span>        <span class="token keyword">return</span> errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">"NumField and cols not match"</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//结构体的json tag的value对应字段在结构体中的index</span>    tagIdx <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token comment">//map tag -> field idx</span>    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> stru<span class="token punctuation">.</span><span class="token function">NumField</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span>        tagname <span class="token operator">:=</span> stru<span class="token punctuation">.</span><span class="token function">Field</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span>Tag<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">"json"</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> tagname <span class="token operator">!=</span> <span class="token string">""</span> <span class="token punctuation">&#123;</span>            tagIdx<span class="token punctuation">[</span>tagname<span class="token punctuation">]</span> <span class="token operator">=</span> i        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    resultType <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span>reflect<span class="token punctuation">.</span>Type<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>cols<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// [int64,string,int64,time.Time,time.Time]</span>    index <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>cols<span class="token punctuation">)</span><span class="token punctuation">)</span>               <span class="token comment">// [0,1,2,3,4,5]</span>    <span class="token comment">// 查找和列名相对应的结构体jsontag name的字段类型，保存类型和序号到resultType和index中</span>    <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> v <span class="token operator">:=</span> <span class="token keyword">range</span> cols <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> i<span class="token punctuation">,</span> ok <span class="token operator">:=</span> tagIdx<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">;</span> ok <span class="token punctuation">&#123;</span>            resultType <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>resultType<span class="token punctuation">,</span> stru<span class="token punctuation">.</span><span class="token function">Field</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span>Type<span class="token punctuation">)</span>            index <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> i<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span> rows<span class="token punctuation">.</span><span class="token function">Next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 创建结构体指针,获取指针指向的对象</span>        obj <span class="token operator">:=</span> reflect<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span>stru<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Elem</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                   <span class="token comment">// main.User</span>        result <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>resultType<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//[]</span>        <span class="token comment">// 创建结构体字段类型实例的指针,并转化为interface&#123;&#125; 类型</span>        <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> v <span class="token operator">:=</span> <span class="token keyword">range</span> resultType <span class="token punctuation">&#123;</span>            result <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> reflect<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Interface</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// *Int64 ,*string ....</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 扫描结果</span>        err <span class="token operator">:=</span> rows<span class="token punctuation">.</span><span class="token function">Scan</span><span class="token punctuation">(</span>result<span class="token operator">...</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> err        <span class="token punctuation">&#125;</span>        <span class="token keyword">for</span> i<span class="token punctuation">,</span> v <span class="token operator">:=</span> <span class="token keyword">range</span> result <span class="token punctuation">&#123;</span>            <span class="token comment">// 找到对应的结构体index</span>            fieldIndex <span class="token operator">:=</span> index<span class="token punctuation">[</span>i<span class="token punctuation">]</span>            <span class="token comment">// 把scan 后的值通过反射得到指针指向的value，赋值给对应的结构体字段</span>            obj<span class="token punctuation">.</span><span class="token function">Field</span><span class="token punctuation">(</span>fieldIndex<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span>reflect<span class="token punctuation">.</span><span class="token function">ValueOf</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Elem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 给obj 的每个字段赋值</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// append 到slice</span>        vv <span class="token operator">:=</span> reflect<span class="token punctuation">.</span><span class="token function">Append</span><span class="token punctuation">(</span>val<span class="token punctuation">,</span> obj<span class="token punctuation">.</span><span class="token function">Addr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// append到 []*main.User, maybe addr change</span>        val<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span>vv<span class="token punctuation">)</span>                           <span class="token comment">// []*main.User</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> rows<span class="token punctuation">.</span><span class="token function">Err</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过反射赋值流程，如果想知道具体的实现细节可以仔细阅读上面代码里面的注释</p><p><img src="http://img.github.mailjob.net/202302221448957.png" alt="图片"></p><ol><li>以上主要的思想就是通过reflect包来获取传入dst的Slice类型，并通过反射创建其包含的对象，具体的步骤和解释请仔细阅读注释和图例。</li><li>通过指定的json tag 可以把查询结果和结构体字段mapping起来，即使查询语句中字段不按照表结构顺序。</li><li>ScanSlice是通用的Scanner。</li><li>使用反射创建对象明显创建了多余的对象，没有传统的方式赋值高效，但是换来的巨大的灵活性在某些场景下是值得的。</li></ol><p>有了SQLBuilder和Scanner 我们就可以这样写查询函数了：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">FindUserReflect</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>User<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    b <span class="token operator">:=</span> SelectBuilder<span class="token punctuation">&#123;</span>builder<span class="token punctuation">:</span> <span class="token operator">&amp;</span>strings<span class="token punctuation">.</span>Builder<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>    sql<span class="token punctuation">,</span> args <span class="token operator">:=</span> b<span class="token punctuation">.</span>        <span class="token function">Select</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">,</span> <span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token string">"age"</span><span class="token punctuation">,</span> <span class="token string">"ctime"</span><span class="token punctuation">,</span> <span class="token string">"mtime"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>        <span class="token function">From</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>        <span class="token function">Where</span><span class="token punctuation">(</span><span class="token function">GT</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">GT</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>        <span class="token function">OrderBy</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>        <span class="token function">Limit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">.</span>        <span class="token function">Query</span><span class="token punctuation">(</span><span class="token punctuation">)</span>         rows<span class="token punctuation">,</span> err <span class="token operator">:=</span> db<span class="token punctuation">.</span><span class="token function">QueryContext</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> sql<span class="token punctuation">,</span> args<span class="token operator">...</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err    <span class="token punctuation">&#125;</span>    result <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>User<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    err <span class="token operator">=</span> <span class="token function">ScanSlice</span><span class="token punctuation">(</span>rows<span class="token punctuation">,</span> <span class="token operator">&amp;</span>result<span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> result<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>生成的查询SQL语句和args如下：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span><span class="token punctuation">,</span><span class="token identifier"><span class="token punctuation">`</span>name<span class="token punctuation">`</span></span><span class="token punctuation">,</span><span class="token identifier"><span class="token punctuation">`</span>age<span class="token punctuation">`</span></span><span class="token punctuation">,</span><span class="token identifier"><span class="token punctuation">`</span>ctime<span class="token punctuation">`</span></span><span class="token punctuation">,</span><span class="token identifier"><span class="token punctuation">`</span>mtime<span class="token punctuation">`</span></span> <span class="token keyword">FROM</span> <span class="token identifier"><span class="token punctuation">`</span>user<span class="token punctuation">`</span></span> <span class="token keyword">WHERE</span> <span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span> <span class="token operator">></span> ? <span class="token operator">AND</span> <span class="token identifier"><span class="token punctuation">`</span>age<span class="token punctuation">`</span></span> <span class="token operator">></span> ? <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> id <span class="token keyword">LIMIT</span> <span class="token number">20</span> <span class="token keyword">OFFSET</span> <span class="token number">0</span>  <span class="token punctuation">[</span><span class="token number">0</span> <span class="token number">0</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="自动生成">自动生成</h2><p>通过上面的使用的例子来看，我们的工作轻松了不少：</p><ul><li>第一：SQL语句不需要硬编码了；</li><li>第二：Scan不需要写大量结构体字段和的乏味的重复代码。</li></ul><p>着实帮我们省了很大的麻烦。但是查询字段还需要我们自己手写，像这种</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token function">Select</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">,</span> <span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token string">"age"</span><span class="token punctuation">,</span> <span class="token string">"ctime"</span><span class="token punctuation">,</span> <span class="token string">"mtime"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>其中传入的字段需要我们硬编码，我们可不可以再进一步，通过表结构定义来生成我们的golang结构体呢？答案是肯定的，要实现这一步我们需要一个SQL语句的<strong>解析器</strong>（<a href="https://github.com/xwb1989/sqlparser">https://github.com/xwb1989/sqlparser</a>)，把SQL DDL语句解析成go语言中如下的Table对象，其所包含的表名，列名、列类型、注释等都能获取到，再通过这些对象和写好的模板代码来生成我们实际业务使用的代码。</li></ul><p>Table对象如下：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> Table <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>    TableName   <span class="token builtin">string</span>    <span class="token comment">// table name</span>    GoTableName <span class="token builtin">string</span>    <span class="token comment">// go struct name</span>    PackageName <span class="token builtin">string</span>    <span class="token comment">// package name</span>    Fields      <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>Column <span class="token comment">// columns</span><span class="token punctuation">&#125;</span><span class="token keyword">type</span> Column <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>    ColumnName    <span class="token builtin">string</span> <span class="token comment">// column_name</span>    ColumnType    <span class="token builtin">string</span> <span class="token comment">// column_type</span>    ColumnComment <span class="token builtin">string</span> <span class="token comment">// column_comment</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用以上Table对象的模板代码：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token punctuation">.</span>GoTableName<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token operator">-</span> <span class="token keyword">range</span> <span class="token punctuation">.</span>Fields <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>        <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> <span class="token punctuation">.</span>GoColumnName <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>  <span class="token punctuation">.</span>GoColumnType <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token string">`json:"&#123;&#123; .ColumnName &#125;&#125;"`</span> <span class="token comment">// &#123;&#123; .ColumnComment &#125;&#125;</span>    <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token operator">-</span> end<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> <span class="token punctuation">(</span>    table <span class="token operator">=</span> <span class="token string">"&#123;&#123;.TableName&#125;&#125;"</span>    <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token operator">-</span> <span class="token keyword">range</span> <span class="token punctuation">.</span>Fields<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>        <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> <span class="token punctuation">.</span>GoColumnName<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token string">"&#123;&#123;.ColumnName&#125;&#125;"</span>     <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token operator">-</span> end <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">var</span> columns <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">&#123;</span>    <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token operator">-</span> <span class="token keyword">range</span> <span class="token punctuation">.</span>Fields<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>    <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> <span class="token punctuation">.</span>GoColumnName<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token operator">-</span> end <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过上面的模板我们用user表的建表SQL语句生成如下代码：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> User <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>    Id    <span class="token builtin">int64</span>     <span class="token string">`json:"id"`</span>    <span class="token comment">// id字段</span>    Name  <span class="token builtin">string</span>    <span class="token string">`json:"name"`</span>  <span class="token comment">// 名称</span>    Age   <span class="token builtin">int64</span>     <span class="token string">`json:"age"`</span>   <span class="token comment">// 年龄</span>    Ctime time<span class="token punctuation">.</span>Time <span class="token string">`json:"ctime"`</span> <span class="token comment">// 创建时间</span>    Mtime time<span class="token punctuation">.</span>Time <span class="token string">`json:"mtime"`</span> <span class="token comment">// 更新时间</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> <span class="token punctuation">(</span>    table <span class="token operator">=</span> <span class="token string">"user"</span>    Id <span class="token operator">=</span> <span class="token string">"id"</span>    Name <span class="token operator">=</span> <span class="token string">"name"</span>    Age <span class="token operator">=</span> <span class="token string">"age"</span>    Ctime <span class="token operator">=</span> <span class="token string">"ctime"</span>    Mtime <span class="token operator">=</span> <span class="token string">"mtime"</span><span class="token punctuation">)</span><span class="token keyword">var</span> Columns <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">&#123;</span><span class="token string">"id"</span><span class="token punctuation">,</span><span class="token string">"name"</span><span class="token punctuation">,</span><span class="token string">"age"</span><span class="token punctuation">,</span><span class="token string">"ctime"</span><span class="token punctuation">,</span><span class="token string">"mtime"</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>那么我们在查询的时候就可以这样使用</p><pre class="line-numbers language-none"><code class="language-none">Select(Columns...)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>通过模板自动生成代码，可以大大的减轻开发编码负担，使我们从繁重的代码中解放出来。</p><h2 id="reflect真的有必要吗？">reflect真的有必要吗？</h2><p>由于我们SELECT时选择查找的字段和顺序是不固定的，我们有可能 SELECT id, name, age FROM user，也可能 SELECT name, id FROM user，有很大的任意性，这种情况使用反射出来的结构体tag和查询的列名来确定映射关系是必须的。但是有一种情况我们不需要用到反射，而且是一种最常用的情况，即：查询的字段名和表结构的列名一致，且顺序一致。这时候我们可以这么写，通过DeepEqual来判断查询字段和表结构字段是否一致且顺序一致来决定是否通过反射还是通过传统方法来创建对象。用传统方式创建对象（如下图第12行）令我们编码痛苦，不过可以通过模板来自动生成下面的代码，以避免手写，这样既灵活方便好用，性能又没有损耗，看起来是一个比较完美的解决方案。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">FindUserNoReflect</span><span class="token punctuation">(</span>b <span class="token operator">*</span>SelectBuilder<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>User<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    sql<span class="token punctuation">,</span> args <span class="token operator">:=</span> b<span class="token punctuation">.</span><span class="token function">Query</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    rows<span class="token punctuation">,</span> err <span class="token operator">:=</span> db<span class="token punctuation">.</span><span class="token function">QueryContext</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> sql<span class="token punctuation">,</span> args<span class="token operator">...</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err    <span class="token punctuation">&#125;</span>    result <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>User<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token function">DeepEqual</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>column<span class="token punctuation">,</span> Columns<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">defer</span> rows<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> rows<span class="token punctuation">.</span><span class="token function">Next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            a <span class="token operator">:=</span> <span class="token operator">&amp;</span>User<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>            <span class="token keyword">if</span> err <span class="token operator">:=</span> rows<span class="token punctuation">.</span><span class="token function">Scan</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>a<span class="token punctuation">.</span>Id<span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">.</span>Name<span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">.</span>Age<span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">.</span>Ctime<span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">.</span>Mtime<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err            <span class="token punctuation">&#125;</span>            result <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> a<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> rows<span class="token punctuation">.</span><span class="token function">Err</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> rows<span class="token punctuation">.</span><span class="token function">Err</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> result<span class="token punctuation">,</span> <span class="token boolean">nil</span>    <span class="token punctuation">&#125;</span>    err <span class="token operator">=</span> <span class="token function">ScanSlice</span><span class="token punctuation">(</span>rows<span class="token punctuation">,</span> <span class="token operator">&amp;</span>result<span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> result<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="总结与展望">总结与展望</h2><h3 id="总结">总结</h3><ol><li>通过database/sql 库开发有较大痛点，ORM就是为了解决以上问题而生，其存在是有意义的。</li><li>ORM 两个关键的部分是SQLBuilder和Scanner的实现。</li><li>ORM Scanner 使用反射创建对象在性能上肯定会有一定的损失，但是带来极大的灵活性,同时在查询全表字段这种特殊情况下规避使用反射来提高性能。</li></ol><h3 id="展望">展望</h3><p>通过表结构，我们可以生成对应的结构体和持久层增删改查代码，我们再往前扩展一步，能否通过表结构生成的proto格式的message，以及一些常用的CRUD GRPC rpc接口定义。通过工具，我们甚至可以把前端的代码都生成好，实现半自动化编程。我想这个是值得期待的。</p><h2 id="参考资料">参考资料</h2><p><a href="https://github.com/ent/ent">https://github.com/ent/ent</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;为了提高开发效率和质量，我们常常需要ORM来帮助我们快速实现持久层增删改查API，目前go语言实现的ORM有很多种，他们都有自己的优劣点，有的实现简单，有的功能复杂，有的API十分优雅。在使用了多个类似的工具之后，总是会发现某些点无法满足解决我们生产环境中碰到的实际问题，比</summary>
      
    
    
    
    <category term="go" scheme="https://blog.mailjob.net/categories/go/"/>
    
    
    <category term="go" scheme="https://blog.mailjob.net/tags/go/"/>
    
  </entry>
  
  <entry>
    <title>Go项目多阶段构建Docker镜像</title>
    <link href="https://blog.mailjob.net/posts/1304110700.html"/>
    <id>https://blog.mailjob.net/posts/1304110700.html</id>
    <published>2022-08-01T14:29:42.000Z</published>
    <updated>2025-10-17T05:39:50.041Z</updated>
    
    <content type="html"><![CDATA[<p>在 Docker 17.05 版本之前，我们构建 Docker 镜像时，通常会采用两种方式：</p><h3 id="全部放入一个-Dockerfile">全部放入一个 Dockerfile</h3><p>一种方式是将所有的构建过程编包含在一个 <code>Dockerfile</code> 中，包括项目及其依赖库的编译、测试、打包等流程，这里可能会带来的一些问题：</p><ul><li>镜像层次多，镜像体积较大，部署时间变长</li><li>源代码存在泄露的风险</li></ul><p>例如，编写 <code>app.go</code> 文件，该程序输出 <code>Hello World!</code></p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"Hello World!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>编写 <code>Dockerfile.one</code> 文件</p><pre class="line-numbers language-docker" data-language="docker"><code class="language-docker"><span class="token instruction"><span class="token keyword">FROM</span> golang:alpine</span><span class="token instruction"><span class="token keyword">RUN</span> apk --no-cache add git ca-certificates</span><span class="token instruction"><span class="token keyword">WORKDIR</span> /go/src/github.com/go/helloworld/</span><span class="token instruction"><span class="token keyword">COPY</span> app.go .</span><span class="token instruction"><span class="token keyword">RUN</span> go get -d -v github.com/go-sql-driver/mysql <span class="token operator">\</span>  &amp;&amp; CGO_ENABLED=0 GOOS=linux go build -a -installsuffix cgo -o app . <span class="token operator">\</span>  &amp;&amp; cp /go/src/github.com/go/helloworld/app /root</span><span class="token instruction"><span class="token keyword">WORKDIR</span> /root/</span><span class="token instruction"><span class="token keyword">CMD</span> [<span class="token string">"./app"</span>]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>构建镜像</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">docker</span> build <span class="token parameter variable">-t</span> go/helloworld:1 <span class="token parameter variable">-f</span> Dockerfile.one <span class="token builtin class-name">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="多阶段构建的优势">多阶段构建的优势</h3><p>自 Docker 17.05 版本起，引入了多阶段构建（multi-stage builds）的概念，这种方式能有效解决上述问题。多阶段构建允许我们在一个 <code>Dockerfile</code> 中定义多个 <code>FROM</code> 指令，从而在构建过程中生成多个临时镜像，这样可以减小最终镜像的体积，并避免将源代码暴露在生产环境中。</p><h3 id="多阶段构建的示例">多阶段构建的示例</h3><p>以下是一个使用多阶段构建的示例，演示如何构建一个更为精简的 Docker 镜像。</p><p>编写 <code>Dockerfile</code> 文件：</p><pre class="line-numbers language-docker" data-language="docker"><code class="language-docker"><span class="token comment"># 第一阶段：构建阶段</span><span class="token instruction"><span class="token keyword">FROM</span> golang:alpine <span class="token keyword">AS</span> builder</span><span class="token instruction"><span class="token keyword">RUN</span> apk --no-cache add git ca-certificates</span><span class="token instruction"><span class="token keyword">WORKDIR</span> /go/src/github.com/go/helloworld/</span><span class="token instruction"><span class="token keyword">COPY</span> app.go .</span><span class="token comment"># 获取依赖并构建</span><span class="token instruction"><span class="token keyword">RUN</span> go get -d -v github.com/go-sql-driver/mysql <span class="token operator">\</span>  &amp;&amp; CGO_ENABLED=0 GOOS=linux go build -a -installsuffix cgo -o app .</span><span class="token comment"># 第二阶段：运行阶段</span><span class="token instruction"><span class="token keyword">FROM</span> alpine:latest</span><span class="token comment"># 复制构建好的二进制文件</span><span class="token instruction"><span class="token keyword">WORKDIR</span> /root/</span><span class="token instruction"><span class="token keyword">COPY</span> <span class="token options"><span class="token property">--from</span><span class="token punctuation">=</span><span class="token string">builder</span></span> /go/src/github.com/go/helloworld/app .</span><span class="token comment"># 运行应用程序</span><span class="token instruction"><span class="token keyword">CMD</span> [<span class="token string">"./app"</span>]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="构建镜像">构建镜像</h3><p>使用以下命令构建镜像：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">docker</span> build <span class="token parameter variable">-t</span> go/helloworld:multi <span class="token builtin class-name">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="运行镜像">运行镜像</h3><p>使用以下命令运行生成的镜像：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">docker</span> run <span class="token parameter variable">--rm</span> go/helloworld:multi<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="总结">总结</h3><p>多阶段构建 Docker 镜像的方式，不仅可以优化镜像的体积，还能提高构建的安全性，避免将源代码暴露到最终镜像中。通过使用 <code>COPY --from=builder</code> 指令，我们可以轻松地将需要的文件从构建阶段复制到运行阶段，确保最终镜像中仅包含必要的二进制文件和资源。这种构建方式对于构建微服务和容器化应用特别有用，能够提升持续集成和持续部署的效率。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在 Docker 17.05 版本之前，我们构建 Docker 镜像时，通常会采用两种方式：&lt;/p&gt;
&lt;h3 id=&quot;全部放入一个-Dockerfile&quot;&gt;全部放入一个 Dockerfile&lt;/h3&gt;
&lt;p&gt;一种方式是将所有的构建过程编包含在一个 &lt;code&gt;Dockerf</summary>
      
    
    
    
    <category term="go" scheme="https://blog.mailjob.net/categories/go/"/>
    
    
    <category term="go" scheme="https://blog.mailjob.net/tags/go/"/>
    
  </entry>
  
  <entry>
    <title>Go 环境搭建</title>
    <link href="https://blog.mailjob.net/posts/2723567567.html"/>
    <id>https://blog.mailjob.net/posts/2723567567.html</id>
    <published>2022-06-22T14:59:03.000Z</published>
    <updated>2025-10-17T05:39:50.043Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景">背景</h2><p>Go语言在 v1.14 之前使用 go path 模式，在 v1.14 之后采用 go mod 模式管理项目。该文章针对 v1.14 后的环境安装方式进行讲解。</p><h2 id="Mac系统安装">Mac系统安装</h2><p>MacOs 建议使用 <a href="https://brew.sh/index_zh-cn">brew</a> 包管理工具安装go语言环境，运行以下命令安装go</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ brew <span class="token function">install</span> go<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="配置环境变量">配置环境变量</h3><p><strong>进入配置文件</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># bash 终端</span>$ <span class="token function">vim</span> ~/.bash_profile<span class="token comment"># zsh 终端</span>$ <span class="token function">vim</span> ~/.zshrc<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>配置环境变量</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">export</span> <span class="token assign-left variable">GO111MODULE</span><span class="token operator">=</span>on<span class="token builtin class-name">export</span> <span class="token assign-left variable">GOPATH</span><span class="token operator">=</span><span class="token environment constant">$HOME</span>/go<span class="token builtin class-name">export</span> <span class="token assign-left variable">GOBIN</span><span class="token operator">=</span><span class="token variable">$GOPATH</span>/bin<span class="token builtin class-name">export</span> <span class="token assign-left variable">GOPROXY</span><span class="token operator">=</span>https://goproxy.cn,direct<span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span><span class="token environment constant">$PATH</span><span class="token builtin class-name">:</span><span class="token variable">$GOBIN</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>配置参数说明</strong></p><ul><li>GO111MODULE：go mod 模式，v1.14后默认 auto，常见配置为：auto、on、off，建议配置为 on</li><li>GOPATH：golang安装目录</li><li>GOBIN：golang执行目录</li><li>GOPROXY：配置国内镜像加速</li><li>PATH：配置环境变量</li></ul><p><strong>刷新环境变量</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># bash 终端</span>$ <span class="token builtin class-name">source</span> ~/.bash_profile<span class="token comment"># zsh 终端</span>$ <span class="token builtin class-name">source</span> ~/.zshrc<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>查看配置</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ go <span class="token function">env</span><span class="token assign-left variable">GO111MODULE</span><span class="token operator">=</span><span class="token string">"on"</span><span class="token assign-left variable">GOARCH</span><span class="token operator">=</span><span class="token string">"amd64"</span><span class="token assign-left variable">GOBIN</span><span class="token operator">=</span><span class="token string">"/Users/libin/go/bin"</span><span class="token assign-left variable">GOCACHE</span><span class="token operator">=</span><span class="token string">"/Users/libin/Library/Caches/go-build"</span><span class="token assign-left variable">GOENV</span><span class="token operator">=</span><span class="token string">"/Users/libin/Library/Application Support/go/env"</span><span class="token assign-left variable">GOEXE</span><span class="token operator">=</span><span class="token string">""</span><span class="token assign-left variable">GOEXPERIMENT</span><span class="token operator">=</span><span class="token string">""</span><span class="token assign-left variable">GOFLAGS</span><span class="token operator">=</span><span class="token string">""</span><span class="token assign-left variable">GOHOSTARCH</span><span class="token operator">=</span><span class="token string">"amd64"</span><span class="token assign-left variable">GOHOSTOS</span><span class="token operator">=</span><span class="token string">"darwin"</span><span class="token assign-left variable">GOINSECURE</span><span class="token operator">=</span><span class="token string">""</span><span class="token assign-left variable">GOMODCACHE</span><span class="token operator">=</span><span class="token string">"/Users/libin/go/pkg/mod"</span><span class="token assign-left variable">GONOPROXY</span><span class="token operator">=</span><span class="token string">""</span><span class="token assign-left variable">GONOSUMDB</span><span class="token operator">=</span><span class="token string">""</span><span class="token assign-left variable">GOOS</span><span class="token operator">=</span><span class="token string">"darwin"</span><span class="token assign-left variable">GOPATH</span><span class="token operator">=</span><span class="token string">"/Users/libin/go"</span><span class="token assign-left variable">GOPRIVATE</span><span class="token operator">=</span><span class="token string">""</span><span class="token assign-left variable">GOPROXY</span><span class="token operator">=</span><span class="token string">"https://goproxy.cn,direct"</span><span class="token assign-left variable">GOROOT</span><span class="token operator">=</span><span class="token string">"/usr/local/Cellar/go/1.18.3/libexec"</span><span class="token assign-left variable">GOSUMDB</span><span class="token operator">=</span><span class="token string">"sum.golang.org"</span><span class="token assign-left variable">GOTMPDIR</span><span class="token operator">=</span><span class="token string">""</span><span class="token assign-left variable">GOTOOLDIR</span><span class="token operator">=</span><span class="token string">"/usr/local/Cellar/go/1.18.3/libexec/pkg/tool/darwin_amd64"</span><span class="token assign-left variable">GOVCS</span><span class="token operator">=</span><span class="token string">""</span><span class="token assign-left variable">GOVERSION</span><span class="token operator">=</span><span class="token string">"go1.18.3"</span><span class="token comment"># 省略 ... ...</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Windows系统安装">Windows系统安装</h2><p>Go SDK 下载地址：<a href="https://golang.google.cn/dl/">https://golang.google.cn/dl/</a></p><table><thead><tr><th>File name</th><th>Kind</th><th>OS</th><th>Arch</th><th>Size</th><th>SHA256 Checksum</th></tr></thead><tbody><tr><td>go1.18.3.windows-amd64.msi</td><td>Installer</td><td>Windows</td><td>X86-64</td><td>130MB</td><td>692ee6225305ad909630c9cc152719a9bdb332e911d180cf3143a5b6a09cc863</td></tr></tbody></table><p>请根据自己的电脑芯片下载合适的版本，我的机器是 x86 芯片 64 位系统，所以我就下载此版本的软件了。</p><p>下载完成后，和其他应用类软件一样，需要选择一个你喜欢的目录安装此软件，接下来开始配置环境变量。</p><h3 id="配置环境变量-2">配置环境变量</h3><p>此电脑(右键属性) --&gt; 关于 --&gt; 高级系统设置 --&gt; 环境变量 --&gt; 新建</p><p><strong>建立以下环境变量</strong></p><pre class="line-numbers language-text" data-language="text"><code class="language-text">变量：GO111MODULE值：on变量：GOROOT值：E:\Go变量：GOPROXY值：https://goproxy.cn,direct<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>选择 <code>PATH</code>，点击编辑，点击新建，添加PATH环境变量</strong></p><pre class="line-numbers language-text" data-language="text"><code class="language-text">%GOROOT%\bin;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>打开 cmd 窗口，输入 <code>go env</code> ，测试是否配置成功</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">C:<span class="token punctuation">\</span>Users<span class="token punctuation">\</span><span class="token number">5885</span><span class="token operator"><span class="token file-descriptor important">0</span>></span>go <span class="token function">env</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;背景&quot;&gt;背景&lt;/h2&gt;
&lt;p&gt;Go语言在 v1.14 之前使用 go path 模式，在 v1.14 之后采用 go mod 模式管理项目。该文章针对 v1.14 后的环境安装方式进行讲解。&lt;/p&gt;
&lt;h2 id=&quot;Mac系统安装&quot;&gt;Mac系统安装&lt;/h2&gt;
&lt;p</summary>
      
    
    
    
    <category term="go" scheme="https://blog.mailjob.net/categories/go/"/>
    
    
    <category term="go" scheme="https://blog.mailjob.net/tags/go/"/>
    
  </entry>
  
  <entry>
    <title>Go Interface 合法验证</title>
    <link href="https://blog.mailjob.net/posts/2809645964.html"/>
    <id>https://blog.mailjob.net/posts/2809645964.html</id>
    <published>2022-05-15T11:12:19.000Z</published>
    <updated>2025-10-17T05:39:50.041Z</updated>
    
    <content type="html"><![CDATA[<h2 id="接口实现判断依据">接口实现判断依据</h2><ul><li>值方法集和接口匹配<ul><li>给接口变量赋值的不管是值还是指针对象,都ok,因为都包含值方法集</li></ul></li><li>指针方法集和接口匹配<ul><li>只能将指针对象赋值给接口变量,因为只有指针方法集和接口匹配</li><li>如果将值对象赋值给接口变量,会在编译期报错(会触发接口合理性检查机制)</li></ul></li></ul><h3 id="接口绑定">接口绑定</h3><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> Annimaler <span class="token keyword">interface</span> <span class="token punctuation">&#123;</span><span class="token function">Name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span><span class="token punctuation">&#125;</span><span class="token keyword">type</span> Dog <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token punctuation">(</span>d <span class="token operator">*</span>Dog<span class="token punctuation">)</span> <span class="token function">Name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token string">"二哈"</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span><span class="token keyword">var</span> i Annimaleri <span class="token operator">=</span> <span class="token operator">&amp;</span>Dog<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>i <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span>Dog<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token boolean">nil</span><span class="token punctuation">)</span>    i <span class="token operator">=</span> <span class="token function">new</span><span class="token punctuation">(</span>Dog<span class="token punctuation">)</span><span class="token comment">// i = Handle&#123;&#125; // 无法编译通过，因为 i 是指针类型，Handle&#123;&#125; 不是指针类型</span><span class="token comment">// 调用接口方法</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>i<span class="token punctuation">.</span><span class="token function">Name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>基于以上的代码，我们大致可以写出 go interface 合理性验证的代码如下：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> <span class="token boolean">_</span> Annimaler <span class="token operator">=</span> <span class="token operator">&amp;</span>Dog<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> <span class="token boolean">_</span> Annimaler <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span>Dog<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token boolean">nil</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>代码解释</strong></p><p>赋值的右边应该是断言类型的零值，也就是说 Dog 类型的零值等于Annimaler类型的零值。<br>如果是指针类型（如 *Annimaler）、切片和映射，这是 <code>nil</code>；<br>如果是结构类型，这是空结构。</p><blockquote><p>(*Dog)(nil) 是类型断言，就是把变量用 <code>nil</code> 代替，把 <code>nil</code> 转换成一个  <code>Dog</code> 类型的空指针后赋值给 <code>Annimaler</code></p></blockquote><h3 id="接收器-receiver-与接口，接口与具体方法集的匹配">接收器 (receiver) 与接口，接口与具体方法集的匹配</h3><p><strong>一个类型可以有值接收器方法集和指针接收器方法集</strong></p><p>使用值接收器的方法既可以通过值调用，也可以通过指针调用。带指针接收器的方法只能通过指针或 addressable values调用(其实和值调用类似)。</p><p>如果方法的接收者是值类型，无论调用者是对象还是对象指针，修改的都是对象的副本，不影响调用者；如果方法的接收者是指针类型，则调用者修改的是指针指向的对象本身。</p><p>通常我们使用指针作为方法的接收者的理由：</p><ul><li>使用指针方法能够修改接收者指向的值。</li><li>可以避免在每次调用方法时复制该值，在值的类型为大型结构体时，这样做会更加高效。</li></ul><p>在该代码中：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go">i <span class="token operator">=</span> <span class="token operator">&amp;</span>Dog<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>i<span class="token punctuation">.</span><span class="token function">Name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>编译是可以通过的，这就是通过 addressable values 调用的。</p><h2 id="参考资料">参考资料</h2><ul><li>uber-go/guide的中文翻译：<a href="https://github.com/xxjwxc/uber_go_guide_cn">https://github.com/xxjwxc/uber_go_guide_cn</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;接口实现判断依据&quot;&gt;接口实现判断依据&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;值方法集和接口匹配
&lt;ul&gt;
&lt;li&gt;给接口变量赋值的不管是值还是指针对象,都ok,因为都包含值方法集&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;指针方法集和接口匹配
&lt;ul&gt;
&lt;li&gt;只能将指针对</summary>
      
    
    
    
    <category term="go" scheme="https://blog.mailjob.net/categories/go/"/>
    
    
    <category term="go" scheme="https://blog.mailjob.net/tags/go/"/>
    
  </entry>
  
  <entry>
    <title>Go安装可执行工具</title>
    <link href="https://blog.mailjob.net/posts/1692897008.html"/>
    <id>https://blog.mailjob.net/posts/1692897008.html</id>
    <published>2022-05-11T02:07:34.000Z</published>
    <updated>2025-10-17T05:39:50.043Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言">前言</h2><p>在 Go 语言中，我们通常用借用一些工具作为可执行程序使用。但是按照官方文档安装过程中，总是会发生 <code>go get</code> 成功了，但是执行命令的时候总是提示命令未找到的错误，例如：<code>Mac: bash: /Users/libin/go/bin/xxx: No such file or directory</code>、<code>Windows: xxx不是内部或外部命令，也不是可运行的程序或批处理文件</code></p><p>在常用的工具中，拿 <a href="https://pkg.go.dev/google.golang.org/protobuf/cmd/protoc-gen-go">protoc-gen-go</a> 和 <a href="https://github.com/google/wire">wire</a> 来举例，需要文档的安装命令是：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">go get github.com/google/wire/cmd/wire<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果你在非 <code>go.mod</code> 执行该程序会提示找不到 <code>go.mod</code> 的错误，例如：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">localhost:bin libin$ go get github.com/google/wire/cmd/wirego: go.mod <span class="token function">file</span> not found <span class="token keyword">in</span> current directory or any parent directory.        <span class="token string">'go get'</span> is no longer supported outside a module.        To build and <span class="token function">install</span> a command, use <span class="token string">'go install'</span> with a version,        like <span class="token string">'go install example.com/cmd@latest'</span>        For <span class="token function">more</span> information, see https://golang.org/doc/go-get-install-deprecation        or run <span class="token string">'go help get'</span> or <span class="token string">'go help install'</span><span class="token builtin class-name">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果你在 <code>go.mod</code> 目录执行该命令，当然可以运行成功。但是问题是，虽然成功了，但是你无法在任意目录执行该应用程序，例如：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">localhost:bin libin$ wirebash: /Users/libin/go/bin/wire: No such <span class="token function">file</span> or directory<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="解决过程">解决过程</h2><h3 id="原因分析">原因分析</h3><p>在 Go 1.3 之前，由于采用的是 GOPATH 模式，用以上的安装方法当然没问题，因为下载的包，最后会编译为可执行程序后安装到项目的bin目录。</p><p>在 Go 1.4 之后，采用了 go mod 模式，如果使用 go get 安装，则无法安装到执行的 bin 目录，所以我们要做的是想办法让程序安装到 <code>$GOPATH/bin</code> 目录，这样你就可以在全局使用该执行程序了。</p><blockquote><p>小贴士：</p><p>可用 <code>go env</code> 命令查看更多 go 配置信息，包括 go 的环境变量配置。建议将<code>$GOPATH/bin</code>加入系统环境变量<code>$PATH</code>中。</p></blockquote><h3 id="解决方案">解决方案</h3><p>在任意目录处，使用 install 安装程序</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">go <span class="token function">install</span> github.com/google/wire/cmd/wire@latest<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>上面的命令会在<code>$GOPATH/bin</code>中生成一个可执行程序<code>wire</code>。这样我们就可以在任意目录使用该程序了。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">localhost:~ libin$ wire <span class="token builtin class-name">help</span>Usage: wire <span class="token operator">&lt;</span>flags<span class="token operator">></span> <span class="token operator">&lt;</span>subcommand<span class="token operator">></span> <span class="token operator">&lt;</span>subcommand args<span class="token operator">></span>Subcommands:        check            print any Wire errors found        commands         list all <span class="token builtin class-name">command</span> names        <span class="token function">diff</span>             output a <span class="token function">diff</span> between existing wire_gen.go files and what gen would generate        flags            describe all known top-level flags        gen              generate the wire_gen.go <span class="token function">file</span> <span class="token keyword">for</span> each package        <span class="token builtin class-name">help</span>             describe subcommands and their syntax        show             describe all top-level provider setsUse <span class="token string">"wire flags"</span> <span class="token keyword">for</span> a list of top-level flags<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="补充知识">补充知识</h3><p><strong>go install 和 go get 的区别</strong></p><ul><li><code>go install</code> 命令可以接受一个版本后缀了，（例如，go install <a href="http://sigs.k8s.io/kind@v0.9.0%EF%BC%89%EF%BC%8C%E5%B9%B6%E4%B8%94%E5%AE%83%E6%98%AF%E5%9C%A8%E6%A8%A1%E5%9D%97%E6%84%9F%E7%9F%A5%E7%9A%84%E6%A8%A1%E5%BC%8F%E4%B8%8B%E8%BF%90%E8%A1%8C%EF%BC%8C%E5%8F%AF%E5%BF%BD%E7%95%A5%E5%BD%93%E5%89%8D%E7%9B%AE%E5%BD%95%E6%88%96%E4%B8%8A%E5%B1%82%E7%9B%AE%E5%BD%95%E7%9A%84">sigs.k8s.io/kind@v0.9.0），并且它是在模块感知的模式下运行，可忽略当前目录或上层目录的</a> <code>go.mod</code> 文件。这对于在不影响主模块依赖的情况下，安装二进制很方便</li><li><code>go install</code> 被设计为“用于构建和安装二进制文件”， <code>go get</code> 则被设计为 “用于编辑 go.mod 变更依赖”</li></ul><p><strong>go get 其他参数介绍</strong></p><ul><li>-d 只下载不安装</li><li>-f 只有在你包含了 -u 参数的时候才有效，不让 -u 去验证 import 中的每一个都已经获取了，这对于本地 fork 的包特别有用</li><li>-fix 在获取源码之后先运行 fix，然后再去做其他的事情</li><li>-t 同时也下载需要为运行测试所需要的包</li><li><strong>-u 强制使用网络去更新包和它的依赖包</strong></li><li>-v 显示执行的命令</li></ul><p>原文链接：<a href="https://www.yipwinghong.com/2021/12/10/Go_engineering-specification-design">https://www.yipwinghong.com/2021/12/10/Go_engineering-specification-design</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;
&lt;p&gt;在 Go 语言中，我们通常用借用一些工具作为可执行程序使用。但是按照官方文档安装过程中，总是会发生 &lt;code&gt;go get&lt;/code&gt; 成功了，但是执行命令的时候总是提示命令未找到的错误，例如：&lt;code&gt;Mac: bash: /</summary>
      
    
    
    
    <category term="go" scheme="https://blog.mailjob.net/categories/go/"/>
    
    
    <category term="go" scheme="https://blog.mailjob.net/tags/go/"/>
    
  </entry>
  
  <entry>
    <title>Nginx基础知识总结</title>
    <link href="https://blog.mailjob.net/posts/31352437.html"/>
    <id>https://blog.mailjob.net/posts/31352437.html</id>
    <published>2022-05-01T10:06:51.000Z</published>
    <updated>2025-10-17T05:39:50.044Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer" /><h2 id="Nginx-概述">Nginx 概述</h2><p><img src="https://img-blog.csdnimg.cn/20210508090822890.png" alt="在这里插入图片描述"></p><p><strong>Nginx</strong> 是开源、高性能、高可靠的 <strong>Web</strong> 和<a href="https://so.csdn.net/so/search?q=%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86&amp;spm=1001.2101.3001.7020">反向代理</a>服务器，而且支持热部署，几乎可以做到 7 * 24 小时不间断运行，即使运行几个月也不需要重新启动，还能在不间断服务的情况下对软件版本进行热更新。性能是 <strong>Nginx</strong> 最重要的考量，其占用<a href="https://so.csdn.net/so/search?q=%E5%86%85%E5%AD%98&amp;spm=1001.2101.3001.7020">内存</a>少、并发能力强、能支持高达 5w 个并发连接数，最重要的是， <strong>Nginx</strong> 是免费的并可以商业化，配置使用也比较简单。</p><h2 id="Nginx-特点">Nginx 特点</h2><ul><li>高并发、高性能；</li><li>模块化架构使得它的扩展性非常好；</li><li>异步非阻塞的事件驱动模型这点和 Node.js 相似；</li><li>相对于其它服务器来说它可以连续几个月甚至更长而不需要重启服务器使得它具有高可靠性；</li><li>热部署、平滑升级；</li><li>完全开源，生态繁荣；</li></ul><h2 id="Nginx-作用">Nginx 作用</h2><p>Nginx 的最重要的几个使用场景：</p><ol><li>静态资源服务，通过本地文件系统提供服务；</li><li>反向代理服务，延伸出包括缓存、负载均衡等；</li><li>API 服务， OpenResty ；</li></ol><p>对于前端来说 Node.js 并不陌生， Nginx 和 Node.js 的很多理念类似， HTTP 服务器、事件驱动、异步非阻塞等，且 Nginx 的大部分功能使用 Node.js 也可以实现，但 Nginx 和 Node.js 并不冲突，都有自己擅长的领域。 Nginx 擅长于底层服务器端资源的处理（静态资源处理转发、反向代理，负载均衡等）， Node.js 更擅长上层具体业务逻辑的处理，两者可以完美组合。<br>用一张图表示：<br><img src="https://img-blog.csdnimg.cn/20210508091444609.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hlbGxvV3VkZQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="Nginx-安装">Nginx 安装</h2><p>本文演示的是 Linux centOS 7.x 的操作系统上安装 Nginx ，至于在其它操作系统上进行安装可以网上自行搜索，都非常简单的。</p><p>使用 yum 安装 Nginx ：</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">yum install nginx <span class="token operator">-</span>y<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>安装完成后，通过 <code>rpm -ql nginx</code>命令查看 Nginx 的安装信息：</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment"># Nginx配置文件</span><span class="token operator">/</span>etc/nginx/nginx<span class="token punctuation">.</span>conf <span class="token comment"># nginx 主配置文件</span><span class="token operator">/</span>etc/nginx/nginx<span class="token punctuation">.</span>conf<span class="token punctuation">.</span>default<span class="token comment"># 可执行程序文件</span><span class="token operator">/</span>usr/bin/nginx-upgrade<span class="token operator">/</span>usr/sbin/nginx<span class="token comment"># nginx库文件</span><span class="token operator">/</span>usr/lib/systemd/system/nginx<span class="token punctuation">.</span>service <span class="token comment"># 用于配置系统守护进程</span><span class="token operator">/</span>usr/lib64/nginx/modules <span class="token comment"># Nginx模块目录</span><span class="token comment"># 帮助文档</span><span class="token operator">/</span>usr/share/doc/nginx-1<span class="token punctuation">.</span>16<span class="token punctuation">.</span>1<span class="token operator">/</span>usr/share/doc/nginx-1<span class="token punctuation">.</span>16<span class="token punctuation">.</span>1/CHANGES<span class="token operator">/</span>usr/share/doc/nginx-1<span class="token punctuation">.</span>16<span class="token punctuation">.</span>1/README<span class="token operator">/</span>usr/share/doc/nginx-1<span class="token punctuation">.</span>16<span class="token punctuation">.</span>1/README<span class="token punctuation">.</span>dynamic<span class="token operator">/</span>usr/share/doc/nginx-1<span class="token punctuation">.</span>16<span class="token punctuation">.</span>1/UPGRADE-NOTES-1<span class="token punctuation">.</span>6-to-1<span class="token punctuation">.</span>10<span class="token comment"># 静态资源目录</span><span class="token operator">/</span>usr/share/nginx/html/404<span class="token punctuation">.</span>html<span class="token operator">/</span>usr/share/nginx/html/50x<span class="token punctuation">.</span>html<span class="token operator">/</span>usr/share/nginx/html/index<span class="token punctuation">.</span>html<span class="token comment"># 存放Nginx日志文件</span><span class="token operator">/</span><span class="token keyword">var</span><span class="token operator">/</span>log/nginx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>主要关注的文件夹有两个：</p><ol><li><code>/etc/nginx/conf.d/</code> 是子配置项存放处， <code>/etc/nginx/nginx.conf</code><br>主配置文件会默认把这个文件夹中所有子配置项都引入；</li><li><code>/usr/share/nginx/html/</code> 静态文件都放在这个文件夹，也可以根据你自己的习惯放在其他地方；</li></ol><h2 id="Nginx-常用命令">Nginx 常用命令</h2><p><strong>systemctl</strong> 系统命令：</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment"># 开机配置</span>systemctl enable nginx <span class="token comment"># 开机自动启动</span>systemctl disable nginx <span class="token comment"># 关闭开机自动启动</span><span class="token comment"># 启动Nginx</span>systemctl <span class="token function">start</span> nginx <span class="token comment"># 启动Nginx成功后，可以直接访问主机IP，此时会展示Nginx默认页面</span><span class="token comment"># 停止Nginx</span>systemctl stop nginx<span class="token comment"># 重启Nginx</span>systemctl restart nginx<span class="token comment"># 重新加载Nginx</span>systemctl reload nginx<span class="token comment"># 查看 Nginx 运行状态</span>systemctl status nginx<span class="token comment"># 查看Nginx进程</span><span class="token function">ps</span> <span class="token operator">-</span>ef <span class="token punctuation">|</span> grep nginx<span class="token comment"># 杀死Nginx进程</span><span class="token function">kill</span> <span class="token operator">-</span>9 pid <span class="token comment"># 根据上面查看到的Nginx进程号，杀死Nginx进程，-9 表示强制结束进程</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>Nginx</strong> 应用程序命令：</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">nginx <span class="token operator">-</span>s reload  <span class="token comment"># 向主进程发送信号，重新加载配置文件，热重启</span>nginx <span class="token operator">-</span>s reopen <span class="token comment"># 重启 Nginx</span>nginx <span class="token operator">-</span>s stop    <span class="token comment"># 快速关闭</span>nginx <span class="token operator">-</span>s quit    <span class="token comment"># 等待工作进程处理完成后关闭</span>nginx <span class="token operator">-</span>T         <span class="token comment"># 查看当前 Nginx 最终的配置</span>nginx <span class="token operator">-</span>t         <span class="token comment"># 检查配置是否有问题</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Nginx-核心配置">Nginx 核心配置</h2><h3 id="配置文件结构">配置文件结构</h3><p>Nginx 的典型配置示例：</p><pre class="line-numbers language-ini" data-language="ini"><code class="language-ini"><span class="token comment"># main段配置信息</span>user  nginx;                        # 运行用户，默认即是nginx，可以不进行设置worker_processes  auto;             # Nginx 进程数，一般设置为和 CPU 核数一样error_log  /var/log/nginx/error.log warn;   # Nginx 的错误日志存放目录pid        /var/run/nginx.pid;      # Nginx 服务启动时的 pid 存放位置<span class="token comment"># events段配置信息</span>events &#123;    use epoll;     # 使用epoll的I/O模型(如果你不知道Nginx该使用哪种轮询方法，会自动选择一个最适合你操作系统的)    worker_connections 1024;   # 每个进程允许最大并发数&#125;<span class="token comment"># http段配置信息</span><span class="token comment"># 配置使用最频繁的部分，代理、缓存、日志定义等绝大多数功能和第三方模块的配置都在这里设置</span>http &#123;     <span class="token comment"># 设置日志模式</span>    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '                      '$status $body_bytes_sent "$http_referer" '                      '"$http_user_agent" "$http_x_forwarded_for"';    access_log  /var/log/nginx/access.log  main;   # Nginx访问日志存放位置    sendfile            on;   # 开启高效传输模式    tcp_nopush          on;   # 减少网络报文段的数量    tcp_nodelay         on;    keepalive_timeout   65;   # 保持连接的时间，也叫超时时间，单位秒    types_hash_max_size 2048;    include             /etc/nginx/mime.types;      # 文件扩展名与类型映射表    default_type        application/octet-stream;   # 默认文件类型    include /etc/nginx/conf.d/*.conf;   # 加载子配置项        <span class="token comment"># server段配置信息</span>    server &#123;    listen       80;       # 配置监听的端口    server_name  localhost;    # 配置的域名          <span class="token comment"># location段配置信息</span>    location / &#123;    root   /usr/share/nginx/html;  # 网站根目录    index  index.html index.htm;   # 默认首页文件    deny 172.168.22.11;   # 禁止访问的ip地址，可以为all    allow 172.168.33.44；# 允许访问的ip地址，可以为all    &#125;        error_page 500 502 503 504 /50x.html;  # 默认50x对应的访问页面    error_page 400 404 error.html;   # 同上    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>main 全局配置，对全局生效；</li><li>events 配置影响 Nginx 服务器与用户的网络连接；</li><li>http 配置代理，缓存，日志定义等绝大多数功能和第三方模块的配置；</li><li>server 配置虚拟主机的相关参数，一个 http 块中可以有多个 server 块；</li><li>location 用于配置匹配的 uri ；</li><li>upstream 配置后端服务器具体地址，负载均衡配置不可或缺的部分；</li></ul><p>用一张图清晰的展示它的层级结构：<br><img src="https://img-blog.csdnimg.cn/20210508093616184.png" alt="在这里插入图片描述"></p><h3 id="配置文件-main-段核心参数">配置文件 main 段核心参数</h3><h4 id="user">user</h4><p>指定运行 Nginx 的 woker 子进程的属主和属组，其中组可以不指定。</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">user USERNAME <span class="token namespace">[GROUP]</span>user nginx lion<span class="token punctuation">;</span> <span class="token comment"># 用户是nginx;组是lion</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="pid">pid</h4><p>指定运行 Nginx master 主进程的 pid 文件存放路径。</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">pid <span class="token operator">/</span>opt/nginx/logs/nginx<span class="token punctuation">.</span>pid <span class="token comment"># master主进程的的pid存放在nginx.pid的文件</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="worker-rlimit-nofile-number">worker_rlimit_nofile_number</h4><p>指定 worker 子进程可以打开的最大文件句柄数。</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">worker_rlimit_nofile 20480<span class="token punctuation">;</span> <span class="token comment"># 可以理解成每个worker子进程的最大连接数量。</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="worker-rlimit-core">worker_rlimit_core</h4><p>指定 worker 子进程异常终止后的 core 文件，用于记录分析问题。</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">worker_rlimit_core 50M<span class="token punctuation">;</span> <span class="token comment"># 存放大小限制</span>working_directory <span class="token operator">/</span>opt/nginx/tmp<span class="token punctuation">;</span> <span class="token comment"># 存放目录</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="worker-processes-number">worker_processes_number</h4><p>指定 Nginx 启动的 worker 子进程数量。</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">worker_processes 4<span class="token punctuation">;</span> <span class="token comment"># 指定具体子进程数量</span>worker_processes auto<span class="token punctuation">;</span> <span class="token comment"># 与当前cpu物理核心数一致</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="worker-cpu-affinity">worker_cpu_affinity</h4><p>将每个 worker 子进程与我们的 cpu 物理核心绑定。</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">worker_cpu_affinity 0001 0010 0100 1000<span class="token punctuation">;</span> <span class="token comment"># 4个物理核心，4个worker子进程</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/20210508093924221.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hlbGxvV3VkZQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>将每个 worker 子进程与特定 CPU 物理核心绑定，优势在于，避免同一个 worker 子进程在不同的 CPU 核心上切换，缓存失效，降低性能。但其并不能真正的避免进程切换。</p><h4 id="worker-priority">worker_priority</h4><p>指定 worker 子进程的 nice 值，以调整运行 Nginx 的优先级，通常设定为负值，以优先调用 Nginx 。</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">worker_priority <span class="token operator">-</span>10<span class="token punctuation">;</span> <span class="token comment"># 120-10=110，110就是最终的优先级</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Linux 默认进程的优先级值是120，值越小越优先； nice 定范围为 -20 到 +19 。<br>[备注] 应用的默认优先级值是120加上 nice 值等于它最终的值，这个值越小，优先级越高。</p><h4 id="worker-shutdown-timeout">worker_shutdown_timeout</h4><p>指定 worker 子进程优雅退出时的超时时间。</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">worker_shutdown_timeout 5s<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="timer-resolution">timer_resolution</h4><p>worker 子进程内部使用的计时器精度，调整时间间隔越大，系统调用越少，有利于性能提升；反之，系统调用越多，性能下降。</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">timer_resolution 100ms<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在 Linux 系统中，用户需要获取计时器时需要向操作系统内核发送请求，有请求就必然会有开销，因此这个间隔越大开销就越小。</p><h4 id="daemon">daemon</h4><p>指定 Nginx 的运行方式，前台还是后台，前台用于调试，后台用于生产。</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">daemon off<span class="token punctuation">;</span> <span class="token comment"># 默认是on，后台运行模式</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="配置文件-events-段核心参数">配置文件 events 段核心参数</h3><h4 id="use">use</h4><p>Nginx 使用何种事件驱动模型。</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">use method<span class="token punctuation">;</span> <span class="token comment"># 不推荐配置它，让nginx自己选择</span>method 可选值为：<span class="token function">select</span>、poll、kqueue、epoll、<span class="token operator">/</span>dev/poll、eventport<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="worker-connections">worker_connections</h4><p>worker 子进程能够处理的最大并发连接数。</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">worker_connections 1024 <span class="token comment"># 每个子进程的最大连接数为1024</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="accept-mutex">accept_mutex</h4><p>是否打开负载均衡互斥锁。</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">accept_mutex on <span class="token comment"># 默认是off关闭的，这里推荐打开</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="server-name-指令">server_name 指令</h3><p>指定虚拟主机域名。</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">server_name name1 name2 name3<span class="token comment"># 示例：</span>server_name www<span class="token punctuation">.</span>nginx<span class="token punctuation">.</span>com<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>域名匹配的四种写法：</p><ul><li>精确匹配： server_name <a href="http://www.nginx.com">www.nginx.com</a> ;</li><li>左侧通配： server_name *.nginx.com ;</li><li>右侧统配： server_name www.nginx.* ;</li><li>正则匹配： server_name ~^www.nginx.*$ ;</li></ul><p>匹配优先级**：精确匹配 &gt; 左侧通配符匹配 &gt; 右侧通配符匹配 &gt; 正则表达式匹配**<br>server_name 配置实例：<br>1、配置本地 DNS 解析 vim /etc/hosts （ macOS 系统）</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment"># 添加如下内容，其中 121.42.11.34 是阿里云服务器IP地址</span>121<span class="token punctuation">.</span>42<span class="token punctuation">.</span>11<span class="token punctuation">.</span>34 www<span class="token punctuation">.</span>nginx-test<span class="token punctuation">.</span>com121<span class="token punctuation">.</span>42<span class="token punctuation">.</span>11<span class="token punctuation">.</span>34 mail<span class="token punctuation">.</span>nginx-test<span class="token punctuation">.</span>com121<span class="token punctuation">.</span>42<span class="token punctuation">.</span>11<span class="token punctuation">.</span>34 www<span class="token punctuation">.</span>nginx-test<span class="token punctuation">.</span>org121<span class="token punctuation">.</span>42<span class="token punctuation">.</span>11<span class="token punctuation">.</span>34 doc<span class="token punctuation">.</span>nginx-test<span class="token punctuation">.</span>com121<span class="token punctuation">.</span>42<span class="token punctuation">.</span>11<span class="token punctuation">.</span>34 www<span class="token punctuation">.</span>nginx-test<span class="token punctuation">.</span>cn121<span class="token punctuation">.</span>42<span class="token punctuation">.</span>11<span class="token punctuation">.</span>34 fe<span class="token punctuation">.</span>nginx-test<span class="token punctuation">.</span>club<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>[注意] 这里使用的是虚拟域名进行测试，因此需要配置本地 DNS 解析，如果使用阿里云上购买的域名，则需要在阿里云上设置好域名解析。<br>2、配置阿里云 Nginx ，vim /etc/nginx/nginx.conf</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment"># 这里只列举了http端中的sever端配置</span><span class="token comment"># 左匹配</span>server <span class="token punctuation">&#123;</span>listen80<span class="token punctuation">;</span>server_name<span class="token operator">*</span><span class="token punctuation">.</span>nginx-test<span class="token punctuation">.</span>com<span class="token punctuation">;</span>root<span class="token operator">/</span>usr/share/nginx/html/nginx-test/left-match/<span class="token punctuation">;</span>location <span class="token operator">/</span> <span class="token punctuation">&#123;</span>index index<span class="token punctuation">.</span>html<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment"># 正则匹配</span>server <span class="token punctuation">&#123;</span>listen80<span class="token punctuation">;</span>server_name~^<span class="token punctuation">.</span><span class="token operator">*</span>\<span class="token punctuation">.</span>nginx-test\<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">*</span>$<span class="token punctuation">;</span>root<span class="token operator">/</span>usr/share/nginx/html/nginx-test/reg-match/<span class="token punctuation">;</span>location <span class="token operator">/</span> <span class="token punctuation">&#123;</span>index index<span class="token punctuation">.</span>html<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment"># 右匹配</span>server <span class="token punctuation">&#123;</span>listen80<span class="token punctuation">;</span>server_namewww<span class="token punctuation">.</span>nginx-test<span class="token punctuation">.</span><span class="token operator">*</span><span class="token punctuation">;</span>root<span class="token operator">/</span>usr/share/nginx/html/nginx-test/right-match/<span class="token punctuation">;</span>location <span class="token operator">/</span> <span class="token punctuation">&#123;</span>index index<span class="token punctuation">.</span>html<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment"># 完全匹配</span>server <span class="token punctuation">&#123;</span>listen80<span class="token punctuation">;</span>server_namewww<span class="token punctuation">.</span>nginx-test<span class="token punctuation">.</span>com<span class="token punctuation">;</span>root<span class="token operator">/</span>usr/share/nginx/html/nginx-test/all-match/<span class="token punctuation">;</span>location <span class="token operator">/</span> <span class="token punctuation">&#123;</span>index index<span class="token punctuation">.</span>html<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3、访问分析</p><ul><li>当访问 <a href="http://www.nginx-test.com">www.nginx-test.com</a> 时，都可以被匹配上，因此选择优先级最高的“完全匹配”；</li><li>当访问 <a href="http://mail.nginx-test.com">mail.nginx-test.com</a> 时，会进行“左匹配”；</li><li>当访问 <a href="http://www.nginx-test.org">www.nginx-test.org</a> 时，会进行“右匹配”；</li><li>当访问 <a href="http://doc.nginx-test.com">doc.nginx-test.com</a> 时，会进行“左匹配”；</li><li>当访问 <a href="http://www.nginx-test.cn">www.nginx-test.cn</a> 时，会进行“右匹配”；</li><li>当访问 fe.nginx-test.club 时，会进行“正则匹配”；</li></ul><h3 id="root">root</h3><p>指定静态资源目录位置，它可以写在 http 、 server 、 location 等配置中。</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">root path例如：location <span class="token operator">/</span>image <span class="token punctuation">&#123;</span>root <span class="token operator">/</span>opt/nginx/static<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>当用户访问 www<span class="token punctuation">.</span>test<span class="token punctuation">.</span>com/image/1<span class="token punctuation">.</span>png 时，实际在服务器找的路径是 <span class="token operator">/</span>opt/nginx/static/image/1<span class="token punctuation">.</span>png<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>[注意] root 会将定义路径与 URI 叠加， alias 则只取定义路径。</p><h3 id="alias">alias</h3><p>它也是指定静态资源目录位置，它只能写在 location 中。</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">location <span class="token operator">/</span>image <span class="token punctuation">&#123;</span>alias <span class="token operator">/</span>opt/nginx/static/image/<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>当用户访问 www<span class="token punctuation">.</span>test<span class="token punctuation">.</span>com/image/1<span class="token punctuation">.</span>png 时，实际在服务器找的路径是 <span class="token operator">/</span>opt/nginx/static/image/1<span class="token punctuation">.</span>png<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>[注意] 使用 alias 末尾一定要添加 / ，并且它只能位于 location 中。</p><h3 id="location">location</h3><p>配置路径。</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">location <span class="token punctuation">[</span> = <span class="token punctuation">|</span> ~ <span class="token punctuation">|</span> ~<span class="token operator">*</span> <span class="token punctuation">|</span> ^~ <span class="token punctuation">]</span> uri <span class="token punctuation">&#123;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>匹配规则：</p><ul><li>= 精确匹配；</li><li>~ 正则匹配，区分大小写；</li><li>~* 正则匹配，不区分大小写；</li><li>^~ 匹配到即停止搜索；</li></ul><p>匹配优先级： <strong>= &gt; ^~ &gt; ~ &gt; ~* &gt; 不带任何字符。</strong><br>实例：</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">server <span class="token punctuation">&#123;</span>  listen80<span class="token punctuation">;</span>  server_namewww<span class="token punctuation">.</span>nginx-test<span class="token punctuation">.</span>com<span class="token punctuation">;</span>    <span class="token comment"># 只有当访问 www.nginx-test.com/match_all/ 时才会匹配到/usr/share/nginx/html/match_all/index.html</span>  location = <span class="token operator">/</span>match_all/ <span class="token punctuation">&#123;</span>      root<span class="token operator">/</span>usr/share/nginx/html      index index<span class="token punctuation">.</span>html  <span class="token punctuation">&#125;</span>    <span class="token comment"># 当访问 www.nginx-test.com/1.jpg 等路径时会去 /usr/share/nginx/images/1.jpg 找对应的资源</span>  location ~ \<span class="token punctuation">.</span><span class="token punctuation">(</span>jpeg<span class="token punctuation">|</span>jpg<span class="token punctuation">|</span>png<span class="token punctuation">|</span>svg<span class="token punctuation">)</span>$ <span class="token punctuation">&#123;</span>  root <span class="token operator">/</span>usr/share/nginx/images<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>    <span class="token comment"># 当访问 www.nginx-test.com/bbs/ 时会匹配上 /usr/share/nginx/html/bbs/index.html</span>  location ^~ <span class="token operator">/</span>bbs/ <span class="token punctuation">&#123;</span>  root <span class="token operator">/</span>usr/share/nginx/html<span class="token punctuation">;</span>    index index<span class="token punctuation">.</span>html index<span class="token punctuation">.</span>htm<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="location-中的反斜线">location 中的反斜线</h4><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">location <span class="token operator">/</span>test <span class="token punctuation">&#123;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span>location <span class="token operator">/</span>test/ <span class="token punctuation">&#123;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>不带 / 当访问 <a href="http://www.nginx-test.com/test">www.nginx-test.com/test</a> 时， Nginx 先找是否有 test 目录，如果有则找 test<br>目录下的 index.html ；如果没有 test 目录， nginx 则会找是否有 test 文件。</li><li>带 / 当访问 <a href="http://www.nginx-test.com/test">www.nginx-test.com/test</a> 时， Nginx 先找是否有 test 目录，如果有则找 test<br>目录下的 index.html ，如果没有它也不会去找是否存在 test 文件。</li></ul><h4 id="return">return</h4><p>停止处理请求，直接返回响应码或重定向到其他 URL ；执行 return 指令后， location 中后续指令将不会被执行。</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token keyword">return</span> code <span class="token namespace">[text]</span><span class="token punctuation">;</span><span class="token keyword">return</span> code URL<span class="token punctuation">;</span><span class="token keyword">return</span> URL<span class="token punctuation">;</span>例如：location <span class="token operator">/</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> 404<span class="token punctuation">;</span> <span class="token comment"># 直接返回状态码</span><span class="token punctuation">&#125;</span>location <span class="token operator">/</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> 404 <span class="token string">"pages not found"</span><span class="token punctuation">;</span> <span class="token comment"># 返回状态码 + 一段文本</span><span class="token punctuation">&#125;</span>location <span class="token operator">/</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> 302 <span class="token operator">/</span>bbs <span class="token punctuation">;</span> <span class="token comment"># 返回状态码 + 重定向地址</span><span class="token punctuation">&#125;</span>location <span class="token operator">/</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> https:<span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>baidu<span class="token punctuation">.</span>com <span class="token punctuation">;</span> <span class="token comment"># 返回重定向地址</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="rewrite">rewrite</h3><p>根据指定正则表达式匹配规则，重写 URL 。</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">语法：rewrite 正则表达式 要替换的内容 <span class="token namespace">[flag]</span><span class="token punctuation">;</span>上下文：server、location、<span class="token keyword">if</span>示例：rewirte <span class="token operator">/</span>images/<span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token operator">*</span>\<span class="token punctuation">.</span>jpg<span class="token punctuation">)</span>$ <span class="token operator">/</span>pic/<span class="token variable">$1</span><span class="token punctuation">;</span> <span class="token comment"># $1是前面括号(.*\.jpg)的反向引用</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>flag 可选值的含义：</p><ul><li>last 重写后的 URL 发起新请求，再次进入 server 段，重试 location 的中的匹配；</li><li>break 直接使用重写后的 URL ，不再匹配其它 location 中语句；</li><li>redirect 返回302临时重定向；</li><li>permanent 返回301永久重定向；</li></ul><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">server<span class="token punctuation">&#123;</span>  listen 80<span class="token punctuation">;</span>  server_name fe<span class="token punctuation">.</span>lion<span class="token punctuation">.</span>club<span class="token punctuation">;</span> <span class="token comment"># 要在本地hosts文件进行配置</span>  root html<span class="token punctuation">;</span>  location <span class="token operator">/</span>search <span class="token punctuation">&#123;</span>  rewrite ^<span class="token operator">/</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token operator">*</span><span class="token punctuation">)</span> https:<span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>baidu<span class="token punctuation">.</span>com redirect<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>    location <span class="token operator">/</span>images <span class="token punctuation">&#123;</span>  rewrite <span class="token operator">/</span>images/<span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">/</span>pics/<span class="token variable">$1</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>    location <span class="token operator">/</span>pics <span class="token punctuation">&#123;</span>  rewrite <span class="token operator">/</span>pics/<span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">/</span>photos/<span class="token variable">$1</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>    location <span class="token operator">/</span>photos <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>按照这个配置我们来分析：</p><ul><li>当访问 fe.lion.club/search 时，会自动帮我们重定向到 <a href="https://www.baidu.com">https://www.baidu.com</a>。</li><li>当访问 fe.lion.club/images/1.jpg 时，第一步重写 URL 为 fe.lion.club/pics/1.jpg<br>，找到 pics 的 location ，继续重写 URL 为 fe.lion.club/photos/1.jpg ，找到 /photos<br>的 location 后，去 html/photos 目录下寻找 1.jpg 静态资源。</li></ul><h3 id="if-指令">if 指令</h3><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">语法：<span class="token keyword">if</span> <span class="token punctuation">(</span>condition<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span>上下文：server、location示例：<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$http_user_agent</span> ~ Chrome<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  rewrite <span class="token operator">/</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">/</span>browser/<span class="token variable">$1</span> <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>condition 判断条件：</p><ul><li>$variable 仅为变量时，值为空或以0开头字符串都会被当做 false 处理；</li><li>= 或 != 相等或不等；</li><li>~ 正则匹配；</li><li>! ~ 非正则匹配；</li><li>~* 正则匹配，不区分大小写；</li><li>-f 或 ! -f 检测文件存在或不存在；</li><li>-d 或 ! -d 检测目录存在或不存在；</li><li>-e 或 ! -e 检测文件、目录、符号链接等存在或不存在；</li><li>-x 或 ! -x 检测文件可以执行或不可执行；</li></ul><p>实例：</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">server <span class="token punctuation">&#123;</span>  listen 8080<span class="token punctuation">;</span>  server_name localhost<span class="token punctuation">;</span>  root html<span class="token punctuation">;</span>    location <span class="token operator">/</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token variable">$uri</span> = <span class="token string">"/images/"</span> <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    rewrite <span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">/</span>pics/ <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当访问 localhost:8080/images/ 时，会进入 if 判断里面执行 rewrite 命令。</p><h3 id="autoindex">autoindex</h3><p>用户请求以 / 结尾时，列出目录结构，可以用于快速搭建静态资源下载网站。<br>autoindex.conf 配置信息：</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">server <span class="token punctuation">&#123;</span>  listen 80<span class="token punctuation">;</span>  server_name fe<span class="token punctuation">.</span>lion-test<span class="token punctuation">.</span>club<span class="token punctuation">;</span>    location <span class="token operator">/</span>download/ <span class="token punctuation">&#123;</span>    root <span class="token operator">/</span>opt/source<span class="token punctuation">;</span>        autoindex on<span class="token punctuation">;</span> <span class="token comment"># 打开 autoindex，，可选参数有 on | off</span>    autoindex_exact_size on<span class="token punctuation">;</span> <span class="token comment"># 修改为off，以KB、MB、GB显示文件大小，默认为on，以bytes显示出⽂件的确切⼤⼩</span>    autoindex_format html<span class="token punctuation">;</span> <span class="token comment"># 以html的方式进行格式化，可选参数有 html | json | xml</span>    autoindex_localtime off<span class="token punctuation">;</span> <span class="token comment"># 显示的⽂件时间为⽂件的服务器时间。默认为off，显示的⽂件时间为GMT时间</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当访问 <a href="http://fe.lion.com/download/">fe.lion.com/download/</a> 时，会把服务器 /opt/source/download/ 路径下的文件展示出来，如下图所示：<br><img src="https://img-blog.csdnimg.cn/202105080940050.png" alt="在这里插入图片描述"></p><h3 id="变量">变量</h3><p>Nginx 提供给使用者的变量非常多，但是终究是一个完整的请求过程所产生数据， Nginx 将这些数据以变量的形式提供给使用者。</p><p>下面列举些项目中常用的变量：</p><table><thead><tr><th>变量名</th><th>含义</th></tr></thead><tbody><tr><td>remote_addr</td><td>客户端 IP 地址</td></tr><tr><td>remote_port</td><td>客户端端口</td></tr><tr><td>server_addr</td><td>服务端 IP 地址</td></tr><tr><td>server_port</td><td>服务端端口</td></tr><tr><td>server_protocol</td><td>服务端协议</td></tr><tr><td>binary_remote_addr</td><td>二进制格式的客户端 IP 地址</td></tr><tr><td>connection TCP</td><td>连接的序号，递增</td></tr><tr><td>connection_request TCP</td><td>连接当前的请求数量uri 请求的URL，不包含参数</td></tr><tr><td>request_uri</td><td>请求的URL，包含参数scheme 协议名， http 或 https request_method 请求方法</td></tr><tr><td>request_length</td><td>全部请求的长度，包含请求行、请求头、请求体args 全部参数字符串arg_参数名 获取特定参数值</td></tr><tr><td>is_args URL</td><td>中是否有参数，有的话返回 ? ，否则返回空</td></tr><tr><td>query_string</td><td>与 args 相同</td></tr><tr><td>host</td><td>请求信息中的 Host ，如果请求中没有 Host 行，则在请求头中找，最后使用 nginx 中设置的 server_name 。</td></tr><tr><td>http_user_agent</td><td>用户浏览器</td></tr><tr><td>http_referer</td><td>从哪些链接过来的请求</td></tr><tr><td>http_via</td><td>每经过一层代理服务器，都会添加相应的信息</td></tr><tr><td>http_cookie</td><td>获取用户 cookie</td></tr><tr><td>request_time</td><td>处理请求已消耗的时间</td></tr><tr><td>https</td><td>是否开启了 https ，是则返回 on ，否则返回空</td></tr><tr><td>request_filename</td><td>磁盘文件系统待访问文件的完整路径</td></tr><tr><td>document_root</td><td>由 URI 和 root/alias 规则生成的文件夹路径</td></tr><tr><td>limit_rate</td><td>返回响应时的速度上限值</td></tr></tbody></table><p>实例演示 var.conf ：</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">server<span class="token punctuation">&#123;</span>listen 8081<span class="token punctuation">;</span>server_name <span class="token keyword">var</span><span class="token punctuation">.</span>lion-test<span class="token punctuation">.</span>club<span class="token punctuation">;</span>root <span class="token operator">/</span>usr/share/nginx/html<span class="token punctuation">;</span>location <span class="token operator">/</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> 200 <span class="token string">"remote_addr: <span class="token variable">$remote_addr</span>remote_port: <span class="token variable">$remote_port</span>server_addr: <span class="token variable">$server_addr</span>server_port: <span class="token variable">$server_port</span>server_protocol: <span class="token variable">$server_protocol</span>binary_remote_addr: <span class="token variable">$binary_remote_addr</span>connection: <span class="token variable">$connection</span>uri: <span class="token variable">$uri</span>request_uri: <span class="token variable">$request_uri</span>scheme: <span class="token variable">$scheme</span>request_method: <span class="token variable">$request_method</span>request_length: <span class="token variable">$request_length</span>args: <span class="token variable">$args</span>arg_pid: <span class="token variable">$arg_pid</span>is_args: <span class="token variable">$is_args</span>query_string: <span class="token variable">$query_string</span>host: <span class="token variable">$host</span>http_user_agent: <span class="token variable">$http_user_agent</span>http_referer: <span class="token variable">$http_referer</span>http_via: <span class="token variable">$http_via</span>request_time: <span class="token variable">$request_time</span>https: <span class="token variable">$https</span>request_filename: <span class="token variable">$request_filename</span>document_root: <span class="token variable">$document_root</span>"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当我们访问 <a href="http://var.lion-test.club:8081/test?pid=121414&amp;cid=sadasd">http://var.lion-test.club:8081/test?pid=121414&amp;cid=sadasd</a> 时，由于 Nginx 中写了 return 方法，因此 chrome 浏览器会默认为我们下载一个文件，下面展示的就是下载的文件内容：</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">remote_addr: 27<span class="token punctuation">.</span>16<span class="token punctuation">.</span>220<span class="token punctuation">.</span>84remote_port: 56838server_addr: 172<span class="token punctuation">.</span>17<span class="token punctuation">.</span>0<span class="token punctuation">.</span>2server_port: 8081server_protocol: HTTP/1<span class="token punctuation">.</span>1binary_remote_addr: 茉connection: 126uri: <span class="token operator">/</span>test/request_uri: <span class="token operator">/</span>test/?pid=121414&amp;cid=sadasdscheme: httprequest_method: GETrequest_length: 518args: pid=121414&amp;cid=sadasdarg_pid: 121414is_args: ?query_string: pid=121414&amp;cid=sadasdhost: <span class="token keyword">var</span><span class="token punctuation">.</span>lion-test<span class="token punctuation">.</span>clubhttp_user_agent: Mozilla/5<span class="token punctuation">.</span>0 <span class="token punctuation">(</span>Macintosh<span class="token punctuation">;</span> Intel Mac OS X 10_14_0<span class="token punctuation">)</span> AppleWebKit/537<span class="token punctuation">.</span>36 <span class="token punctuation">(</span>KHTML<span class="token punctuation">,</span> like Gecko<span class="token punctuation">)</span> Chrome/88<span class="token punctuation">.</span>0<span class="token punctuation">.</span>4324<span class="token punctuation">.</span>182 Safari/537<span class="token punctuation">.</span>36http_referer: http_via: request_time: 0<span class="token punctuation">.</span>000https: request_filename: <span class="token operator">/</span>usr/share/nginx/html/test/document_root: <span class="token operator">/</span>usr/share/nginx/html<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Nginx 的配置还有非常多，以上只是罗列了一些常用的配置，在实际项目中还是要学会查阅文档。</p><h2 id="Nginx-应用核心概念">Nginx 应用核心概念</h2><p>代理是在服务器和客户端之间假设的一层服务器，代理将接收客户端的请求并将它转发给服务器，然后将服务端的响应转发给客户端。</p><p>不管是正向代理还是反向代理，实现的都是上面的功能。</p><h3 id="正向代理">正向代理</h3><blockquote><p>正向代理，意思是一个位于客户端和原始服务器(origin server)之间的服务器，为了从原始服务器取得内容，客户端向代理发送一个请求并指定目标(原始服务器)，然后代理向原始服务器转交请求并将获得的内容返回给客户端。</p></blockquote><p>正向代理是为我们服务的，即为客户端服务的，客户端可以根据正向代理访问到它本身无法访问到的服务器资源。<br>正向代理对我们是透明的，对服务端是非透明的，即服务端并不知道自己收到的是来自代理的访问还是来自真实客户端的访问。</p><h3 id="反向代理">反向代理</h3><blockquote><p>反向代理*（Reverse Proxy）方式是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个反向代理服务器。</p></blockquote><p>反向代理是为服务端服务的，反向代理可以帮助服务器接收来自客户端的请求，帮助服务器做请求转发，负载均衡等。<br>反向代理对服务端是透明的，对我们是非透明的，即我们并不知道自己访问的是代理服务器，而服务器知道反向代理在为他服务。<br>反向代理的优势：</p><ul><li>隐藏真实服务器；</li><li>负载均衡便于横向扩充后端动态服务；</li><li>动静分离，提升系统健壮性；</li></ul><p>那么“动静分离”是什么？负载均衡又是什么？</p><h3 id="动静分离">动静分离</h3><p>动静分离是指在 web 服务器架构中，将静态页面与动态页面或者静态内容接口和动态内容接口分开不同系统访问的架构设计方法，进而提示整个服务的访问性和可维护性。<br><img src="https://img-blog.csdnimg.cn/20210508094850198.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hlbGxvV3VkZQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>一般来说，都需要将动态资源和静态资源分开，由于 Nginx 的高并发和静态资源缓存等特性，经常将静态资源部署在 Nginx 上。如果请求的是静态资源，直接到静态资源目录获取资源，如果是动态资源的请求，则利用反向代理的原理，把请求转发给对应后台应用去处理，从而实现动静分离。</p><p>使用前后端分离后，可以很大程度提升静态资源的访问速度，即使动态服务不可用，静态资源的访问也不会受到影响。</p><h3 id="负载均衡">负载均衡</h3><p>一般情况下，客户端发送多个请求到服务器，服务器处理请求，其中一部分可能要操作一些资源比如数据库、静态资源等，服务器处理完毕后，再将结果返回给客户端。</p><p>这种模式对于早期的系统来说，功能要求不复杂，且并发请求相对较少的情况下还能胜任，成本也低。随着信息数量不断增长，访问量和数据量飞速增长，以及系统业务复杂度持续增加，这种做法已无法满足要求，并发量特别大时，服务器容易崩。</p><p>很明显这是由于服务器性能的瓶颈造成的问题，除了堆机器之外，最重要的做法就是负载均衡。</p><p>请求爆发式增长的情况下，单个机器性能再强劲也无法满足要求了，这个时候集群的概念产生了，单个服务器解决不了的问题，可以使用多个服务器，然后将请求分发到各个服务器上，将负载分发到不同的服务器，这就是负载均衡，核心是「分摊压力」。 Nginx 实现负载均衡，一般来说指的是将请求转发给服务器集群。</p><p>举个具体的例子，晚高峰乘坐地铁的时候，入站口经常会有地铁工作人员大喇叭“请走 B 口， B 口人少车空…”，这个工作人员的作用就是负载均衡。<br><img src="https://img-blog.csdnimg.cn/20210508094906537.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hlbGxvV3VkZQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>Nginx 实现负载均衡的策略：</p><ul><li>轮询策略：默认情况下采用的策略，将所有客户端请求轮询分配给服务端。这种策略是可以正常工作的，但是如果其中某一台服务器压力太大，出现延迟，会影响所有分配在这台服务器下的用户。</li><li>最小连接数策略：将请求优先分配给压力较小的服务器，它可以平衡每个队列的长度，并避免向压力大的服务器添加更多的请求。</li><li>最快响应时间策略：优先分配给响应时间最短的服务器。</li><li>客户端 ip 绑定策略：来自同一个 ip 的请求永远只分配一台服务器，有效解决了动态网页存在的 session 共享问题。</li></ul><h2 id="Nginx-实战配置">Nginx 实战配置</h2><p>在配置反向代理和负载均衡等等功能之前，有两个核心模块是我们必须要掌握的，这两个模块应该说是 Nginx 应用配置中的核心，它们分别是： upstream 、proxy_pass 。</p><h3 id="upstream">upstream</h3><p>用于定义上游服务器（指的就是后台提供的应用服务器）的相关信息。<br><img src="https://img-blog.csdnimg.cn/2021050809492298.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hlbGxvV3VkZQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">语法：upstream name <span class="token punctuation">&#123;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span>上下文：http示例：upstream back_end_server<span class="token punctuation">&#123;</span>  server 192<span class="token punctuation">.</span>168<span class="token punctuation">.</span>100<span class="token punctuation">.</span>33:8081<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在 upstream 内可使用的指令：</p><ul><li>server 定义上游服务器地址；</li><li>zone 定义共享内存，用于跨 worker 子进程；</li><li>keepalive 对上游服务启用长连接；</li><li>keepalive_requests 一个长连接最多请求 HTTP 的个数；</li><li>keepalive_timeout 空闲情形下，一个长连接的超时时长；</li><li>hash 哈希负载均衡算法；</li><li>ip_hash 依据 IP 进行哈希计算的负载均衡算法；</li><li>least_conn 最少连接数负载均衡算法；</li><li>least_time 最短响应时间负载均衡算法；</li><li>random 随机负载均衡算法；</li></ul><h3 id="server">server</h3><p>定义上游服务器地址。</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">语法：server address <span class="token namespace">[parameters]</span>上下文：upstream<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>parameters 可选值：</p><ul><li>weight=number 权重值，默认为1；</li><li>max_conns=number 上游服务器的最大并发连接数；</li><li>fail_timeout=time 服务器不可用的判定时间；</li><li>max_fails=numer 服务器不可用的检查次数；</li><li>backup 备份服务器，仅当其他服务器都不可用时才会启用；</li><li>down 标记服务器长期不可用，离线维护；</li></ul><h3 id="keepalive">keepalive</h3><p>限制每个 worker 子进程与上游服务器空闲长连接的最大数量。</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">keepalive connections<span class="token punctuation">;</span>上下文：upstream示例：keepalive 16<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="keepalive-requests">keepalive_requests</h3><p>单个长连接可以处理的最多 HTTP 请求个数。</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">语法：keepalive_requests number<span class="token punctuation">;</span>默认值：keepalive_requests 100<span class="token punctuation">;</span>上下文：upstream<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="keepalive-timeout">keepalive_timeout</h3><p>空闲长连接的最长保持时间。</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">语法：keepalive_timeout time<span class="token punctuation">;</span>默认值：keepalive_timeout 60s<span class="token punctuation">;</span>上下文：upstream<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="配置实例">配置实例</h3><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">upstream back_end<span class="token punctuation">&#123;</span>server 127<span class="token punctuation">.</span>0<span class="token punctuation">.</span>0<span class="token punctuation">.</span>1:8081 weight=3 max_conns=1000 fail_timeout=10s max_fails=2<span class="token punctuation">;</span>  keepalive 32<span class="token punctuation">;</span>  keepalive_requests 50<span class="token punctuation">;</span>  keepalive_timeout 30s<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="proxy-pass">proxy_pass</h3><p>用于配置代理服务器。</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">语法：proxy_pass URL<span class="token punctuation">;</span>上下文：location、<span class="token keyword">if</span>、limit_except示例：proxy_pass http:<span class="token operator">/</span><span class="token operator">/</span>127<span class="token punctuation">.</span>0<span class="token punctuation">.</span>0<span class="token punctuation">.</span>1:8081proxy_pass http:<span class="token operator">/</span><span class="token operator">/</span>127<span class="token punctuation">.</span>0<span class="token punctuation">.</span>0<span class="token punctuation">.</span>1:8081/proxy<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>URL 参数原则</p><ul><li>URL 必须以 http 或 https 开头；</li><li>URL 中可以携带变量；</li><li>URL 中是否带 URI ，会直接影响发往上游请求的 URL ；</li></ul><p>接下来让我们来看看两种常见的 URL 用法：</p><ul><li>proxy_pass <a href="http://192.168.100.33:8081">http://192.168.100.33:8081</a></li><li>proxy_pass <a href="http://192.168.100.33:8081/">http://192.168.100.33:8081/</a></li></ul><p>这两种用法的区别就是带 / 和不带 / ，在配置代理时它们的区别可大了：</p><ul><li>不带 / 意味着 Nginx 不会修改用户 URL ，而是直接透传给上游的应用服务器；</li><li>带 / 意味着 Nginx 会修改用户 URL ，修改方法是将 location 后的 URL 从用户 URL 中删除；</li></ul><p>不带 / 的用法：</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">location <span class="token operator">/</span>bbs/<span class="token punctuation">&#123;</span>  proxy_pass http:<span class="token operator">/</span><span class="token operator">/</span>127<span class="token punctuation">.</span>0<span class="token punctuation">.</span>0<span class="token punctuation">.</span>1:8080<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>分析：</p><ol><li>用户请求 URL ： /bbs/abc/test.html</li><li>请求到达 Nginx 的 URL ： /bbs/abc/test.html</li><li>请求到达上游应用服务器的 URL ： /bbs/abc/test.html</li></ol><p>带 / 的用法：</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">location <span class="token operator">/</span>bbs/<span class="token punctuation">&#123;</span>  proxy_pass http:<span class="token operator">/</span><span class="token operator">/</span>127<span class="token punctuation">.</span>0<span class="token punctuation">.</span>0<span class="token punctuation">.</span>1:8080/<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>分析：</p><ol><li>用户请求 URL ： /bbs/abc/test.html</li><li>请求到达 Nginx 的 URL ： /bbs/abc/test.html</li><li>请求到达上游应用服务器的 URL ： /abc/test.html</li></ol><p>并没有拼接上 /bbs ，这点和 root 与 alias 之间的区别是保持一致的。</p><h3 id="配置反向代理">配置反向代理</h3><p>这里为了演示更加接近实际，作者准备了两台云服务器，它们的公网 IP 分别是： 121.42.11.34 与 121.5.180.193 。<br>我们把 121.42.11.34 服务器作为上游服务器，做如下配置：</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment"># /etc/nginx/conf.d/proxy.conf</span>server<span class="token punctuation">&#123;</span>  listen 8080<span class="token punctuation">;</span>  server_name localhost<span class="token punctuation">;</span>    location <span class="token operator">/</span>proxy/ <span class="token punctuation">&#123;</span>    root <span class="token operator">/</span>usr/share/nginx/html/proxy<span class="token punctuation">;</span>    index index<span class="token punctuation">.</span>html<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment"># /usr/share/nginx/html/proxy/index.html</span>&lt;h1> 121<span class="token punctuation">.</span>42<span class="token punctuation">.</span>11<span class="token punctuation">.</span>34 proxy html &lt;<span class="token operator">/</span>h1><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>配置完成后重启 Nginx 服务器 nginx -s reload 。<br>把 121.5.180.193 服务器作为代理服务器，做如下配置：</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment"># /etc/nginx/conf.d/proxy.conf</span>upstream back_end <span class="token punctuation">&#123;</span>  server 121<span class="token punctuation">.</span>42<span class="token punctuation">.</span>11<span class="token punctuation">.</span>34:8080 weight=2 max_conns=1000 fail_timeout=10s max_fails=3<span class="token punctuation">;</span>  keepalive 32<span class="token punctuation">;</span>  keepalive_requests 80<span class="token punctuation">;</span>  keepalive_timeout 20s<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>server <span class="token punctuation">&#123;</span>  listen 80<span class="token punctuation">;</span>  server_name proxy<span class="token punctuation">.</span>lion<span class="token punctuation">.</span>club<span class="token punctuation">;</span>  location <span class="token operator">/</span>proxy <span class="token punctuation">&#123;</span>  proxy_pass http:<span class="token operator">/</span><span class="token operator">/</span>back_end/proxy<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>本地机器要访问 proxy.lion.club 域名，因此需要配置本地 hosts ，通过命令：vim /etc/hosts 进入配置文件，添加如下内容：</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">121<span class="token punctuation">.</span>5<span class="token punctuation">.</span>180<span class="token punctuation">.</span>193 proxy<span class="token punctuation">.</span>lion<span class="token punctuation">.</span>club<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/20210508101754614.png" alt="在这里插入图片描述"></p><p>分析：</p><ol><li>当访问 proxy.lion.club/proxy 时通过 upstream 的配置找到 121.42.11.34:8080 ；</li><li>因此访问地址变为 <a href="http://121.42.11.34:8080/proxy">http://121.42.11.34:8080/proxy</a> ；</li><li>连接到 121.42.11.34 服务器，找到 8080 端口提供的 server ；</li><li>通过 server 找到 /usr/share/nginx/html/proxy/index.html 资源，最终展示出来。</li></ol><h3 id="配置负载均衡">配置负载均衡</h3><p>配置负载均衡主要是要使用 upstream 指令。<br>我们把 121.42.11.34 服务器作为上游服务器，做如下配置（ /etc/nginx/conf.d/balance.conf ）：</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">server<span class="token punctuation">&#123;</span>  listen 8020<span class="token punctuation">;</span>  location <span class="token operator">/</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> 200 <span class="token string">'return 8020 \n'</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>server<span class="token punctuation">&#123;</span>  listen 8030<span class="token punctuation">;</span>  location <span class="token operator">/</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> 200 <span class="token string">'return 8030 \n'</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>server<span class="token punctuation">&#123;</span>  listen 8040<span class="token punctuation">;</span>  location <span class="token operator">/</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> 200 <span class="token string">'return 8040 \n'</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>配置完成后：</p><ol><li>nginx -t 检测配置是否正确；</li><li>nginx -s reload 重启 Nginx 服务器；</li><li>执行 ss -nlt 命令查看端口是否被占用，从而判断 Nginx 服务是否正确启动。</li></ol><p>把 121.5.180.193 服务器作为代理服务器，做如下配置（ /etc/nginx/conf.d/balance.conf ）：</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">upstream demo_server <span class="token punctuation">&#123;</span>  server 121<span class="token punctuation">.</span>42<span class="token punctuation">.</span>11<span class="token punctuation">.</span>34:8020<span class="token punctuation">;</span>  server 121<span class="token punctuation">.</span>42<span class="token punctuation">.</span>11<span class="token punctuation">.</span>34:8030<span class="token punctuation">;</span>  server 121<span class="token punctuation">.</span>42<span class="token punctuation">.</span>11<span class="token punctuation">.</span>34:8040<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>server <span class="token punctuation">&#123;</span>  listen 80<span class="token punctuation">;</span>  server_name balance<span class="token punctuation">.</span>lion<span class="token punctuation">.</span>club<span class="token punctuation">;</span>    location <span class="token operator">/</span>balance/ <span class="token punctuation">&#123;</span>  proxy_pass http:<span class="token operator">/</span><span class="token operator">/</span>demo_server<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>配置完成后重启 Nginx 服务器。并且在需要访问的客户端配置好 ip 和域名的映射关系。</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment"># /etc/hosts</span>121<span class="token punctuation">.</span>5<span class="token punctuation">.</span>180<span class="token punctuation">.</span>193 balance<span class="token punctuation">.</span>lion<span class="token punctuation">.</span>club<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>在客户端机器执行 curl <a href="http://balance.lion.club/balance/">http://balance.lion.club/balance/</a> 命令：<br><img src="https://img-blog.csdnimg.cn/20210508095050782.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hlbGxvV3VkZQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>不难看出，负载均衡的配置已经生效了，每次给我们分发的上游服务器都不一样。就是通过简单的轮询策略进行上游服务器分发。</p><p>接下来，我们再来了解下 Nginx 的其它分发策略。</p><h4 id="hash-算法">hash 算法</h4><p>通过制定关键字作为 hash key ，基于 hash 算法映射到特定的上游服务器中。关键字可以包含有变量、字符串。</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">upstream demo_server <span class="token punctuation">&#123;</span>  hash <span class="token variable">$request_uri</span><span class="token punctuation">;</span>  server 121<span class="token punctuation">.</span>42<span class="token punctuation">.</span>11<span class="token punctuation">.</span>34:8020<span class="token punctuation">;</span>  server 121<span class="token punctuation">.</span>42<span class="token punctuation">.</span>11<span class="token punctuation">.</span>34:8030<span class="token punctuation">;</span>  server 121<span class="token punctuation">.</span>42<span class="token punctuation">.</span>11<span class="token punctuation">.</span>34:8040<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>server <span class="token punctuation">&#123;</span>  listen 80<span class="token punctuation">;</span>  server_name balance<span class="token punctuation">.</span>lion<span class="token punctuation">.</span>club<span class="token punctuation">;</span>    location <span class="token operator">/</span>balance/ <span class="token punctuation">&#123;</span>  proxy_pass http:<span class="token operator">/</span><span class="token operator">/</span>demo_server<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>hash $request_uri 表示使用 request_uri 变量作为 hash 的 key 值，只要访问的 URI 保持不变，就会一直分发给同一台服务器。</p><h4 id="ip-hash">ip_hash</h4><p>根据客户端的请求 ip 进行判断，只要 ip 地址不变就永远分配到同一台主机。它可以有效解决后台服务器 session 保持的问题。</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">upstream demo_server <span class="token punctuation">&#123;</span>  ip_hash<span class="token punctuation">;</span>  server 121<span class="token punctuation">.</span>42<span class="token punctuation">.</span>11<span class="token punctuation">.</span>34:8020<span class="token punctuation">;</span>  server 121<span class="token punctuation">.</span>42<span class="token punctuation">.</span>11<span class="token punctuation">.</span>34:8030<span class="token punctuation">;</span>  server 121<span class="token punctuation">.</span>42<span class="token punctuation">.</span>11<span class="token punctuation">.</span>34:8040<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>server <span class="token punctuation">&#123;</span>  listen 80<span class="token punctuation">;</span>  server_name balance<span class="token punctuation">.</span>lion<span class="token punctuation">.</span>club<span class="token punctuation">;</span>    location <span class="token operator">/</span>balance/ <span class="token punctuation">&#123;</span>  proxy_pass http:<span class="token operator">/</span><span class="token operator">/</span>demo_server<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="最少连接数算法">最少连接数算法</h4><p>各个 worker 子进程通过读取共享内存的数据，来获取后端服务器的信息。来挑选一台当前已建立连接数最少的服务器进行分配请求。</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">语法：least_conn<span class="token punctuation">;</span>上下文：upstream<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>示例：</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">upstream demo_server <span class="token punctuation">&#123;</span>  zone test 10M<span class="token punctuation">;</span> <span class="token comment"># zone可以设置共享内存空间的名字和大小</span>  least_conn<span class="token punctuation">;</span>  server 121<span class="token punctuation">.</span>42<span class="token punctuation">.</span>11<span class="token punctuation">.</span>34:8020<span class="token punctuation">;</span>  server 121<span class="token punctuation">.</span>42<span class="token punctuation">.</span>11<span class="token punctuation">.</span>34:8030<span class="token punctuation">;</span>  server 121<span class="token punctuation">.</span>42<span class="token punctuation">.</span>11<span class="token punctuation">.</span>34:8040<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>server <span class="token punctuation">&#123;</span>  listen 80<span class="token punctuation">;</span>  server_name balance<span class="token punctuation">.</span>lion<span class="token punctuation">.</span>club<span class="token punctuation">;</span>    location <span class="token operator">/</span>balance/ <span class="token punctuation">&#123;</span>  proxy_pass http:<span class="token operator">/</span><span class="token operator">/</span>demo_server<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最后你会发现，负载均衡的配置其实一点都不复杂。</p><h3 id="配置缓存">配置缓存</h3><p>缓存可以非常有效的提升性能，因此不论是客户端（浏览器），还是代理服务器（ Nginx ），乃至上游服务器都多少会涉及到缓存。可见缓存在每个环节都是非常重要的。下面让我们来学习 Nginx 中如何设置缓存策略。</p><h4 id="proxy-cache">proxy_cache</h4><p>存储一些之前被访问过、而且可能将要被再次访问的资源，使用户可以直接从代理服务器获得，从而减少上游服务器的压力，加快整个访问速度。</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">语法：proxy_cache zone <span class="token punctuation">|</span> off <span class="token punctuation">;</span> <span class="token comment"># zone 是共享内存的名称</span>默认值：proxy_cache off<span class="token punctuation">;</span>上下文：http、server、location<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="proxy-cache-path">proxy_cache_path</h4><p>设置缓存文件的存放路径。</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">语法：proxy_cache_path path <span class="token namespace">[level=levels]</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>可选参数省略，下面会详细列举默认值：proxy_cache_path off上下文：http<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>参数含义：</p><ul><li>path 缓存文件的存放路径；</li><li>level path 的目录层级；</li><li>keys_zone 设置共享内存；</li><li>inactive 在指定时间内没有被访问，缓存会被清理，默认10分钟；</li></ul><h4 id="proxy-cache-key">proxy_cache_key</h4><p>设置缓存文件的 key 。</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">语法：proxy_cache_key默认值：proxy_cache_key <span class="token variable">$scheme</span><span class="token variable">$proxy_host</span><span class="token variable">$request_uri</span><span class="token punctuation">;</span>上下文：http、server、location<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="proxy-cache-valid">proxy_cache_valid</h4><p>配置什么状态码可以被缓存，以及缓存时长。</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">语法：proxy_cache_valid <span class="token namespace">[code...]</span> time<span class="token punctuation">;</span>上下文：http、server、location配置示例：proxy_cache_valid 200 304 2m<span class="token punctuation">;</span><span class="token punctuation">;</span> <span class="token comment"># 说明对于状态为200和304的缓存文件的缓存时间是2分钟</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="proxy-no-cache">proxy_no_cache</h4><p>定义相应保存到缓存的条件，如果字符串参数的至少一个值不为空且不等于“ 0”，则将不保存该响应到缓存。</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">语法：proxy_no_cache string<span class="token punctuation">;</span>上下文：http、server、location示例：proxy_no_cache <span class="token variable">$http_pragma</span>    <span class="token variable">$http_authorization</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="proxy-cache-bypass">proxy_cache_bypass</h4><p>定义条件，在该条件下将不会从缓存中获取响应。</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">语法：proxy_cache_bypass string<span class="token punctuation">;</span>上下文：http、server、location示例：proxy_cache_bypass <span class="token variable">$http_pragma</span>    <span class="token variable">$http_authorization</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="upstream-cache-status-变量">upstream_cache_status 变量</h4><p>它存储了缓存是否命中的信息，会设置在响应头信息中，在调试中非常有用。</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">MISS: 未命中缓存HIT： 命中缓存EXPIRED: 缓存过期STALE: 命中了陈旧缓存REVALIDDATED: Nginx验证陈旧缓存依然有效UPDATING: 内容陈旧，但正在更新BYPASS: X响应从原始服务器获取<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="配置实例-2">配置实例</h4><p>我们把 121.42.11.34 服务器作为上游服务器，做如下配置（ /etc/nginx/conf.d/cache.conf ）：</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">server <span class="token punctuation">&#123;</span>  listen 1010<span class="token punctuation">;</span>  root <span class="token operator">/</span>usr/share/nginx/html/1010<span class="token punctuation">;</span>  location <span class="token operator">/</span> <span class="token punctuation">&#123;</span>  index index<span class="token punctuation">.</span>html<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>server <span class="token punctuation">&#123;</span>  listen 1020<span class="token punctuation">;</span>  root <span class="token operator">/</span>usr/share/nginx/html/1020<span class="token punctuation">;</span>  location <span class="token operator">/</span> <span class="token punctuation">&#123;</span>  index index<span class="token punctuation">.</span>html<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>把 121.5.180.193 服务器作为代理服务器，做如下配置（ /etc/nginx/conf.d/cache.conf ）：</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">proxy_cache_path <span class="token operator">/</span>etc/nginx/cache_temp levels=2:2 keys_zone=cache_zone:30m max_size=2g inactive=60m use_temp_path=off<span class="token punctuation">;</span>upstream cache_server<span class="token punctuation">&#123;</span>  server 121<span class="token punctuation">.</span>42<span class="token punctuation">.</span>11<span class="token punctuation">.</span>34:1010<span class="token punctuation">;</span>  server 121<span class="token punctuation">.</span>42<span class="token punctuation">.</span>11<span class="token punctuation">.</span>34:1020<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>server <span class="token punctuation">&#123;</span>  listen 80<span class="token punctuation">;</span>  server_name cache<span class="token punctuation">.</span>lion<span class="token punctuation">.</span>club<span class="token punctuation">;</span>  location <span class="token operator">/</span> <span class="token punctuation">&#123;</span>    proxy_cache cache_zone<span class="token punctuation">;</span> <span class="token comment"># 设置缓存内存，上面配置中已经定义好的</span>    proxy_cache_valid 200 5m<span class="token punctuation">;</span> <span class="token comment"># 缓存状态为200的请求，缓存时长为5分钟</span>    proxy_cache_key <span class="token variable">$request_uri</span><span class="token punctuation">;</span> <span class="token comment"># 缓存文件的key为请求的URI</span>    add_header Nginx-Cache-Status <span class="token variable">$upstream_cache_status</span> <span class="token comment"># 把缓存状态设置为头部信息，响应给客户端</span>    proxy_pass http:<span class="token operator">/</span><span class="token operator">/</span>cache_server<span class="token punctuation">;</span> <span class="token comment"># 代理转发</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>缓存就是这样配置，我们可以在 /etc/nginx/cache_temp 路径下找到相应的缓存文件。</p><p>对于一些实时性要求非常高的页面或数据来说，就不应该去设置缓存，下面来看看如何配置不缓存的内容。</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">server <span class="token punctuation">&#123;</span>  listen 80<span class="token punctuation">;</span>  server_name cache<span class="token punctuation">.</span>lion<span class="token punctuation">.</span>club<span class="token punctuation">;</span>  <span class="token comment"># URI 中后缀为 .txt 或 .text 的设置变量值为 "no cache"</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$request_uri</span> ~ \<span class="token punctuation">.</span><span class="token punctuation">(</span>txt<span class="token punctuation">|</span>text<span class="token punctuation">)</span>$<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token function">set</span> <span class="token variable">$cache_name</span> <span class="token string">"no cache"</span>  <span class="token punctuation">&#125;</span>    location <span class="token operator">/</span> <span class="token punctuation">&#123;</span>    proxy_no_cache <span class="token variable">$cache_name</span><span class="token punctuation">;</span> <span class="token comment"># 判断该变量是否有值，如果有值则不进行缓存，如果没有值则进行缓存</span>    proxy_cache cache_zone<span class="token punctuation">;</span> <span class="token comment"># 设置缓存内存</span>    proxy_cache_valid 200 5m<span class="token punctuation">;</span> <span class="token comment"># 缓存状态为200的请求，缓存时长为5分钟</span>    proxy_cache_key <span class="token variable">$request_uri</span><span class="token punctuation">;</span> <span class="token comment"># 缓存文件的key为请求的URI</span>    add_header Nginx-Cache-Status <span class="token variable">$upstream_cache_status</span> <span class="token comment"># 把缓存状态设置为头部信息，响应给客户端</span>    proxy_pass http:<span class="token operator">/</span><span class="token operator">/</span>cache_server<span class="token punctuation">;</span> <span class="token comment"># 代理转发</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="HTTPS">HTTPS</h3><p>在学习如何配置 HTTPS 之前，我们先来简单回顾下 HTTPS 的工作流程是怎么样的？它是如何进行加密保证安全的？</p><h4 id="HTTPS-工作流程">HTTPS 工作流程</h4><ol><li>客户端（浏览器）访问 <a href="https://www.baidu.com">https://www.baidu.com</a> 百度网站；</li><li>百度服务器返回 HTTPS 使用的 CA 证书；</li><li>浏览器验证 CA 证书是否为合法证书；</li><li>验证通过，证书合法，生成一串随机数并使用公钥（证书中提供的）进行加密；</li><li>发送公钥加密后的随机数给百度服务器；</li><li>百度服务器拿到密文，通过私钥进行解密，获取到随机数（公钥加密，私钥解密，反之也可以）；</li><li>百度服务器把要发送给浏览器的内容，使用随机数进行加密后传输给浏览器；</li><li>此时浏览器可以使用随机数进行解密，获取到服务器的真实传输内容；</li></ol><p>这就是 HTTPS 的基本运作原理，使用对称加密和非对称机密配合使用，保证传输内容的安全性。<br><a href="https://juejin.cn/post/6844904148601667598#heading-37">关于HTTPS更多知识，可以查看作者的另外一篇文章《学习 HTTP 协议》</a>。</p><h4 id="配置证书">配置证书</h4><p>下载证书的压缩文件，里面有个 Nginx 文件夹，把 xxx.crt 和 xxx.key 文件拷贝到服务器目录，再进行如下配置：</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">server <span class="token punctuation">&#123;</span>  listen 443 ssl http2 default_server<span class="token punctuation">;</span>   <span class="token comment"># SSL 访问端口号为 443</span>  server_name lion<span class="token punctuation">.</span>club<span class="token punctuation">;</span>         <span class="token comment"># 填写绑定证书的域名(我这里是随便写的)</span>  ssl_certificate <span class="token operator">/</span>etc/nginx/https/lion<span class="token punctuation">.</span>club_bundle<span class="token punctuation">.</span>crt<span class="token punctuation">;</span>   <span class="token comment"># 证书地址</span>  ssl_certificate_key <span class="token operator">/</span>etc/nginx/https/lion<span class="token punctuation">.</span>club<span class="token punctuation">.</span>key<span class="token punctuation">;</span>      <span class="token comment"># 私钥地址</span>  ssl_session_timeout 10m<span class="token punctuation">;</span>  ssl_protocols TLSv1 TLSv1<span class="token punctuation">.</span>1 TLSv1<span class="token punctuation">.</span>2<span class="token punctuation">;</span> <span class="token comment"># 支持ssl协议版本，默认为后三个，主流版本是[TLSv1.2]</span>   location <span class="token operator">/</span> <span class="token punctuation">&#123;</span>    root         <span class="token operator">/</span>usr/share/nginx/html<span class="token punctuation">;</span>    index        index<span class="token punctuation">.</span>html index<span class="token punctuation">.</span>htm<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如此配置后就能正常访问 HTTPS 版的网站了。</p><h3 id="配置跨域-CORS">配置跨域 CORS</h3><p>先简单回顾下跨域究竟是怎么回事。</p><h4 id="跨域的定义">跨域的定义</h4><p>同源策略限制了从同一个源加载的文档或脚本如何与来自另一个源的资源进行交互。这是一个用于隔离潜在恶意文件的重要安全机制。通常不允许不同源间的读操作。</p><h4 id="同源的定义">同源的定义</h4><p>如果两个页面的协议，端口（如果有指定）和域名都相同，则两个页面具有相同的源。<br>下面给出了与 URL <a href="http://store.company.com/dir/page.html">http://store.company.com/dir/page.html</a> 的源进行对比的示例:<br><a href="http://store.company.com/dir2/other.html">http://store.company.com/dir2/other.html</a> 同源</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">https:<span class="token operator">/</span><span class="token operator">/</span>store<span class="token punctuation">.</span>company<span class="token punctuation">.</span>com/secure<span class="token punctuation">.</span>html 不同源，协议不同http:<span class="token operator">/</span><span class="token operator">/</span>store<span class="token punctuation">.</span>company<span class="token punctuation">.</span>com:81/<span class="token function">dir</span><span class="token operator">/</span>etc<span class="token punctuation">.</span>html 不同源，端口不同http:<span class="token operator">/</span><span class="token operator">/</span>news<span class="token punctuation">.</span>company<span class="token punctuation">.</span>com/<span class="token function">dir</span><span class="token operator">/</span>other<span class="token punctuation">.</span>html 不同源，主机不同<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>不同源会有如下限制：</p><ul><li>Web 数据层面，同源策略限制了不同源的站点读取当前站点的 Cookie 、 IndexDB 、 LocalStorage 等数据。</li><li>DOM 层面，同源策略限制了来自不同源的 JavaScript 脚本对当前 DOM 对象读和写的操作。</li><li>网络层面，同源策略限制了通过 XMLHttpRequest 等方式将站点的数据发送给不同源的站点。</li></ul><h4 id="Nginx-解决跨域的原理">Nginx 解决跨域的原理</h4><p>例如：</p><ul><li>前端 server 的域名为： <a href="http://fe.server.com">fe.server.com</a></li><li>后端服务的域名为： <a href="http://dev.server.com">dev.server.com</a></li></ul><p>现在我在 <a href="http://fe.server.com">fe.server.com</a> 对 <a href="http://dev.server.com">dev.server.com</a> 发起请求一定会出现跨域。<br>现在我们只需要启动一个 Nginx 服务器，将 server_name 设置为 <a href="http://fe.server.com">fe.server.com</a> 然后设置相应的 location 以拦截前端需要跨域的请求，最后将请求代理回 <a href="http://dev.server.com">dev.server.com</a> 。如下面的配置：</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">server <span class="token punctuation">&#123;</span>listen    80<span class="token punctuation">;</span>server_name  fe<span class="token punctuation">.</span>server<span class="token punctuation">.</span>com<span class="token punctuation">;</span>location <span class="token operator">/</span> <span class="token punctuation">&#123;</span>proxy_pass dev<span class="token punctuation">.</span>server<span class="token punctuation">.</span>com<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样可以完美绕过浏览器的同源策略： <a href="http://fe.server.com">fe.server.com</a> 访问 Nginx 的 <a href="http://fe.server.com">fe.server.com</a> 属于同源访问，而 Nginx 对服务端转发的请求不会触发浏览器的同源策略。</p><h3 id="配置开启-gzip-压缩">配置开启 gzip 压缩</h3><p>GZIP 是规定的三种标准 HTTP 压缩格式之一。目前绝大多数的网站都在使用 GZIP 传输 HTML 、CSS 、 JavaScript 等资源文件。</p><p>对于文本文件， GZiP 的效果非常明显，开启后传输所需流量大约会降至 1/4~1/3 。</p><p>并不是每个浏览器都支持 gzip 的，如何知道客户端是否支持 gzip 呢，请求头中的 Accept-Encoding 来标识对压缩的支持。<br><img src="https://img-blog.csdnimg.cn/2021050809512035.png" alt="在这里插入图片描述"><br>启用 gzip 同时需要客户端和服务端的支持，如果客户端支持 gzip 的解析，那么只要服务端能够返回 gzip 的文件就可以启用 gzip 了,我们可以通过 Nginx 的配置来让服务端支持 gzip 。下面的 respone 中 content-encoding:gzip ，指服务端开启了 gzip 的压缩方式。<br><img src="https://img-blog.csdnimg.cn/20210508095129336.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hlbGxvV3VkZQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>在 /etc/nginx/conf.d/ 文件夹中新建配置文件 gzip.conf ：</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment"># # 默认off，是否开启gzip</span>gzip on<span class="token punctuation">;</span> <span class="token comment"># 要采用 gzip 压缩的 MIME 文件类型，其中 text/html 被系统强制启用；</span>gzip_types text/plain text/css application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript<span class="token punctuation">;</span><span class="token comment"># ---- 以上两个参数开启就可以支持Gzip压缩了 ---- #</span><span class="token comment"># 默认 off，该模块启用后，Nginx 首先检查是否存在请求静态文件的 gz 结尾的文件，如果有则直接返回该 .gz 文件内容；</span>gzip_static on<span class="token punctuation">;</span><span class="token comment"># 默认 off，nginx做为反向代理时启用，用于设置启用或禁用从代理服务器上收到相应内容 gzip 压缩；</span>gzip_proxied any<span class="token punctuation">;</span><span class="token comment"># 用于在响应消息头中添加 Vary：Accept-Encoding，使代理服务器根据请求头中的 Accept-Encoding 识别是否启用 gzip 压缩；</span>gzip_vary on<span class="token punctuation">;</span><span class="token comment"># gzip 压缩比，压缩级别是 1-9，1 压缩级别最低，9 最高，级别越高压缩率越大，压缩时间越长，建议 4-6；</span>gzip_comp_level 6<span class="token punctuation">;</span><span class="token comment"># 获取多少内存用于缓存压缩结果，16 8k 表示以 8k*16 为单位获得；</span>gzip_buffers 16 8k<span class="token punctuation">;</span><span class="token comment"># 允许压缩的页面最小字节数，页面字节数从header头中的 Content-Length 中进行获取。默认值是 0，不管页面多大都压缩。建议设置成大于 1k 的字节数，小于 1k 可能会越压越大；</span><span class="token comment"># gzip_min_length 1k;</span><span class="token comment"># 默认 1.1，启用 gzip 所需的 HTTP 最低版本；</span>gzip_http_version 1<span class="token punctuation">.</span>1<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其实也可以通过前端构建工具例如 webpack 、rollup 等在打生产包时就做好 Gzip 压缩，然后放到 Nginx 服务器中，这样可以减少服务器的开销，加快访问速度。</p><p>关于 Nginx 的实际应用就学习到这里，相信通过掌握了 Nginx 核心配置以及实战配置，之后再遇到什么需求，我们也能轻松应对。接下来，让我们再深入一点学习下 Nginx 的架构。</p><h2 id="Nginx-架构">Nginx 架构</h2><h3 id="进程结构">进程结构</h3><p>多进程结构 Nginx 的进程模型图：<br><img src="https://img-blog.csdnimg.cn/202105080951442.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hlbGxvV3VkZQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>多进程中的 Nginx 进程架构如下图所示，会有一个父进程（ Master Process ），它会有很多子进程（ Child Processes ）。</p><ul><li>Master Process 用来管理子进程的，其本身并不真正处理用户请求。<ul><li>某个子进程 down 掉的话，它会向 Master 进程发送一条消息，表明自己不可用了，此时 Master 进程会去新起一个子进程。</li><li>某个配置文件被修改了 Master 进程会去通知 work 进程获取新的配置信息，这也就是我们所说的热部署。</li></ul></li><li>子进程间是通过共享内存的方式进行通信的。</li></ul><h3 id="配置文件重载原理">配置文件重载原理</h3><p>reload 重载配置文件的流程：</p><ol><li>向 master 进程发送 HUP 信号（ reload 命令）；</li><li>master 进程检查配置语法是否正确；</li><li>master 进程打开监听端口；</li><li>master 进程使用新的配置文件启动新的 worker 子进程；</li><li>master 进程向老的 worker 子进程发送 QUIT 信号；</li><li>老的 worker 进程关闭监听句柄，处理完当前连接后关闭进程；</li><li>整个过程 Nginx 始终处于平稳运行中，实现了平滑升级，用户无感知；</li></ol><h3 id="Nginx-模块化管理机制">Nginx 模块化管理机制</h3><p>Nginx 的内部结构是由核心部分和一系列的功能模块所组成。这样划分是为了使得每个模块的功能相对简单，便于开发，同时也便于对系统进行功能扩展。Nginx 的模块是互相独立的,低耦合高内聚。<br><img src="https://img-blog.csdnimg.cn/20210508095203333.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hlbGxvV3VkZQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot; /&gt;
&lt;h2 id=&quot;Nginx-概述&quot;&gt;Nginx 概述&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20210508090822890.pn</summary>
      
    
    
    
    <category term="linux" scheme="https://blog.mailjob.net/categories/linux/"/>
    
    
    <category term="linux" scheme="https://blog.mailjob.net/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>Jetbrains激活到2099年</title>
    <link href="https://blog.mailjob.net/posts/3196436062.html"/>
    <id>https://blog.mailjob.net/posts/3196436062.html</id>
    <published>2022-03-25T02:36:39.000Z</published>
    <updated>2025-10-17T05:39:50.039Z</updated>
    
    <content type="html"><![CDATA[<p>在 <a href="https://blog.mailjob.net/posts/2414163873.html">Jetbrains 产品无限重置方法</a> 我们讲了使用 <code>IDE Eval Reset</code> 插件激活 Jetbrains 产品的方法，但是由于该产品的作者在 <a href="https://gitee.com/pengzhile/ide-eval-resetter">gitee</a> 宣布该插件停止维护，所以笔者在继续使用该插件的时候，发现存在不稳定的情况，例如编辑器已经 Reset 但是还继续提示我激活。所以为了继续可以使用 Jetbrains 的产品，找到了另一种可以激活该产品的方法。</p><h2 id="激活步骤">激活步骤</h2><h3 id="插件激活">插件激活</h3><p>下载 <a href="https://gitee.com/code_soft/ja-netfilter">ja-netfilter</a> 插件，将改插件复制到编辑器的差距目录，我这里选择放置于我电脑的 PhpStorm 的插件目录 <code>/Applications/PhpStorm.app/Contents/plugins/ja-netfilter</code></p><p>此时目录结构如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">libin@bogon ja-netfilter % <span class="token builtin class-name">pwd</span>/Applications/PhpStorm.app/Contents/plugins/ja-netfilterlibin@bogon ja-netfilter % <span class="token function">ls</span>README.pdfjanf_config.txtsha1sum.txt ja-netfilter.jarplugins<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>打开软件，进入 <code>help -&gt; edit VM options</code>加入一些代码</p><pre class="line-numbers language-none"><code class="language-none">-javaagent:&#x2F;Applications&#x2F;PhpStorm.app&#x2F;Contents&#x2F;plugins&#x2F;ja-netfilter&#x2F;ja-netfilter.jar<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>注意：不可照抄，根据你放置破解插件的实际目录填写。<br><img src="http://img.github.mailjob.net/20220325114739.png" alt="image-20220325114736715"><br>完成后，重启软件，激活完成！</p><h3 id="试用期已过">试用期已过</h3><p>试用期已过的话，无法进入软件的 help 页签，这里提供一下几种临时激活的方法。请使用临时激活后，然后用插件激活，即可永久使用。</p><p><strong>温馨提示：激活码激活过程中，请断开网络连接！</strong></p><p><strong>激活码</strong></p><p>2022激活jetBrains通用版：<a href="https://mano100.cn/thread-1942-1-1.html">https://mano100.cn/thread-1942-1-1.html</a></p><blockquote><p><strong>网盘激活码(已废弃)</strong></p><p><a href="https://pan.baidu.com/s/1LBh66mqG19DkAlU9gP1QCg?pwd=o9id">https://pan.baidu.com/s/1LBh66mqG19DkAlU9gP1QCg?pwd=o9id</a></p><p><strong>账号激活(已废弃)</strong></p><p><a href="https://pan.baidu.com/s/1Gw_kYzP6HPeJBiBVCBZEnw?pwd=2233">https://pan.baidu.com/s/1Gw_kYzP6HPeJBiBVCBZEnw?pwd=2233</a></p><p><a href="https://pan.baidu.com/s/1wUdDvnQ9tthvXMUAB_k7WQ?pwd=Hh23">https://pan.baidu.com/s/1wUdDvnQ9tthvXMUAB_k7WQ?pwd=Hh23</a></p></blockquote><h3 id="建议">建议</h3><p><strong>可以在你的host文件里加上以下内容</strong></p><pre class="line-numbers language-none"><code class="language-none">127.0.0.1 account.jetbrains.com127.0.0.1 www.jetbrains.com<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="参考资料">参考资料</h2><ul><li>ja-netfilter插件下载：<a href="https://gitee.com/code_soft/ja-netfilter">https://gitee.com/code_soft/ja-netfilter</a></li><li>爱激活：<a href="https://www.ajihuo.com/">https://www.ajihuo.com/</a></li><li>视频演示激活jetBrains方法：<a href="https://www.ixigua.com/7054789540506141221?wid_try=1">https://www.ixigua.com/7054789540506141221?wid_try=1</a></li></ul><h2 id="常见问题">常见问题</h2><p>如果这个方法激活不了，你也可以试试这个链接 <a href="https://33tool.com/idea">https://33tool.com/idea</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在 &lt;a href=&quot;https://blog.mailjob.net/posts/2414163873.html&quot;&gt;Jetbrains 产品无限重置方法&lt;/a&gt; 我们讲了使用 &lt;code&gt;IDE Eval Reset&lt;/code&gt; 插件激活 Jetbrains 产品的方法</summary>
      
    
    
    
    <category term="blog" scheme="https://blog.mailjob.net/categories/blog/"/>
    
    
    <category term="blog" scheme="https://blog.mailjob.net/tags/blog/"/>
    
  </entry>
  
  <entry>
    <title>Go实现gRPC</title>
    <link href="https://blog.mailjob.net/posts/1433951833.html"/>
    <id>https://blog.mailjob.net/posts/1433951833.html</id>
    <published>2022-01-16T12:59:28.000Z</published>
    <updated>2025-10-17T05:39:50.041Z</updated>
    
    <content type="html"><![CDATA[<h2 id="引言">引言</h2><p>在 <a href="https://blog.mailjob.net/posts/3190342588.html">Go原生方法实现RPC</a> 文章中，我们通过原生的方法实现了 RPC 调用。但是大多是基于 protobuf 进行 RPC 的实现。</p><p>gRPC是Google公司基于Protobuf开发的跨语言的开源RPC框架。gRPC基于HTTP/2协议设计，可以基于一个HTTP/2链接提供多个服务，对于移动设备更加友好。本节将讲述gRPC的简单用法。</p><p>gRPC技术栈：</p><p><img src="http://img.github.mailjob.net/20220116210428.png" alt="grpc技术栈"></p><p>最底层为TCP或Unix Socket协议，在此之上是HTTP/2协议的实现，然后在HTTP/2协议之上又构建了针对Go语言的gRPC核心库。应用程序通过gRPC插件生产的Stub代码和gRPC核心库通信，也可以直接和gRPC核心库通信。</p><h2 id="参考文献">参考文献</h2><blockquote><p>protobuf入门学习：<a href="https://github.com/mailjobblog/dev_go/tree/master/220115_protobuf">https://github.com/mailjobblog/dev_go/tree/master/220115_protobuf</a><br>Go原生RPC+protobuf代码下载：<a href="https://github.com/mailjobblog/dev_go/tree/master/220113_rpc/3.rpc_protobuf">https://github.com/mailjobblog/dev_go/tree/master/220113_rpc/3.rpc_protobuf</a><br>gRPC代码下载：<a href="https://github.com/mailjobblog/dev_go/tree/master/220113_rpc/4.grpc">https://github.com/mailjobblog/dev_go/tree/master/220113_rpc/4.grpc</a></p></blockquote><h2 id="RPC实现">RPC实现</h2><h3 id="Go原生rpc-proto实现">Go原生rpc+proto实现</h3><h4 id="代码实现">代码实现</h4><p>hello.proto</p><pre class="line-numbers language-protobuf" data-language="protobuf"><code class="language-protobuf"><span class="token keyword">syntax</span> <span class="token operator">=</span> <span class="token string">"proto3"</span><span class="token punctuation">;</span><span class="token keyword">package</span> pb<span class="token punctuation">;</span><span class="token keyword">option</span> go_package<span class="token operator">=</span><span class="token string">"./pb;pb"</span><span class="token punctuation">;</span><span class="token comment">// 请求结构体</span><span class="token keyword">message</span> <span class="token class-name">HelloRequest</span> <span class="token punctuation">&#123;</span>  <span class="token builtin">string</span> res <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 返回结构体</span><span class="token keyword">message</span> <span class="token class-name">HelloResponse</span> <span class="token punctuation">&#123;</span>  <span class="token builtin">int64</span> reply <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>server.go</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>rpc<span class="token punctuation">.</span><span class="token function">Register</span><span class="token punctuation">(</span><span class="token function">new</span><span class="token punctuation">(</span>HelloService<span class="token punctuation">)</span><span class="token punctuation">)</span>listener<span class="token punctuation">,</span> err <span class="token operator">:=</span> net<span class="token punctuation">.</span><span class="token function">Listen</span><span class="token punctuation">(</span><span class="token string">"tcp"</span><span class="token punctuation">,</span> <span class="token string">":8888"</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span><span class="token string">"ListenTCP error:"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span> <span class="token punctuation">&#123;</span>conn<span class="token punctuation">,</span> err <span class="token operator">:=</span> listener<span class="token punctuation">.</span><span class="token function">Accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span><span class="token string">"Accept error:"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">go</span> rpc<span class="token punctuation">.</span><span class="token function">ServeConn</span><span class="token punctuation">(</span>conn<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">type</span> HelloService <span class="token keyword">struct</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token comment">// Length 和原生相比，这里的接收参数和返回参数都用的是proto生成的代码</span><span class="token keyword">func</span> <span class="token punctuation">(</span>h <span class="token operator">*</span>HelloService<span class="token punctuation">)</span> <span class="token function">Length</span><span class="token punctuation">(</span>res pb<span class="token punctuation">.</span>HelloRequest<span class="token punctuation">,</span> reply <span class="token operator">*</span>pb<span class="token punctuation">.</span>HelloResponse<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">&#123;</span>reply<span class="token punctuation">.</span>Reply <span class="token operator">=</span> <span class="token function">int64</span><span class="token punctuation">(</span><span class="token function">len</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>Res<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>client_test.go</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">TestClient</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>client<span class="token punctuation">,</span> err <span class="token operator">:=</span> rpc<span class="token punctuation">.</span><span class="token function">Dial</span><span class="token punctuation">(</span><span class="token string">"tcp"</span><span class="token punctuation">,</span> <span class="token string">"127.0.0.1:8888"</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span><span class="token string">"dialing:"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">// 定义请求和接受参数</span><span class="token comment">// 接收参数和返回参数都用的是proto生成的代码</span>res <span class="token operator">:=</span> pb<span class="token punctuation">.</span>HelloRequest<span class="token punctuation">&#123;</span>Res<span class="token punctuation">:</span> <span class="token string">"test666"</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> reply pb<span class="token punctuation">.</span>HelloResponseerr <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">Call</span><span class="token punctuation">(</span><span class="token string">"HelloService.Length"</span><span class="token punctuation">,</span> res<span class="token punctuation">,</span> <span class="token operator">&amp;</span>reply<span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">&#125;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>reply<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="gRPC实现">gRPC实现</h3><h4 id="代码实现-2">代码实现</h4><p>hello.proto</p><pre class="line-numbers language-protobuf" data-language="protobuf"><code class="language-protobuf"><span class="token keyword">syntax</span> <span class="token operator">=</span> <span class="token string">"proto3"</span><span class="token punctuation">;</span><span class="token keyword">package</span> pb<span class="token punctuation">;</span><span class="token keyword">option</span> go_package<span class="token operator">=</span><span class="token string">"./pb;pb"</span><span class="token punctuation">;</span><span class="token comment">// 请求结构体</span><span class="token keyword">message</span> <span class="token class-name">HelloRequest</span> <span class="token punctuation">&#123;</span>  <span class="token builtin">string</span> res <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 返回结构体</span><span class="token keyword">message</span> <span class="token class-name">HelloResponse</span> <span class="token punctuation">&#123;</span>  <span class="token builtin">int64</span> reply <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// GRPC服务</span><span class="token keyword">service</span> <span class="token class-name">HelloService</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 计算字符串长度</span>  <span class="token keyword">rpc</span> <span class="token function">Length</span><span class="token punctuation">(</span><span class="token class-name">HelloRequest</span><span class="token punctuation">)</span> <span class="token keyword">returns</span> <span class="token punctuation">(</span><span class="token class-name">HelloResponse</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>server.go</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// 创建一个 grpc server</span>grpcServer <span class="token operator">:=</span> grpc<span class="token punctuation">.</span><span class="token function">NewServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// 注册 grpc</span>pb<span class="token punctuation">.</span><span class="token function">RegisterHelloServiceServer</span><span class="token punctuation">(</span>grpcServer<span class="token punctuation">,</span> <span class="token function">new</span><span class="token punctuation">(</span>HelloService<span class="token punctuation">)</span><span class="token punctuation">)</span>lis<span class="token punctuation">,</span> err <span class="token operator">:=</span> net<span class="token punctuation">.</span><span class="token function">Listen</span><span class="token punctuation">(</span><span class="token string">"tcp"</span><span class="token punctuation">,</span> <span class="token string">":8888"</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">// 监听端口上提供gRPC服务</span>grpcServer<span class="token punctuation">.</span><span class="token function">Serve</span><span class="token punctuation">(</span>lis<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">type</span> HelloService <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>pb<span class="token punctuation">.</span>UnimplementedHelloServiceServer<span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token punctuation">(</span>h <span class="token operator">*</span>HelloService<span class="token punctuation">)</span> <span class="token function">Length</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> res <span class="token operator">*</span>pb<span class="token punctuation">.</span>HelloRequest<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>pb<span class="token punctuation">.</span>HelloResponse<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>reply <span class="token operator">:=</span> <span class="token operator">&amp;</span>pb<span class="token punctuation">.</span>HelloResponse<span class="token punctuation">&#123;</span>Reply<span class="token punctuation">:</span> <span class="token function">int64</span><span class="token punctuation">(</span><span class="token function">len</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>Res<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> reply<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>client_test.go</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">TestClient</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>conn<span class="token punctuation">,</span> err <span class="token operator">:=</span> grpc<span class="token punctuation">.</span><span class="token function">Dial</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1:8888"</span><span class="token punctuation">,</span> grpc<span class="token punctuation">.</span><span class="token function">WithTransportCredentials</span><span class="token punctuation">(</span>insecure<span class="token punctuation">.</span><span class="token function">NewCredentials</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">defer</span> conn<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>client <span class="token operator">:=</span> pb<span class="token punctuation">.</span><span class="token function">NewHelloServiceClient</span><span class="token punctuation">(</span>conn<span class="token punctuation">)</span>reply<span class="token punctuation">,</span> err <span class="token operator">:=</span> client<span class="token punctuation">.</span><span class="token function">Length</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">Background</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>pb<span class="token punctuation">.</span>HelloRequest<span class="token punctuation">&#123;</span>Res<span class="token punctuation">:</span> <span class="token string">"test123456"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">&#125;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>reply<span class="token punctuation">.</span>Reply<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>reply<span class="token punctuation">.</span><span class="token function">GetReply</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;引言&quot;&gt;引言&lt;/h2&gt;
&lt;p&gt;在 &lt;a href=&quot;https://blog.mailjob.net/posts/3190342588.html&quot;&gt;Go原生方法实现RPC&lt;/a&gt; 文章中，我们通过原生的方法实现了 RPC 调用。但是大多是基于 protobuf 进</summary>
      
    
    
    
    <category term="go" scheme="https://blog.mailjob.net/categories/go/"/>
    
    
    <category term="go" scheme="https://blog.mailjob.net/tags/go/"/>
    
  </entry>
  
  <entry>
    <title>Go原生方法实现RPC</title>
    <link href="https://blog.mailjob.net/posts/3190342588.html"/>
    <id>https://blog.mailjob.net/posts/3190342588.html</id>
    <published>2022-01-13T12:54:19.000Z</published>
    <updated>2025-10-17T05:39:50.041Z</updated>
    
    <content type="html"><![CDATA[<h2 id="引言">引言</h2><p>RPC是远程过程调用的缩写（Remote Procedure Call），通俗地说就是调用远处的一个函数。使得应用程序之间可以进行通信，而且也遵从server/client模型。使用的时候客户端调用server端提供的接口就像是调用本地的函数一样。<br><img src="http://img.github.mailjob.net/20220113211735.png" alt="RPC原理图"></p><h2 id="参考文献">参考文献</h2><blockquote><p>net/rpc实现rpc代码：<a href="https://github.com/mailjobblog/dev_go/tree/master/220113_rpc/1.rpc">https://github.com/mailjobblog/dev_go/tree/master/220113_rpc/1.rpc</a><br>jsonrpc实现rpc代码：<a href="https://github.com/mailjobblog/dev_go/tree/master/220113_rpc/2.rpcjson">https://github.com/mailjobblog/dev_go/tree/master/220113_rpc/2.rpcjson</a></p></blockquote><h2 id="RPC实现">RPC实现</h2><h3 id="Go原生net-rpc实现">Go原生net/rpc实现</h3><p>Go语言的RPC包的路径为<code>net/rpc</code>，也就是放在了net包目录下面。因此我们可以猜测该RPC包是建立在net包基础之上的。</p><h4 id="代码实现">代码实现</h4><p><strong>server.go</strong></p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token boolean">_</span> <span class="token operator">=</span> rpc<span class="token punctuation">.</span><span class="token function">Register</span><span class="token punctuation">(</span><span class="token function">new</span><span class="token punctuation">(</span>HelloService<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">// _ = rpc.RegisterName("HelloService", new(HelloService)) // 自定义名称注册</span>listener<span class="token punctuation">,</span> err <span class="token operator">:=</span> net<span class="token punctuation">.</span><span class="token function">Listen</span><span class="token punctuation">(</span><span class="token string">"tcp"</span><span class="token punctuation">,</span> <span class="token string">":8888"</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span><span class="token string">"ListenTCP error:"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">&#125;</span>conn<span class="token punctuation">,</span> err <span class="token operator">:=</span> listener<span class="token punctuation">.</span><span class="token function">Accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span><span class="token string">"Accept error:"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">&#125;</span>rpc<span class="token punctuation">.</span><span class="token function">ServeConn</span><span class="token punctuation">(</span>conn<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">type</span> HelloService <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token punctuation">(</span>h <span class="token operator">*</span>HelloService<span class="token punctuation">)</span> <span class="token function">Length</span><span class="token punctuation">(</span>res <span class="token builtin">string</span><span class="token punctuation">,</span> reply <span class="token operator">*</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">&#123;</span><span class="token operator">*</span>reply <span class="token operator">=</span> <span class="token function">len</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>rpc.Register函数调用会将对象类型中所有满足RPC规则的对象方法注册为RPC函数，所有注册的方法会放在“HelloService”服务空间之下。然后我们建立一个唯一的TCP链接，并且通过rpc.ServeConn函数在该TCP链接上为对方提供RPC服务。</p><p><strong>其中Length方法必须满足Go语言的RPC规则</strong>：</p><ul><li>方法只能有两个可序列化的参数</li><li>其中第二个参数是指针类型，</li><li>并且返回一个error类型</li><li>必须是公开的方法。</li></ul><p><strong>client.go</strong></p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>client<span class="token punctuation">,</span> err <span class="token operator">:=</span> rpc<span class="token punctuation">.</span><span class="token function">Dial</span><span class="token punctuation">(</span><span class="token string">"tcp"</span><span class="token punctuation">,</span> <span class="token string">"127.0.0.1:8888"</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span><span class="token string">"dialing:"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">&#125;</span>res <span class="token operator">:=</span> <span class="token string">"test HelloService"</span><span class="token keyword">var</span> reply <span class="token builtin">int</span>err <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">Call</span><span class="token punctuation">(</span><span class="token string">"HelloService.Length"</span><span class="token punctuation">,</span> res<span class="token punctuation">,</span> <span class="token operator">&amp;</span>reply<span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">&#125;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>reply<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Go使用jsonrpc实现">Go使用jsonrpc实现</h3><p><strong>标准库的RPC默认采用Go语言特有的 <a href="https://blog.csdn.net/libinemail/article/details/122503469">gob</a> 编码，因此从其它语言调用Go语言实现的RPC服务将比较困难。</strong></p><p>Go语言的RPC框架有两个比较有特色的设计：一个是RPC数据打包时可以通过插件实现自定义的编码和解码；另一个是RPC建立在抽象的io.ReadWriteCloser接口之上的，我们可以将RPC架设在不同的通讯协议之上。这里我们将尝试通过官方自带的net/rpc/jsonrpc扩展实现一个跨语言的PPC。</p><h4 id="代码实现-2">代码实现</h4><p><strong>server.go</strong></p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token boolean">_</span> <span class="token operator">=</span> rpc<span class="token punctuation">.</span><span class="token function">Register</span><span class="token punctuation">(</span><span class="token function">new</span><span class="token punctuation">(</span>HelloService<span class="token punctuation">)</span><span class="token punctuation">)</span>listener<span class="token punctuation">,</span> err <span class="token operator">:=</span> net<span class="token punctuation">.</span><span class="token function">Listen</span><span class="token punctuation">(</span><span class="token string">"tcp"</span><span class="token punctuation">,</span> <span class="token string">":8888"</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span><span class="token string">"ListenTCP error:"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span> <span class="token punctuation">&#123;</span>conn<span class="token punctuation">,</span> err <span class="token operator">:=</span> listener<span class="token punctuation">.</span><span class="token function">Accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span><span class="token string">"Accept error:"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">// 用rpc.ServeCodec函数替代了rpc.ServeConn函数</span><span class="token comment">// 传入的参数是针对服务端的json编解码器</span><span class="token keyword">go</span> rpc<span class="token punctuation">.</span><span class="token function">ServeCodec</span><span class="token punctuation">(</span>jsonrpc<span class="token punctuation">.</span><span class="token function">NewServerCodec</span><span class="token punctuation">(</span>conn<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">type</span> HelloService <span class="token keyword">struct</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token punctuation">(</span>h <span class="token operator">*</span>HelloService<span class="token punctuation">)</span> <span class="token function">Length</span><span class="token punctuation">(</span>res <span class="token builtin">string</span><span class="token punctuation">,</span> reply <span class="token operator">*</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">&#123;</span><span class="token operator">*</span>reply <span class="token operator">=</span> <span class="token function">len</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>client.go</strong></p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// 手工调用net.Dial函数建立TCP链接</span>conn<span class="token punctuation">,</span> err <span class="token operator">:=</span> net<span class="token punctuation">.</span><span class="token function">Dial</span><span class="token punctuation">(</span><span class="token string">"tcp"</span><span class="token punctuation">,</span> <span class="token string">"127.0.0.1:8888"</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span><span class="token string">"net.Dial:"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">// 针对客户端的json编解码器</span>client <span class="token operator">:=</span> rpc<span class="token punctuation">.</span><span class="token function">NewClientWithCodec</span><span class="token punctuation">(</span>jsonrpc<span class="token punctuation">.</span><span class="token function">NewClientCodec</span><span class="token punctuation">(</span>conn<span class="token punctuation">)</span><span class="token punctuation">)</span>res <span class="token operator">:=</span> <span class="token string">"test HelloService"</span><span class="token keyword">var</span> reply <span class="token builtin">int</span>err <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">Call</span><span class="token punctuation">(</span><span class="token string">"HelloService.Length"</span><span class="token punctuation">,</span> res<span class="token punctuation">,</span> <span class="token operator">&amp;</span>reply<span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">&#125;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>reply<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="知识拓展">知识拓展</h4><h5 id="查看服务器接收的客户端数据">查看服务器接收的客户端数据</h5><p>为了查看到客户端调用时发送的数据格式。我们可以用 <a href="https://www.runoob.com/linux/linux-comm-nc.html">nc</a> 命令 <code>nc -l 8888</code> 在同样的端口启动一个TCP服务。</p><p>然后再次执行一次RPC调用（client.go）将会发现nc输出了以下的信息：</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span><span class="token property">"method"</span><span class="token operator">:</span><span class="token string">"HelloService.Length"</span><span class="token punctuation">,</span><span class="token property">"params"</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">"test HelloService"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token property">"id"</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这是一个json编码的数据，其中<code>method</code>部分对应要调用的rpc服务和方法组合成的名字，<code>params</code>部分的第一个元素为参数，<code>id</code>是由调用端维护的一个唯一的调用编号。</p><p>请求的json数据对象在内部对应两个结构体：客户端是clientRequest，服务端是serverRequest。</p><p>clientRequest 和 serverRequest结构体的内容基本是一致的：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> clientRequest <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>    Method <span class="token builtin">string</span>         <span class="token string">`json:"method"`</span>    Params <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token string">`json:"params"`</span>    Id     <span class="token builtin">uint64</span>         <span class="token string">`json:"id"`</span><span class="token punctuation">&#125;</span><span class="token keyword">type</span> serverRequest <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>    Method <span class="token builtin">string</span>           <span class="token string">`json:"method"`</span>    Params <span class="token operator">*</span>json<span class="token punctuation">.</span>RawMessage <span class="token string">`json:"params"`</span>    Id     <span class="token operator">*</span>json<span class="token punctuation">.</span>RawMessage <span class="token string">`json:"id"`</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="用linux命令模拟客户端请求服务端">用linux命令模拟客户端请求服务端</h5><p>在获取到RPC调用对应的json数据后，我们可以通过直接向架设了RPC服务（server.go）的TCP服务器发送json数据模拟RPC方法调用：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token builtin class-name">echo</span> <span class="token parameter variable">-e</span> <span class="token string">'&#123;"method":"HelloService.Length","params":["test HelloService"],"id":0&#125;'</span> <span class="token operator">|</span> <span class="token function">nc</span> <span class="token number">127.0</span>.0.1 <span class="token number">8888</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>返回的结果也是一个json格式的数据：</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span><span class="token property">"id"</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token property">"result"</span><span class="token operator">:</span><span class="token number">17</span><span class="token punctuation">,</span><span class="token property">"error"</span><span class="token operator">:</span><span class="token null keyword">null</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>返回的json数据也是对应内部的两个结构体：客户端是clientResponse，服务端是serverResponse。两个结构体的内容同样也是类似的：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> clientResponse <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>    Id     <span class="token builtin">uint64</span>           <span class="token string">`json:"id"`</span>    Result <span class="token operator">*</span>json<span class="token punctuation">.</span>RawMessage <span class="token string">`json:"result"`</span>    Error  <span class="token keyword">interface</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>      <span class="token string">`json:"error"`</span><span class="token punctuation">&#125;</span><span class="token keyword">type</span> serverResponse <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>    Id     <span class="token operator">*</span>json<span class="token punctuation">.</span>RawMessage <span class="token string">`json:"id"`</span>    Result <span class="token keyword">interface</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>      <span class="token string">`json:"result"`</span>    Error  <span class="token keyword">interface</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>      <span class="token string">`json:"error"`</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>因此无论采用何种语言，只要遵循同样的json结构，以同样的流程就可以和Go语言编写的RPC服务进行通信。这样我们就实现了跨语言的RPC。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;引言&quot;&gt;引言&lt;/h2&gt;
&lt;p&gt;RPC是远程过程调用的缩写（Remote Procedure Call），通俗地说就是调用远处的一个函数。使得应用程序之间可以进行通信，而且也遵从server/client模型。使用的时候客户端调用server端提供的接口就像是调用本</summary>
      
    
    
    
    <category term="go" scheme="https://blog.mailjob.net/categories/go/"/>
    
    
    <category term="go" scheme="https://blog.mailjob.net/tags/go/"/>
    
  </entry>
  
  <entry>
    <title>etcd介绍与安装</title>
    <link href="https://blog.mailjob.net/posts/1765858488.html"/>
    <id>https://blog.mailjob.net/posts/1765858488.html</id>
    <published>2022-01-06T13:44:51.000Z</published>
    <updated>2025-10-17T05:39:50.044Z</updated>
    
    <content type="html"><![CDATA[<h2 id="介绍">介绍</h2><p>etcd是一个高可用的 Key/Value 存储系统，主要用于分享配置和服务发现。它是一款云原生时代的首选元数据存储产品，已经成为云原生和分布式系统的存储基石。类似项目有zookeeper和consul。</p><p><strong>etcd具有以下特点</strong>：</p><ul><li>完全复制：集群中的每个节点都可以使用完整的存档</li><li>高可用性：Etcd可用于避免硬件的单点故障或网络问题</li><li>一致性：每次读取都会返回跨多主机的最新写入</li><li>简单：包括一个定义良好、面向用户的API（gRPC）</li><li>安全：实现了带有可选的客户端证书身份验证的自动化TLS</li><li>快速：每秒10000次写入的基准速度</li><li>可靠：使用Raft算法实现了强一致、高可用的服务存储目录</li></ul><h3 id="etcd架构介绍">etcd架构介绍</h3><p><img src="http://img.github.mailjob.net/20220106223904.png" alt=""></p><h4 id="Client层">Client层</h4><ul><li>组成<ul><li>client v2 API 客户端库</li><li>client v3 API 客户端库</li></ul></li><li>作用<ul><li>提供了简洁易用的 API</li><li>支持负载均衡、节点间故障自动转移</li><li>极大降低业务使用 etcd 复杂度，提升开发效率、服务可用性</li></ul></li></ul><h4 id="API-网络层">API 网络层</h4><ul><li>client 访问 server的通信协议<ul><li>v2API<ul><li>HTTP/1.x 协议</li></ul></li><li>v3API<ul><li>gRPC 协议</li><li>HTTP/1.x 协议（通过 etcd grpc-gateway 组件支持）</li></ul></li></ul></li><li>server 节点之间的通信协议<ul><li>节点间通过 Raft 算法实现数据复制和 Leader 选举等功能时使用的 HTTP 协议</li></ul></li></ul><h4 id="Raft-算法层（基石和亮点）">Raft 算法层（基石和亮点）</h4><ul><li>核心算法组成<ul><li>Leader 选举</li><li>日志复制</li><li>ReadIndex</li></ul></li><li>作用<ul><li>用于保障 etcd 多个节点间的数据一致性、提升服务可用性等</li></ul></li></ul><h4 id="功能逻辑层（核心特性实现层）">功能逻辑层（核心特性实现层）</h4><ul><li><p>KVServer 模块</p><ul><li>限速判断（保证集群稳定性，避免雪崩）</li></ul><p><img src="http://img.github.mailjob.net/20220106223946.png" alt=""></p><ul><li>生成一个唯一的 ID，将此请求关联到一个对应的消息通知 channel，然后向 Raft 模块发起（Propose）一个提案（Proposal）</li><li>等待此 put 请求，等待写入结果通过消息通知 channel 返回或者超时。etcd 默认超时时间是 7 秒（5 秒磁盘 IO 延时 +2*1 秒竞选超时时间），如果一个请求超时未返回结果，则可能会出现 etcdserver: request timed out 错误</li></ul></li><li><p>MVCC 模块</p><ul><li><p>读场景</p><p><img src="http://img.github.mailjob.net/20220106224032.jpeg" alt="img"></p></li><li><p>写场景</p><p><img src="http://img.github.mailjob.net/20220106224040.png" alt=""></p></li><li><p>treeIndex 模块（内存树形索引模块）</p><ul><li>保存用户 key 和版本号的映射关系</li></ul></li><li><p>boltdb 模块</p><ul><li>基于 B+ tree 实现的 key-value 键值库，支持事务，提供 Get/Put 等简易 API 给 etcd 操作</li><li>每次修改操作，生成一个新的版本号 (revision)，以版本号为 key， value 为用户 key-value 等信息组成的结构体</li><li>数据隔离<ul><li>boltdb 里每个 bucket 类似对应 MySQL 一个表<ul><li>用户的 key 数据存放的 bucket 名字的是 key</li><li>etcd MVCC 元数据存放的 bucket 是 meta</li></ul></li></ul></li></ul></li></ul></li><li><p>Auth 鉴权模块</p></li><li><p>Lease 租约模块</p></li><li><p>Compactor 压缩模块</p></li><li><p>Quota 模块（配额）</p></li><li><p>Apply模块</p><p><img src="http://img.github.mailjob.net/20220106224130.png" alt=""></p></li></ul><h4 id="存储层">存储层</h4><ul><li>预写日志 (WAL) 模块<ul><li>可保障 etcd crash 后数据不丢失</li></ul></li><li>快照 (Snapshot) 模块</li><li>boltdb 模块<ul><li>保存了集群元数据和用户写入的数据</li></ul></li></ul><h2 id="参考文献">参考文献</h2><ul><li>etcd官方下载：<a href="https://github.com/etcd-io/etcd/releases">https://github.com/etcd-io/etcd/releases</a></li><li>etcd集群搭建：<a href="https://www.wenjiangs.com/doc/h30rpjp5r">https://www.wenjiangs.com/doc/h30rpjp5r</a></li><li>etcd集群配置文件：<a href="https://www.cnblogs.com/skymyyang/p/9067280.html">https://www.cnblogs.com/skymyyang/p/9067280.html</a></li></ul><h2 id="安装与配置">安装与配置</h2><p>本文基于 <code>centos7</code> 和  <code>etcd v3.5.1</code> 进行讲解，请注意版本软件区分。</p><h3 id="安装">安装</h3><p><strong>下载etcd</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> <span class="token parameter variable">-O</span>  https://github.com/etcd-io/etcd/releases/download/v3.5.1/etcd-v3.5.1-linux-amd64.tar.gz<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>PS：curl默认不支持Https，命令<code>curl -V</code>（V大写）查看Protocols项有没有https ，如果没有就要用命令：<code>yum install openssl-devel</code> 装SSL</p><p><strong>解压文件</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">tar</span> <span class="token parameter variable">-zxvf</span> etcd-v3.5.1-linux-amd64.tar.gz<span class="token builtin class-name">cd</span> etcd-v3.5.1-linux-amd6<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>添加环境变量</strong></p><p>etcd是服务端，etcdctl是运维人员操作的控制端，一般只需要装etcd，现在是学习就都装在同一台机器。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cp</span> etcd /usr/local/bin<span class="token function">cp</span> etcdctl /usr/local/bin<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>PS：用echo $PATH查看自己的环境变量路径</p><p><strong>修改环境变量PATH</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vi</span> /etc/profile<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在文件最后加入变量，因为<code>etcd</code>默认使用<code>V2</code>版本，我们需要<code>V3</code>版本的<code>API</code></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">export</span> <span class="token assign-left variable">ETCDCTL_API</span><span class="token operator">=</span><span class="token number">3</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>刷新环境变量</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">source</span> /etc/profile<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>查看版本信息</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">etcd <span class="token parameter variable">-version</span>或etcdctl version<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="启动etcd">启动etcd</h3><h4 id="单机部署">单机部署</h4><p><strong>启动</strong>：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">etcd<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>直接运行命令 <code>./etcd</code> 就可以启动了，非常简单。默认使用2379端口为客户端提供通讯， 并使用端口2380来进行服务器间通讯。</p><p><strong>测试</strong>：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@VM-0-15-centos ~<span class="token punctuation">]</span><span class="token comment"># etcdctl put foo bar</span>OK<span class="token punctuation">[</span>root@VM-0-15-centos ~<span class="token punctuation">]</span><span class="token comment"># etcdctl get foo</span>foobar<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="集群部署">集群部署</h4><p>内容略去。。。。。。</p><h3 id="其他配置">其他配置</h3><p><strong>创建etcd配置文件</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@VM-0-15-centos ~<span class="token punctuation">]</span><span class="token comment"># mkdir -p /var/lib/etcd/</span><span class="token punctuation">[</span>root@VM-0-15-centos ~<span class="token punctuation">]</span><span class="token comment"># cat &lt;&lt;EOF | sudo tee /etc/etcd.conf</span><span class="token operator">></span> <span class="token comment"># 节点名称</span><span class="token operator">></span> <span class="token assign-left variable">ETCD_NAME</span><span class="token operator">=</span>etcd1<span class="token operator">></span> <span class="token comment"># 数据存放位置</span><span class="token operator">></span> <span class="token assign-left variable">ETCD_DATA_DIR</span><span class="token operator">=</span>/var/lib/etcd/<span class="token operator">></span> EOF<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>创建开机启动文件</strong></p><pre class="line-numbers language-none"><code class="language-none">vim  &#x2F;etc&#x2F;systemd&#x2F;system&#x2F;etcd.service<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>写入以下配置信息</p><pre class="line-numbers language-none"><code class="language-none">[Unit]Description&#x3D;Etcd ServerDocumentation&#x3D;https:&#x2F;&#x2F;github.com&#x2F;coreos&#x2F;etcdAfter&#x3D;network.target [Service]User&#x3D;rootType&#x3D;notify#这个文件特别关键，etcd使用的环境变量都需要通过环境变量文件读取EnvironmentFile&#x3D;-&#x2F;etc&#x2F;etcd.confExecStart&#x3D;&#x2F;usr&#x2F;local&#x2F;bin&#x2F;etcdRestart&#x3D;on-failureRestartSec&#x3D;10sLimitNOFILE&#x3D;40000 [Install]WantedBy&#x3D;multi-user.target<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>PS：<code>EnvironmentFile=-/etc/etcd.conf </code>这个配置项里<code>/etc</code>前的<code>-</code>是<code>K8S</code>生成配置文件时就有的，不是我误写的。</p><p><strong>重新加载配置 &amp;&amp; 开机启动 &amp;&amp; 启动etcd</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">systemctl daemon-reload <span class="token operator">&amp;&amp;</span> systemctl <span class="token builtin class-name">enable</span> etcd <span class="token operator">&amp;&amp;</span> systemctl start etcd<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>开机启动设置状态，状态<code>enabled</code></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@VM-0-15-centos ~<span class="token punctuation">]</span><span class="token comment"># systemctl list-unit-files etcd.service</span>UNIT FILE    STATE  etcd.service enabled<span class="token number">1</span> unit files listed.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>查看etcd状态</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">systemctl show etcd.service<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>查看2379端口是否启动成功</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@VM-0-15-centos ~<span class="token punctuation">]</span><span class="token comment"># netstat -an |grep 2379</span>tcp        <span class="token number">0</span>      <span class="token number">0</span> <span class="token number">127.0</span>.0.1:2379          <span class="token number">0.0</span>.0.0:*               LISTEN     tcp        <span class="token number">0</span>      <span class="token number">0</span> <span class="token number">127.0</span>.0.1:50822         <span class="token number">127.0</span>.0.1:2379          ESTABLISHEDtcp        <span class="token number">0</span>      <span class="token number">0</span> <span class="token number">127.0</span>.0.1:2379          <span class="token number">127.0</span>.0.1:50822         ESTABLISHED<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>PS： CentOS默认没有装<code>netstat</code>，需要 <code>yum install -y net-tools</code> 自己装</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;介绍&quot;&gt;介绍&lt;/h2&gt;
&lt;p&gt;etcd是一个高可用的 Key/Value 存储系统，主要用于分享配置和服务发现。它是一款云原生时代的首选元数据存储产品，已经成为云原生和分布式系统的存储基石。类似项目有zookeeper和consul。&lt;/p&gt;
&lt;p&gt;&lt;strong</summary>
      
    
    
    
    <category term="linux" scheme="https://blog.mailjob.net/categories/linux/"/>
    
    
    <category term="go" scheme="https://blog.mailjob.net/tags/go/"/>
    
    <category term="linux" scheme="https://blog.mailjob.net/tags/linux/"/>
    
    <category term="etcd" scheme="https://blog.mailjob.net/tags/etcd/"/>
    
  </entry>
  
  <entry>
    <title>Go工程化:函数式选项模式</title>
    <link href="https://blog.mailjob.net/posts/485460363.html"/>
    <id>https://blog.mailjob.net/posts/485460363.html</id>
    <published>2021-12-23T05:06:00.000Z</published>
    <updated>2025-10-17T05:39:50.042Z</updated>
    
    <content type="html"><![CDATA[<h2 id="引言">引言</h2><p>Go 不是完全面向对象语言，有一些面向对象模式不太适合它。但经过这些年的发展，Go 有自己的一些模式。今天介绍一个常见的模式：函数式选项模式（Functional Options Pattern）。</p><h2 id="参考文献">参考文献</h2><p>引用官方博文：<a href="https://golang.cafe/blog/golang-functional-options-pattern.html">https://golang.cafe/blog/golang-functional-options-pattern.html</a><br>本文代码下载：<a href="https://github.com/mailjobblog/dev_go/tree/master/211223-FunOptionPattern">https://github.com/mailjobblog/dev_go/tree/master/211223-FunOptionPattern</a></p><h2 id="函数式选项模式介绍">函数式选项模式介绍</h2><p>Go 语言没有构造函数，一般通过定义 New 函数来充当构造函数。然而，如果结构有较多字段，要初始化这些字段，有很多种方式，但有一种方式认为是最好的，这就是函数式选项模式（Functional Options Pattern）。</p><p>函数式选项模式是一种在 Go 中构造结构体的模式，它通过设计一组非常有表现力和灵活的 API 来帮助配置和初始化结构体。</p><p>在 Uber 的 Go 语言规范中提到了该模式：</p><blockquote><p>Functional options 是一种模式，在该模式中，你可以声明一个不透明的 <code>Option</code> 类型，该类型在某些内部结构中记录信息。你接受这些可变数量的选项，并根据内部结构上的选项记录的完整信息进行操作。</p><p>将此模式用于构造函数和其他公共 API 中的可选参数，你预计这些参数需要扩展，尤其是在这些函数上已经有三个或更多参数的情况下。</p></blockquote><h2 id="代码演示">代码演示</h2><p>为了更好的理解该模式，我们通过一个例子来讲解。定义一个 Server 结构体：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">type</span> Server <span class="token keyword">struct</span><span class="token punctuation">&#123;</span>  host <span class="token builtin">string</span>  port <span class="token builtin">int</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">New</span><span class="token punctuation">(</span>host <span class="token builtin">string</span><span class="token punctuation">,</span> port <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">*</span>Server <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token operator">&amp;</span>Server<span class="token punctuation">&#123;</span>host<span class="token punctuation">,</span> port<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token punctuation">(</span>s <span class="token operator">*</span>Server<span class="token punctuation">)</span> <span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如何使用呢？</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>  <span class="token string">"log"</span>  <span class="token string">"server"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  svr <span class="token operator">:=</span> <span class="token function">New</span><span class="token punctuation">(</span><span class="token string">"localhost"</span><span class="token punctuation">,</span> <span class="token number">1234</span><span class="token punctuation">)</span>  <span class="token keyword">if</span> err <span class="token operator">:=</span> svr<span class="token punctuation">.</span><span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>    log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>但如果要扩展 Server 的配置选项，如何做？通常有三种做法：</p><ul><li>为每个不同的配置选项声明一个新的构造函数</li><li>定义一个新的 Config 结构体来保存配置信息</li><li>使用 Functional Option Pattern</li></ul><p>下面，我们将对于这三种模式，进行详细的讲解和演示：</p><h3 id="方法一">方法一</h3><p>这种做法是在构造函数上，定义配置参数。有几个配置参数，则在 New 上就配置几个参数。用这种方式，当配置少的时候没有问题。但是，如果配置项比较多的时候将会是灾难。</p><p>这种方式的应用。比如 net 包中的 Dial 和 DialTimeout：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">Dial</span><span class="token punctuation">(</span>network<span class="token punctuation">,</span> address <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>Conn<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">DialTimeout</span><span class="token punctuation">(</span>network<span class="token punctuation">,</span> address <span class="token builtin">string</span><span class="token punctuation">,</span> timeout time<span class="token punctuation">.</span>Duration<span class="token punctuation">)</span> <span class="token punctuation">(</span>Conn<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>完整演示代码示例</strong>：</p><p>Pkg.server</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> Server <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>host <span class="token builtin">string</span>port <span class="token builtin">int</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">New</span><span class="token punctuation">(</span>host <span class="token builtin">string</span><span class="token punctuation">,</span> port <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">*</span>Server <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token operator">&amp;</span>Server<span class="token punctuation">&#123;</span>host<span class="token punctuation">,</span> port<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// TestFunc 测试包内函数调用</span><span class="token keyword">func</span> <span class="token punctuation">(</span>s <span class="token operator">*</span>Server<span class="token punctuation">)</span> <span class="token function">TestFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">"Run Success, host:%s, port:%d \n"</span><span class="token punctuation">,</span> s<span class="token punctuation">.</span>host<span class="token punctuation">,</span> s<span class="token punctuation">.</span>port<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">nil</span> <span class="token comment">// test fun return</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>main</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>s <span class="token operator">:=</span> server<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">,</span> <span class="token number">1234</span><span class="token punctuation">)</span>test<span class="token punctuation">,</span> err <span class="token operator">:=</span> s<span class="token punctuation">.</span><span class="token function">TestFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>test<span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="方法二">方法二</h3><p>这种方式也是很常见的，特别是当配置选项很多时。通常可以创建一个 <code>Config</code> 结构体，其中包含 <code>Server</code> 的所有配置选项。这种做法，即使将来增加更多配置选项，也可以轻松的完成扩展，不会破坏 <code>Server</code> 的 API。</p><p>在使用时，需要先构造 <code>Config</code> 实例，对这个实例，又回到了前面 <code>Server </code>的问题上，因为增加或删除选项，需要对 <code>Config</code> 有较大的修改。如果将 <code>Config</code> 中的字段改为私有，可能需要定义 <code>Config</code> 的构造函数。。。</p><p><strong>完整演示代码示例</strong>：</p><p>Pkg.server</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> Server <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>cfg Config<span class="token punctuation">&#125;</span><span class="token keyword">type</span> Config <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>Host <span class="token builtin">string</span>Port <span class="token builtin">int</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">New</span><span class="token punctuation">(</span>cfg Config<span class="token punctuation">)</span> <span class="token operator">*</span>Server <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token operator">&amp;</span>Server<span class="token punctuation">&#123;</span>cfg<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// TestFunc 测试包内函数调用</span><span class="token keyword">func</span> <span class="token punctuation">(</span>s <span class="token operator">*</span>Server<span class="token punctuation">)</span> <span class="token function">TestFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">"Run Success, host:%s, port:%d \n"</span><span class="token punctuation">,</span> s<span class="token punctuation">.</span>cfg<span class="token punctuation">.</span>Host<span class="token punctuation">,</span> s<span class="token punctuation">.</span>cfg<span class="token punctuation">.</span>Port<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">nil</span> <span class="token comment">// test fun return</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>main</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>s <span class="token operator">:=</span> server<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span>server<span class="token punctuation">.</span>Config<span class="token punctuation">&#123;</span>Host<span class="token punctuation">:</span> <span class="token string">"127.0.0.1"</span><span class="token punctuation">,</span>Port<span class="token punctuation">:</span> <span class="token number">1234</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>test<span class="token punctuation">,</span> err <span class="token operator">:=</span> s<span class="token punctuation">.</span><span class="token function">TestFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>test<span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="方法三">方法三</h3><p>一个更好的解决方案是使用 <code>Functional Option Pattern</code>。在这个模式中，我们定义一个 <code>Option</code> 函数类型：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> Option <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token operator">*</span>Server<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>Option</code> 类型是一个函数类型，它接收一个参数：<code>*Server</code>。然后，<code>Server</code> 的构造函数接收一个 <code>Option</code> 类型的不定参数：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">New</span><span class="token punctuation">(</span>options <span class="token operator">...</span>Option<span class="token punctuation">)</span> <span class="token operator">*</span>Server <span class="token punctuation">&#123;</span>  svr <span class="token operator">:=</span> <span class="token operator">&amp;</span>Server<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>  <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> f <span class="token operator">:=</span> <span class="token keyword">range</span> options <span class="token punctuation">&#123;</span>    <span class="token function">f</span><span class="token punctuation">(</span>svr<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> svr<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>那选项如何起作用？需要定义一系列相关返回 Option 的函数：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">WithHost</span><span class="token punctuation">(</span>host <span class="token builtin">string</span><span class="token punctuation">)</span> Option <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token keyword">func</span><span class="token punctuation">(</span>s <span class="token operator">*</span>Server<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    s<span class="token punctuation">.</span>host <span class="token operator">=</span> host  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">WithPort</span><span class="token punctuation">(</span>port <span class="token builtin">int</span><span class="token punctuation">)</span> Option <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token keyword">func</span><span class="token punctuation">(</span>s <span class="token operator">*</span>Server<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    s<span class="token punctuation">.</span>port <span class="token operator">=</span> port  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">WithTimeout</span><span class="token punctuation">(</span>timeout time<span class="token punctuation">.</span>Duration<span class="token punctuation">)</span> Option <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token keyword">func</span><span class="token punctuation">(</span>s <span class="token operator">*</span>Server<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    s<span class="token punctuation">.</span>timeout <span class="token operator">=</span> timeout  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">WithMaxConn</span><span class="token punctuation">(</span>maxConn <span class="token builtin">int</span><span class="token punctuation">)</span> Option <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token keyword">func</span><span class="token punctuation">(</span>s <span class="token operator">*</span>Server<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    s<span class="token punctuation">.</span>maxConn <span class="token operator">=</span> maxConn  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>将来增加选项，只需要增加对应的 WithXXX 函数即可。</p><p><strong>完整演示代码示例</strong>：</p><p>Pkg.server</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> Server <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>host <span class="token builtin">string</span>port <span class="token builtin">int</span><span class="token punctuation">&#125;</span><span class="token keyword">type</span> Option <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token operator">*</span>Server<span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">New</span><span class="token punctuation">(</span>options <span class="token operator">...</span>Option<span class="token punctuation">)</span> <span class="token operator">*</span>Server <span class="token punctuation">&#123;</span>ser <span class="token operator">:=</span> <span class="token operator">&amp;</span>Server<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> f <span class="token operator">:=</span> <span class="token keyword">range</span> options <span class="token punctuation">&#123;</span><span class="token function">f</span><span class="token punctuation">(</span>ser<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> ser<span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">WithHost</span><span class="token punctuation">(</span>host <span class="token builtin">string</span><span class="token punctuation">)</span> Option <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token keyword">func</span><span class="token punctuation">(</span>s <span class="token operator">*</span>Server<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>s<span class="token punctuation">.</span>host <span class="token operator">=</span> host<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">WithPort</span><span class="token punctuation">(</span>port <span class="token builtin">int</span><span class="token punctuation">)</span> Option <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token keyword">func</span><span class="token punctuation">(</span>s <span class="token operator">*</span>Server<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>s<span class="token punctuation">.</span>port <span class="token operator">=</span> port<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// TestFunc 测试包内函数调用</span><span class="token keyword">func</span> <span class="token punctuation">(</span>s <span class="token operator">*</span>Server<span class="token punctuation">)</span> <span class="token function">TestFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">"Run Success, host:%s, port:%d \n"</span><span class="token punctuation">,</span> s<span class="token punctuation">.</span>host<span class="token punctuation">,</span> s<span class="token punctuation">.</span>port<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">nil</span> <span class="token comment">// test fun return</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>main</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>s <span class="token operator">:=</span> server<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span>server<span class="token punctuation">.</span><span class="token function">WithHost</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>server<span class="token punctuation">.</span><span class="token function">WithPort</span><span class="token punctuation">(</span><span class="token number">1234</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">)</span>test<span class="token punctuation">,</span> err <span class="token operator">:=</span> s<span class="token punctuation">.</span><span class="token function">TestFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>test<span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="扩展阅读">扩展阅读</h2><p>这种模式，在第三方库中使用挺多，比如 <a href="https://github.com/gocolly/colly">github.com/gocolly/colly</a>：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> Collector <span class="token punctuation">&#123;</span>  <span class="token comment">// 省略...</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">NewCollector</span><span class="token punctuation">(</span>options <span class="token operator">...</span>CollectorOption<span class="token punctuation">)</span> <span class="token operator">*</span>Collector<span class="token comment">// 定义了一系列 CollectorOpiton</span><span class="token keyword">type</span> CollectorOption<span class="token punctuation">&#123;</span>  <span class="token comment">// 省略...</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">AllowURLRevisit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> CollectorOption<span class="token keyword">func</span> <span class="token function">AllowedDomains</span><span class="token punctuation">(</span>domains <span class="token operator">...</span><span class="token builtin">string</span><span class="token punctuation">)</span> CollectorOption<span class="token operator">...</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>不过 <code>Uber</code> 的 Go 语言编程规范中提到该模式时，建议定义一个 Option 接口，而不是 Option 函数类型。该 Option 接口有一个未导出的方法，然后通过一个未导出的 <code>options</code> 结构来记录各选项。</p><p>Uber 的这个例子能看懂吗？</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> options <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>  cache  <span class="token builtin">bool</span>  logger <span class="token operator">*</span>zap<span class="token punctuation">.</span>Logger<span class="token punctuation">&#125;</span><span class="token keyword">type</span> Option <span class="token keyword">interface</span> <span class="token punctuation">&#123;</span>  <span class="token function">apply</span><span class="token punctuation">(</span><span class="token operator">*</span>options<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">type</span> cacheOption <span class="token builtin">bool</span><span class="token keyword">func</span> <span class="token punctuation">(</span>c cacheOption<span class="token punctuation">)</span> <span class="token function">apply</span><span class="token punctuation">(</span>opts <span class="token operator">*</span>options<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  opts<span class="token punctuation">.</span>cache <span class="token operator">=</span> <span class="token function">bool</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">WithCache</span><span class="token punctuation">(</span>c <span class="token builtin">bool</span><span class="token punctuation">)</span> Option <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token function">cacheOption</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">type</span> loggerOption <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>  Log <span class="token operator">*</span>zap<span class="token punctuation">.</span>Logger<span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token punctuation">(</span>l loggerOption<span class="token punctuation">)</span> <span class="token function">apply</span><span class="token punctuation">(</span>opts <span class="token operator">*</span>options<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  opts<span class="token punctuation">.</span>logger <span class="token operator">=</span> l<span class="token punctuation">.</span>Log<span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">WithLogger</span><span class="token punctuation">(</span>log <span class="token operator">*</span>zap<span class="token punctuation">.</span>Logger<span class="token punctuation">)</span> Option <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> loggerOption<span class="token punctuation">&#123;</span>Log<span class="token punctuation">:</span> log<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// Open creates a connection.</span><span class="token keyword">func</span> <span class="token function">Open</span><span class="token punctuation">(</span>  addr <span class="token builtin">string</span><span class="token punctuation">,</span>  opts <span class="token operator">...</span>Option<span class="token punctuation">,</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>Connection<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  options <span class="token operator">:=</span> options<span class="token punctuation">&#123;</span>    cache<span class="token punctuation">:</span>  defaultCache<span class="token punctuation">,</span>    logger<span class="token punctuation">:</span> zap<span class="token punctuation">.</span><span class="token function">NewNop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> o <span class="token operator">:=</span> <span class="token keyword">range</span> opts <span class="token punctuation">&#123;</span>    o<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>options<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// ...</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;引言&quot;&gt;引言&lt;/h2&gt;
&lt;p&gt;Go 不是完全面向对象语言，有一些面向对象模式不太适合它。但经过这些年的发展，Go 有自己的一些模式。今天介绍一个常见的模式：函数式选项模式（Functional Options Pattern）。&lt;/p&gt;
&lt;h2 id=&quot;参考文献&quot;</summary>
      
    
    
    
    <category term="go" scheme="https://blog.mailjob.net/categories/go/"/>
    
    
    <category term="go" scheme="https://blog.mailjob.net/tags/go/"/>
    
  </entry>
  
  <entry>
    <title>腾讯云serverless开发流程</title>
    <link href="https://blog.mailjob.net/posts/3240214809.html"/>
    <id>https://blog.mailjob.net/posts/3240214809.html</id>
    <published>2021-12-07T10:15:22.000Z</published>
    <updated>2025-10-17T05:39:50.040Z</updated>
    
    <content type="html"><![CDATA[<h2 id="ServerLess介绍">ServerLess介绍</h2><p>过去是“构建一个框架运行在一台服务器上，对多个事件进行响应”，Serverless则变为“构建或使用一个微服务或微功能来响应一个事件”，做到当访问时，调入相关资源开始运行，运行完成后，卸载所有开销，真正做到按需按次计费。这是云计算向纵深发展的一种自然而然的过程。</p><p>Serverless是一种构建和管理基于微服务架构的完整流程，允许你在服务部署级别而不是服务器部署级别来管理你的应用部署。它与传统架构的不同之处在于，完全由第三方管理，由事件触发，存在于无状态（Stateless）、暂存（可能只存在于一次调用的过程中）计算容器内。构建无服务器应用程序意味着开发者可以专注在产品代码上，而无须管理和操作云端或本地的服务器或运行时。Serverless真正做到了部署应用无需涉及基础设施的建设，自动构建、部署和启动服务。</p><h3 id="FaaS和BaaS">FaaS和BaaS</h3><p>Serverless由开发者实现的服务端逻辑运行在无状态的计算容器中，它由事件触发， 完全被第三方管理，其业务层面的状态则被开发者使用的数据库和存储资源所记录。Serverless涵盖了很多技术，分为两类：FaaS和BaaS。</p><h4 id="FaaS（Function-as-a-Service，函数即服务）">FaaS（Function as a Service，函数即服务）</h4><p>FaaS意在无须自行管理服务器系统或自己的服务器应用程序，即可直接运行后端代码。其中所指的服务器应用程序，是该技术与容器和PaaS（平台即服务）等其他现代化架构最大的差异。</p><p>FaaS可以取代一些服务处理服务器（可能是物理计算机，但绝对需要运行某种应用程序），这样不仅不需要自行供应服务器，也不需要全时运行应用程序。</p><p>FaaS产品不要求必须使用特定框架或库进行开发。在语言和环境方面，FaaS函数就是常规的应用程序。例如AWS Lambda的函数可以通过Javascript、Python以及任何JVM语言（Java、Clojure、Scala）等实现。然而Lambda函数也可以执行任何捆绑有所需部署构件的进程，因此可以使用任何语言，只要能编译为Unix进程即可。FaaS函数在架构方面确实存在一定的局限，尤其是在状态和执行时间方面。</p><p>在迁往FaaS的过程中，唯一需要修改的代码是“主方法/启动”代码，其中可能需要删除顶级消息处理程序的相关代码（“消息监听器接口”的实现），但这可能只需要更改方法签名即可。在FaaS的世界中，代码的其余所有部分（例如向数据库执行写入的代码）无须任何变化。</p><p>相比传统系统，部署方法会有较大变化 – 将代码上传至FaaS供应商，其他事情均可由供应商完成。目前这种方式通常意味着需要上传代码的全新定义（例如上传zip或JAR文件），随后调用一个专有API发起更新过程。</p><p>FaaS中的函数可以通过供应商定义的事件类型触发。对于亚马逊AWS，此类触发事件可以包括S3（文件）更新、时间（计划任务），以及加入消息总线的消息（例如Kinesis）。通常你的函数需要通过参数指定自己需要绑定到的事件源。</p><p>大部分供应商还允许函数作为对传入Http请求的响应来触发，通常这类请求来自某种该类型的API网关（例如AWS API网关、Webtask）。</p><h4 id="BaaS（Backend-as-a-Service，后端即服务）">BaaS（Backend as a Service，后端即服务）</h4><p>BaaS（Backend as a Service，后端即服务）是指我们不再编写或管理所有服务端组件，可以使用领域通用的远程组件（而不是进程内的库）来提供服务。理解BaaS，需要搞清楚它与PaaS的区别。</p><p>首先BaaS并非PaaS，它们的区别在于：PaaS需要参与应用的生命周期管理，BaaS则仅仅提供应用依赖的第三方服务。典型的PaaS平台需要提供手段让开发者部署和配置应用，例如自动将应用部署到Tomcat容器中，并管理应用的生命周期。BaaS不包含这些内容，BaaS只以API的方式提供应用依赖的后端服务，例如数据库和对象存储。BaaS可以是公共云服务商提供的，也可以是第三方厂商提供的。其次从功能上讲，BaaS可以看作PaaS的一个子集，即提供第三方依赖组件的部分。</p><p>BaaS服务还允许我们依赖其他人已经实现的应用逻辑。对于这点，认证就是一个很好的例子。很多应用都要自己编写实现注册、登录、密码管理等逻辑的代码，而对于不同的应用这些代码往往大同小异。完全可以把这些重复性的工作提取出来，再做成外部服务，而这正是Auth0和Amazon Cognito等产品的目标。它们能实现全面的认证和用户管理，开发团队再也不用自己编写或者管理实现这些功能的代码。</p><h2 id="腾讯云SCF介绍">腾讯云SCF介绍</h2><p>腾讯云的ServerLess（云函数）写起来，和 <a href="https://aws.amazon.com">AWS</a> 的 serverless 是差不多一样的，因为腾讯云的serverless开发上很大程度的借鉴了AWS的云函数，所以本文将会以腾讯云的 <a href="https://cloud.tencent.com/product/scf">SCF</a> 进行演示开发</p><p><img src="http://img.github.mailjob.net/20211209124334.png" alt="image-20211209124332792"></p><h2 id="参考文献">参考文献</h2><blockquote><p>腾讯云SCF：<a href="https://cloud.tencent.com/product/scf">https://cloud.tencent.com/product/scf</a><br>Go开发serverless参考文档：<a href="https://cloud.tencent.com/document/product/583/18032">https://cloud.tencent.com/document/product/583/18032</a><br>Api网关触发：<a href="https://cloud.tencent.com/document/product/583/12513">https://cloud.tencent.com/document/product/583/12513</a><br>本文代码下载：<a href="https://github.com/mailjobblog/dev_go/tree/master/211209-serverless">https://github.com/mailjobblog/dev_go/tree/master/211209-serverless</a></p></blockquote><h2 id="配置及开发步骤">配置及开发步骤</h2><h3 id="函数创建">函数创建</h3><p>点击 “新建” 后，我这里选择了 “自定义创建” 即为空白模版（当然你也可以选择用模版创建）。<br>函数类型：我这里选择 ”事件函数“ ，因为待会我的目标是使用 api 调用云函数，如果你想托管静态网站的话，可以选择 ”Web函数“。<br>函数名称：根据业务需求可以自定义。<br>运行环境：你打算用什么语言开发就选择什么语言，这里我选择用 Go 语言开发。</p><p><img src="http://img.github.mailjob.net/20211209124643.png" alt="image-20211209124641948"></p><p><img src="http://img.github.mailjob.net/20211209124857.png" alt="image-20211209124855304"></p><p>函数创建完成后，我们现在腾讯云给的demo函数，然后根据自己的需求开发。</p><p><img src="http://img.github.mailjob.net/20211209125448.png" alt="image-20211209125445981"></p><p>下载后，我们可以看到，是这样的一份代码。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"context"</span>    <span class="token string">"fmt"</span>    <span class="token string">"github.com/tencentyun/scf-go-lib/cloudfunction"</span><span class="token punctuation">)</span><span class="token keyword">type</span> DefineEvent <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// test event define</span>    Key1 <span class="token builtin">string</span> <span class="token string">`json:"key1"`</span>    Key2 <span class="token builtin">string</span> <span class="token string">`json:"key2"`</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">hello</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> event DefineEvent<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"key1:"</span><span class="token punctuation">,</span> event<span class="token punctuation">.</span>Key1<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"key2:"</span><span class="token punctuation">,</span> event<span class="token punctuation">.</span>Key2<span class="token punctuation">)</span>    <span class="token keyword">return</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">"Hello %s!"</span><span class="token punctuation">,</span> event<span class="token punctuation">.</span>Key1<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// Make the handler available for Remote Procedure Call by Cloud Function</span>    cloudfunction<span class="token punctuation">.</span><span class="token function">Start</span><span class="token punctuation">(</span>hello<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="业务开发演示">业务开发演示</h3><p>对于下载的代码，我们进行一番改写，需求则是对于给定的数字，x和y，进行求和运算，并发挥计算结果。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"context"</span>    <span class="token string">"github.com/tencentyun/scf-go-lib/cloudfunction"</span>    <span class="token string">"strconv"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// Make the handler available for Remote Procedure Call by Cloud Function</span>    <span class="token comment">// 调用 serverless 函数</span>    cloudfunction<span class="token punctuation">.</span><span class="token function">Start</span><span class="token punctuation">(</span>hello<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">// serverless 函数</span><span class="token comment">// 入参1：go语言内置的context，用于上下文</span><span class="token comment">// 入参2：腾讯serverless传递的参数会放在这个里面</span><span class="token keyword">func</span> <span class="token function">hello</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> event DefineEvent<span class="token punctuation">)</span> <span class="token punctuation">(</span>ResultDiy<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 接收传递的参数</span>    x <span class="token operator">:=</span> event<span class="token punctuation">.</span>QueryString<span class="token punctuation">.</span>X    y <span class="token operator">:=</span> event<span class="token punctuation">.</span>QueryString<span class="token punctuation">.</span>Y    <span class="token comment">// 业务实现</span>    s <span class="token operator">:=</span> <span class="token function">strJoin</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span>    result <span class="token operator">:=</span> ResultDiy<span class="token punctuation">&#123;</span>        ErrorCode<span class="token punctuation">:</span> <span class="token number">200</span><span class="token punctuation">,</span>        String<span class="token punctuation">:</span>  s<span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> result<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">&#125;</span><span class="token comment">// DefineEvent 入参2定义</span><span class="token comment">// 该参数的定义，需要遵循腾讯serverless给的规范进行定义</span><span class="token comment">// api网关触发集成概述：https://cloud.tencent.com/document/product/583/12513</span><span class="token keyword">type</span> DefineEvent <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>    QueryString <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>        X <span class="token builtin">string</span> <span class="token string">`json:"x"`</span>        Y <span class="token builtin">string</span> <span class="token string">`json:"y"`</span>    <span class="token punctuation">&#125;</span> <span class="token string">`json:"queryString"`</span>    HttpMethod <span class="token builtin">string</span> <span class="token string">`json:"httpMethod"`</span><span class="token punctuation">&#125;</span><span class="token comment">// ResultDiy 定义返回的内容</span><span class="token keyword">type</span> ResultDiy <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>    ErrorCode <span class="token builtin">int64</span> <span class="token string">`json:"errorCode"`</span>    String <span class="token builtin">string</span> <span class="token string">`json:"string"`</span><span class="token punctuation">&#125;</span><span class="token comment">// 模拟实体业务</span><span class="token keyword">func</span> <span class="token function">strJoin</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y <span class="token builtin">string</span><span class="token punctuation">)</span>  <span class="token builtin">string</span> <span class="token punctuation">&#123;</span>    length <span class="token operator">:=</span> strconv<span class="token punctuation">.</span><span class="token function">Itoa</span><span class="token punctuation">(</span><span class="token function">len</span><span class="token punctuation">(</span>x <span class="token operator">+</span> y<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> length <span class="token operator">+</span> <span class="token string">"_"</span> <span class="token operator">+</span> x <span class="token operator">+</span> <span class="token string">"_"</span> <span class="token operator">+</span> y<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>参照腾讯文档，进行编译打包</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">GOOS</span><span class="token operator">=</span>linux <span class="token assign-left variable">GOARCH</span><span class="token operator">=</span>amd64 go build <span class="token parameter variable">-o</span> main main.go<span class="token function">zip</span> main.zip main<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>上传与部署</strong></p><p><img src="http://img.github.mailjob.net/20211209131911.png" alt="image-20211209131910091"></p><h4 id="函数触发配置">函数触发配置</h4><p>使用 api 对刚刚写的云函数进行触发</p><p>首先，创建触发器</p><p><img src="http://img.github.mailjob.net/20211209132234.png" alt="image-20211209132232279"></p><p><strong>Tips</strong>：</p><p>触发方式：可以根据自己的需求选择，这里我选择 api 请求触发。<br>Api服务：即为api网关配置。<br>集成响应：这里我们选择不启用集成响应。意味着你可以自定义响应内容。否则你需要按照<a href="https://cloud.tencent.com/document/product/583/12513">文档</a>，返回对应的数据格式。</p><h4 id="Api网关配置">Api网关配置</h4><p><em>因为刚刚选择“不集成响应”，所以我们需要在网关中指定返回的数据格式</em></p><p>在 Api网关 中，我们可以看到，刚刚自动生成的 api 服务。</p><p><img src="http://img.github.mailjob.net/20211209134405.png" alt="image-20211209134403601"></p><p>然后编辑api，选择返回的数据格式为json。</p><p><img src="http://img.github.mailjob.net/20211209134555.png" alt="image-20211209134553236"></p><h3 id="测试Api触发">测试Api触发</h3><p>然后回到 “触发管理” 中，复制api访问路径。</p><p><img src="http://img.github.mailjob.net/20211209134808.png" alt="image"></p><p><strong>请求测试</strong></p><p><img src="http://img.github.mailjob.net/20211209135843.png" alt="image-20211209135838664"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;ServerLess介绍&quot;&gt;ServerLess介绍&lt;/h2&gt;
&lt;p&gt;过去是“构建一个框架运行在一台服务器上，对多个事件进行响应”，Serverless则变为“构建或使用一个微服务或微功能来响应一个事件”，做到当访问时，调入相关资源开始运行，运行完成后，卸载所有开</summary>
      
    
    
    
    <category term="blog" scheme="https://blog.mailjob.net/categories/blog/"/>
    
    
    <category term="blog" scheme="https://blog.mailjob.net/tags/blog/"/>
    
  </entry>
  
  <entry>
    <title>免费使用mongodb数据库</title>
    <link href="https://blog.mailjob.net/posts/3596683176.html"/>
    <id>https://blog.mailjob.net/posts/3596683176.html</id>
    <published>2021-12-07T10:14:31.000Z</published>
    <updated>2025-10-17T05:39:50.040Z</updated>
    
    <content type="html"><![CDATA[<p>mongodb的云数据库，新用户注册，提供500m免费的空间，对于创建测试的网站数据库来说，足够使用。虽然是服务器是在美国，但是链接稳定。下面就介绍注册和使用的流程。</p><h2 id="网址">网址</h2><blockquote><p>MongoDB官网：<a href="https://account.mongodb.com">https://account.mongodb.com</a></p></blockquote><h2 id="Mongodb概念解析">Mongodb概念解析</h2><p>不管我们学习什么数据库都应该学习其中的基础概念，在mongodb中基本的概念是文档、集合、数据库，下面我们挨个介绍。</p><p>下表将帮助您更容易理解Mongo中的一些概念：</p><p>基础概念学习地址：<a href="https://www.runoob.com/mongodb/mongodb-databases-documents-collections.html">https://www.runoob.com/mongodb/mongodb-databases-documents-collections.html</a></p><table><thead><tr><th style="text-align:left">SQL术语/概念</th><th style="text-align:left">MongoDB术语/概念</th><th style="text-align:left">解释/说明</th></tr></thead><tbody><tr><td style="text-align:left">database</td><td style="text-align:left">database</td><td style="text-align:left">数据库</td></tr><tr><td style="text-align:left">table</td><td style="text-align:left">collection</td><td style="text-align:left">数据库表/集合</td></tr><tr><td style="text-align:left">row</td><td style="text-align:left">document</td><td style="text-align:left">数据记录行/文档</td></tr><tr><td style="text-align:left">column</td><td style="text-align:left">field</td><td style="text-align:left">数据字段/域</td></tr><tr><td style="text-align:left">index</td><td style="text-align:left">index</td><td style="text-align:left">索引</td></tr><tr><td style="text-align:left">table joins</td><td style="text-align:left"></td><td style="text-align:left">表连接,MongoDB不支持</td></tr><tr><td style="text-align:left">primary key</td><td style="text-align:left">primary key</td><td style="text-align:left">主键,MongoDB自动将_id字段设置为主键</td></tr></tbody></table><p>通过下图实例，我们也可以更直观的了解Mongo中的一些概念：</p><p><img src="http://img.github.mailjob.net/20211208184216.png" alt="img"></p><h2 id="云数据库操作步骤">云数据库操作步骤</h2><h3 id="创建组织">创建组织</h3><p>首先，创建一个组织，名字你可以随便写，只要符合规范即可，命名完成后点击 <code>Next</code> 下一步</p><p><img src="http://img.github.mailjob.net/20211208171610.png" alt="image-20211208171555994"></p><p>在这里，你可以添加其他的同事进入这个组织（这里就我一个人开发，就不邀请其他人了），后点击 <code>Create Organization</code> 创建组织</p><p><img src="http://img.github.mailjob.net/20211208171825.png" alt="image-20211208171823314"></p><h3 id="创建项目">创建项目</h3><p>完成创建后，我们进去 <code>Organization的组织</code> 页面，在这里我们可以创建一个 <code>project</code> 项目</p><p><img src="http://img.github.mailjob.net/20211208172042.png" alt="image-20211208172036852"></p><h3 id="创建数据库">创建数据库</h3><p>项目创建完成后，我们需要 <code>Create a database</code>创建数据库</p><p><img src="http://img.github.mailjob.net/20211208172253.png" alt="image-20211208172250036"></p><p><img src="http://img.github.mailjob.net/20211208172338.png" alt="image-20211208172337099"></p><p>然后可以根据自己所在的地域，选择距离自己较近的节点，因为我当前所在的地域是北京，所以我在这里就选择东京了。然后 <code>Create Cluster</code>创建集群</p><p>![image-20211208172525043](/Users/libin/Library/Application Support/typora-user-images/image-20211208172525043.png)</p><h3 id="创建连接账户">创建连接账户</h3><p>紧接着，我们在安全与快速入门这里，需要创建账号和密码，以及ip白名单。</p><p>连接账户的创建，有两种方式，一种是用户名和密码，一种是证书。在这里我们选择一种比较简单的连接方式，就是用户名和密码了。</p><p><img src="http://img.github.mailjob.net/20211208173050.png" alt="image-20211208173049240"></p><p>在环境配置这里，有两种方式，一种是本地环境，一种是云环境。在这里我们选择第一种本地环境，并且开放所有的ip进入白名单。</p><p><img src="http://img.github.mailjob.net/20211208173402.png" alt="image-20211208173400381">了这里，我们就创建成功了</p><h3 id="创建成功">创建成功</h3><p>如果看到这个界面，则表示，你已经创建成功了。</p><p><img src="http://img.github.mailjob.net/20211208173950.png" alt="image-20211208173948382"></p><h3 id="测试操作">测试操作</h3><p>点击上图中的 <code>Cluster0</code>进入集群0的节点，然后点击 <code>Collections</code>集合，再点击 <code>Add My Own Data</code> 创建数据库和集合。</p><p><img src="http://img.github.mailjob.net/20211208183312.png" alt="image-20211208183310875"></p><p>创建成功后，可以在里面插入数据测试</p><h3 id="测试连接mongodb">测试连接mongodb</h3><p>点击 <code>Connect</code>连接会出现以下界面，界面提供了三种连接mongodb的方式</p><p><img src="http://img.github.mailjob.net/20211208174532.png" alt="image-20211208174530814"></p><p><strong>Connect with the MongoDB Shell</strong></p><p>表示用shell脚本连接mongodb</p><p><strong>Connect your application</strong></p><p>表示使用你的应用代码连接，在项目开发中，无论你使用的是 java、php、go、nodejs 都需要选择这种方式连接mongodb</p><p><strong>Connect using MongoDB Compass</strong></p><p>表示用客户端工具连接momgodb，你可以用mongodb官网提供的客户端工具，也可以使用 Navicat 连接</p><h4 id="Navicat连接">Navicat连接</h4><p>选择 <code>Connect using MongoDB Compass</code>则会提示相对的连接信息，然后复制连接信息，注意这里的 <code>&lt;passwor&gt;</code>需要改成你设定的密码</p><p><img src="http://img.github.mailjob.net/20211208180252.png" alt="image-20211208180250418"></p><p>Navicat 中连接方式选择 Mongodb 连接，然后选择 <code>url</code> 连接</p><p><img src="http://img.github.mailjob.net/20211208180553.png" alt="image-20211208180551317"></p><p>应用后，进行连接测试，查看是否连接成功</p><p><img src="http://img.github.mailjob.net/20211208180748.png" alt="image-20211208180746569"></p><h4 id="代码连接">代码连接</h4><p><img src="http://img.github.mailjob.net/20211209121843.png" alt="image-20211209121842356"></p><p><strong>基于Go语言测试</strong></p><p>代码下载：<a href="https://github.com/mailjobblog/dev_go/tree/master/211209-mongodb-connect">https://github.com/mailjobblog/dev_go/tree/master/211209-mongodb-connect</a></p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"context"</span><span class="token string">"fmt"</span><span class="token string">"go.mongodb.org/mongo-driver/mongo"</span><span class="token string">"go.mongodb.org/mongo-driver/mongo/options"</span><span class="token string">"log"</span><span class="token string">"time"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// 连接 mongodb</span>  <span class="token comment">// 注意：这里的账号和密码要改成你自己的</span>clientOptions <span class="token operator">:=</span> options<span class="token punctuation">.</span><span class="token function">Client</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ApplyURI</span><span class="token punctuation">(</span><span class="token string">"mongodb+srv://test_user:test_pwd@cluster0.sy0un.mongodb.net/myFirstDatabase?retryWrites=true&amp;w=majority"</span><span class="token punctuation">)</span>ctx<span class="token punctuation">,</span> cancel <span class="token operator">:=</span> context<span class="token punctuation">.</span><span class="token function">WithTimeout</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">Background</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token operator">*</span>time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span><span class="token keyword">defer</span> <span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span>client<span class="token punctuation">,</span> err <span class="token operator">:=</span> mongo<span class="token punctuation">.</span><span class="token function">Connect</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> clientOptions<span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span><span class="token string">"mongodb 连接失败，error："</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">// 定义连接库和连接集合</span>collection <span class="token operator">:=</span> client<span class="token punctuation">.</span><span class="token function">Database</span><span class="token punctuation">(</span><span class="token string">"t_db"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Collection</span><span class="token punctuation">(</span><span class="token string">"t_coll"</span><span class="token punctuation">)</span><span class="token comment">// 定义要插入的数据</span>user <span class="token operator">:=</span> UserData<span class="token punctuation">&#123;</span>Name<span class="token punctuation">:</span>       <span class="token string">"张三"</span><span class="token punctuation">,</span>Age<span class="token punctuation">:</span>        <span class="token number">20</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token comment">// 测试插入数据</span>insert<span class="token punctuation">,</span>err <span class="token operator">:=</span> collection<span class="token punctuation">.</span><span class="token function">InsertOne</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token operator">&amp;</span>user<span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span><span class="token string">"mongodb 数据插入失败，error："</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">// 打印执行结果的id</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>insert<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">// UserData 定义插入数据的结构体</span><span class="token keyword">type</span> UserData <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span><span class="token comment">// Id         string `bson:"_id,omitempty" json:"id"` // 这里不设置id，让数据库自动生成</span>Name       <span class="token builtin">string</span> <span class="token string">`bson:"name" json:"name"`</span>Age        <span class="token builtin">int</span>    <span class="token string">`bson:"age" json:"age"`</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>基于Node.js语言测试</strong></p><p>代码下载：<a href="https://github.com/mailjobblog/dev_nodejs/tree/master/211209-mongodb-connect">https://github.com/mailjobblog/dev_nodejs/tree/master/211209-mongodb-connect</a></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token punctuation">&#123;</span> MongoClient <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'mongodb'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 定义数据库连接地址</span><span class="token comment">// 这里：这里的用户名和密码要改成你自己的</span><span class="token keyword">const</span> uri <span class="token operator">=</span> <span class="token string">"mongodb+srv://test_user:test_pwd@cluster0.sy0un.mongodb.net/myFirstDatabase?retryWrites=true&amp;w=majority"</span><span class="token punctuation">;</span><span class="token comment">// 定义异步方法</span><span class="token keyword">const</span> <span class="token function-variable function">testMongo</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token comment">// connect to your cluster</span>    <span class="token keyword">const</span> client <span class="token operator">=</span> <span class="token keyword">await</span> MongoClient<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span>uri<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>        <span class="token literal-property property">useNewUrlParser</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        <span class="token literal-property property">useUnifiedTopology</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// specify the DB's name</span>    <span class="token keyword">const</span> db <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">db</span><span class="token punctuation">(</span><span class="token string">'t_db'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 数据插入测试</span>    <span class="token keyword">const</span> items <span class="token operator">=</span> <span class="token keyword">await</span> db<span class="token punctuation">.</span><span class="token function">collection</span><span class="token punctuation">(</span><span class="token string">'t_coll'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">insertOne</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"test_names"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>items<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// close connection</span>    client<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 调用异步方法</span><span class="token function">testMongo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;mongodb的云数据库，新用户注册，提供500m免费的空间，对于创建测试的网站数据库来说，足够使用。虽然是服务器是在美国，但是链接稳定。下面就介绍注册和使用的流程。&lt;/p&gt;
&lt;h2 id=&quot;网址&quot;&gt;网址&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;MongoDB官网：&lt;a </summary>
      
    
    
    
    <category term="blog" scheme="https://blog.mailjob.net/categories/blog/"/>
    
    
    <category term="blog" scheme="https://blog.mailjob.net/tags/blog/"/>
    
    <category term="mongodb" scheme="https://blog.mailjob.net/tags/mongodb/"/>
    
  </entry>
  
</feed>
